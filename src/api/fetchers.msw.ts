/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 5.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type {
    AOJCreatedResponse,
    AcknowledgedRelation,
    ActCreatedResponse,
    ActiveModuleObjectsResponse,
    AmbitieFull,
    AmbitieUUID,
    AnnouncementCreatedResponse,
    AreaDesignationValueList,
    AuthToken,
    BeleidsdoelFull,
    BeleidsdoelUUID,
    BeleidskeuzeFull,
    BeleidskeuzeUUID,
    BeleidsregelFull,
    BeleidsregelUUID,
    DocumentFull,
    DocumentUUID,
    EnvironmentCreatedResponse,
    GebiedsprogrammaFull,
    GebiedsprogrammaUUID,
    GraphResponse,
    MaatregelFull,
    MaatregelUUID,
    ModuleCreatedResponse,
    ModuleObjectContext,
    ModuleOverview,
    ModuleSnapshot,
    ModuleStatus,
    NationaalBelangFull,
    NationaalBelangUUID,
    NewObjectStaticResponse,
    OnderverdelingFull,
    PagedResponseAmbitieBasic,
    PagedResponseAmbitieExtended,
    PagedResponseBeleidsdoelBasic,
    PagedResponseBeleidsdoelExtended,
    PagedResponseBeleidskeuzeBasic,
    PagedResponseBeleidskeuzeExtended,
    PagedResponseBeleidsregelBasic,
    PagedResponseBeleidsregelExtended,
    PagedResponseDocumentBasic,
    PagedResponseDocumentExtended,
    PagedResponseGebiedsprogrammaBasic,
    PagedResponseGebiedsprogrammaExtended,
    PagedResponseGenericObjectShort,
    PagedResponseGeoSearchResult,
    PagedResponseMaatregelBasic,
    PagedResponseMaatregelExtended,
    PagedResponseModule,
    PagedResponseModuleObjectsResponse,
    PagedResponseNationaalBelangBasic,
    PagedResponseOnderverdelingBasic,
    PagedResponseOnderverdelingExtended,
    PagedResponseProgrammaAlgemeenBasic,
    PagedResponseProgrammaAlgemeenExtended,
    PagedResponsePublicModuleShort,
    PagedResponsePublication,
    PagedResponsePublicationAOJ,
    PagedResponsePublicationActPackageReportShort,
    PagedResponsePublicationActShort,
    PagedResponsePublicationAnnouncementPackageReportShort,
    PagedResponsePublicationAnnouncementShort,
    PagedResponsePublicationEnvironment,
    PagedResponsePublicationPackage,
    PagedResponsePublicationTemplate,
    PagedResponsePublicationVersionShort,
    PagedResponseSearchObject,
    PagedResponseStorageFileBasic,
    PagedResponseUser,
    PagedResponseValidSearchObject,
    PagedResponseVerplichtProgrammaBasic,
    PagedResponseVisieAlgemeenBasic,
    PagedResponseVisieAlgemeenExtended,
    PagedResponseWerkingsgebied,
    PagedResponseWerkingsgebiedBasic,
    PagedResponseWerkingsgebiedExtended,
    PagedResponseWettelijkeTaakBasic,
    ProgrammaAlgemeenFull,
    ProgrammaAlgemeenUUID,
    PublicModuleOverview,
    Publication,
    PublicationAct,
    PublicationActPackageReport,
    PublicationAnnouncement,
    PublicationAnnouncementPackageCreatedResponse,
    PublicationAnnouncementPackageReport,
    PublicationCreatedResponse,
    PublicationEnvironment,
    PublicationPackageCreatedResponse,
    PublicationTemplate,
    PublicationVersion,
    PublicationVersionCreatedResponse,
    PublicationVersionEditResponse,
    ReadRelation,
    ResetPasswordResponse,
    ResponseOK,
    RootModelListObjectCount,
    StorageFileBasic,
    TemplateCreatedResponse,
    UploadAttachmentResponse,
    UploadFileResponse,
    UploadPackageReportResponse,
    User,
    UserCreateResponse,
    VerplichtProgrammaFull,
    VerplichtProgrammaUUID,
    VisieAlgemeenFull,
    VisieAlgemeenUUID,
    WerkingsgebiedFull,
    WerkingsgebiedUUID,
    WettelijkeTaakFull,
    WettelijkeTaakUUID,
} from './fetchers.schemas'
import {
    GraphEdgeType,
    ModuleObjectActionFull,
    ModuleStatusCode,
    PublicModuleStatusCode,
    PublicationVersionStatus,
    ReportStatusType,
} from './fetchers.schemas'

export const getAreasGetListObjectsByAreasResponseMock = (
    overrideResponse: Partial<PagedResponseGeoSearchResult> = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Area_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_Type: faker.word.sample(),
        Omschrijving: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        UUID: faker.word.sample(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAreasGetListObjectsByGeometryResponseMock = (
    overrideResponse: Partial<PagedResponseGeoSearchResult> = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Area_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_Type: faker.word.sample(),
        Omschrijving: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        UUID: faker.word.sample(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAuthenticationPostAuthLoginAccessTokenResponseMock = (
    overrideResponse: Partial<AuthToken> = {}
): AuthToken => ({
    access_token: faker.word.sample(),
    identifier: {
        Gebruikersnaam: faker.word.sample(),
        Rol: faker.word.sample(),
        UUID: faker.string.uuid(),
    },
    token_type: faker.word.sample(),
    ...overrideResponse,
})

export const getAuthenticationPostAuthResetPasswordResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getGraphGetFullGraphResponseMock = (
    overrideResponse: Partial<GraphResponse> = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    ...overrideResponse,
})

export const getGraphGetObjectGraphResponseMock = (
    overrideResponse: Partial<GraphResponse> = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    ...overrideResponse,
})

export const getModulesPostCreateModuleResponseMock = (
    overrideResponse: Partial<ModuleCreatedResponse> = {}
): ModuleCreatedResponse => ({
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesGetListModulesResponseMock = (
    overrideResponse: Partial<PagedResponseModule> = {}
): PagedResponseModule => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                },
                null,
            ]),
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesViewModuleOverviewResponseMock = (
    overrideResponse: Partial<ModuleOverview> = {}
): ModuleOverview => ({
    Module: {
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                },
                null,
            ]),
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Action: faker.word.sample(),
                    Original_Adjust_On: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Client_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Owner_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Owner_2_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                },
                null,
            ]),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    StatusHistory: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
    })),
    ...overrideResponse,
})

export const getModulesPostEditModuleResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesPostActivateModuleResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesPostCompleteModuleResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesPostCloseModuleResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesViewModuleListStatusesResponseMock =
    (): ModuleStatus[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ID: faker.number.int({ min: undefined, max: undefined }),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Status: faker.word.sample(),
        }))

export const getModulesPostModulePatchStatusResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesPostModuleAddNewObjectResponseMock = (
    overrideResponse: Partial<NewObjectStaticResponse> = {}
): NewObjectStaticResponse => ({
    Code: faker.word.sample(),
    Object_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_Type: faker.word.sample(),
    ...overrideResponse,
})

export const getModulesPostModuleAddExistingObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesGetModuleGetObjectContextResponseMock = (
    overrideResponse: Partial<ModuleObjectContext> = {}
): ModuleObjectContext => ({
    Action: faker.word.sample(),
    Code: faker.word.sample(),
    Conclusion: faker.word.sample(),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Explanation: faker.word.sample(),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_Type: faker.word.sample(),
    Original_Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesPostModuleEditObjectContextResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesPostModuleRemoveObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesGetModuleSnapshotResponseMock = (
    overrideResponse: Partial<ModuleSnapshot> = {}
): ModuleSnapshot => ({
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({})),
    ...overrideResponse,
})

export const getModulesGetListModuleObjectsResponseMock = (
    overrideResponse: Partial<PagedResponseModuleObjectsResponse> = {}
): PagedResponseModuleObjectsResponse => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Action: faker.word.sample(),
                    Original_Adjust_On: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Client_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Owner_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Owner_2_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                    Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                },
                null,
            ]),
            undefined,
        ]),
        Status: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getObjectsViewObjectCountsResponseMock =
    (): RootModelListObjectCount =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            count: faker.number.int({ min: undefined, max: undefined }),
            object_type: faker.word.sample(),
        }))

export const getPublicModulesGetPublicListModulesResponseMock = (
    overrideResponse: Partial<PagedResponsePublicModuleShort> = {}
): PagedResponsePublicModuleShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                },
                null,
            ]),
            undefined,
        ]),
        Title: faker.word.sample(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicModulesGetPublicModuleOverviewResponseMock = (
    overrideResponse: Partial<PublicModuleOverview> = {}
): PublicModuleOverview => ({
    Module: {
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                },
                null,
            ]),
            undefined,
        ]),
        Title: faker.word.sample(),
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Description: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Action: faker.word.sample(),
                    Original_Adjust_On: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.string.uuid(), null]),
                        undefined,
                    ]),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    ...overrideResponse,
})

export const getPublicationAojPostCreateAojResponseMock = (
    overrideResponse: Partial<AOJCreatedResponse> = {}
): AOJCreatedResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getPublicationAojGetListAojResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationAOJ> = {}
): PagedResponsePublicationAOJ => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Administrative_Borders_Date: faker.date
            .past()
            .toISOString()
            .split('T')[0],
        Administrative_Borders_Domain: faker.word.sample(),
        Administrative_Borders_ID: faker.word.sample(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActPackagesPostCreateActPackageResponseMock = (
    overrideResponse: Partial<PublicationPackageCreatedResponse> = {}
): PublicationPackageCreatedResponse => ({
    Package_UUID: faker.string.uuid(),
    Zip_UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationActPackagesGetListActPackagesResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationPackage> = {}
): PagedResponsePublicationPackage => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Delivery_ID: faker.word.sample(),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Type: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        Zip: {
            Filename: faker.word.sample(),
            Latest_Download_By_UUID: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.uuid(), null]),
                undefined,
            ]),
            Latest_Download_Date: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            UUID: faker.string.uuid(),
        },
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActReportsPostUploadActPackageReportResponseMock = (
    overrideResponse: Partial<UploadPackageReportResponse> = {}
): UploadPackageReportResponse => ({
    Duplicate_Count: faker.number.int({ min: undefined, max: undefined }),
    Status: faker.helpers.arrayElement(Object.values(ReportStatusType)),
    ...overrideResponse,
})

export const getPublicationActReportsGetListActPackageReportsResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationActPackageReportShort> = {}
): PagedResponsePublicationActPackageReportShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_Package_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Main_Outcome: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActReportsGetDetailActPackageReportResponseMock = (
    overrideResponse: Partial<PublicationActPackageReport> = {}
): PublicationActPackageReport => ({
    Act_Package_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Filename: faker.word.sample(),
    Main_Outcome: faker.word.sample(),
    Report_Status: faker.word.sample(),
    Source_Document: faker.word.sample(),
    Sub_Delivery_ID: faker.word.sample(),
    Sub_Outcome: faker.word.sample(),
    Sub_Progress: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationActsPostCreateActResponseMock = (
    overrideResponse: Partial<ActCreatedResponse> = {}
): ActCreatedResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getPublicationActsGetListActsResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationActShort> = {}
): PagedResponsePublicationActShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.string.uuid(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        Work_Country: faker.word.sample(),
        Work_Date: faker.word.sample(),
        Work_Other: faker.word.sample(),
        Work_Province_ID: faker.word.sample(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActsPostCloseActResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationActsPostEditActResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationActsGetDetailActResponseMock = (
    overrideResponse: Partial<PublicationAct> = {}
): PublicationAct => ({
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.word.sample(),
    Environment: {
        Authority_ID: faker.word.sample(),
        Can_Publicate: faker.datatype.boolean(),
        Can_Validate: faker.datatype.boolean(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Frbr_Country: faker.word.sample(),
        Frbr_Language: faker.word.sample(),
        Governing_Body_Type: faker.word.sample(),
        Has_State: faker.datatype.boolean(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Province_ID: faker.word.sample(),
        Submitter_ID: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    },
    Is_Active: faker.datatype.boolean(),
    Metadata: {},
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    Work_Country: faker.word.sample(),
    Work_Date: faker.word.sample(),
    Work_Other: faker.word.sample(),
    Work_Province_ID: faker.word.sample(),
    ...overrideResponse,
})

export const getPublicationAnnouncementPackagesPostCreateAnnouncementPackageResponseMock =
    (
        overrideResponse: Partial<PublicationAnnouncementPackageCreatedResponse> = {}
    ): PublicationAnnouncementPackageCreatedResponse => ({
        Package_UUID: faker.string.uuid(),
        Zip_UUID: faker.string.uuid(),
        ...overrideResponse,
    })

export const getPublicationAnnouncementPackagesGetListAnnouncementPackagesResponseMock =
    (
        overrideResponse: Partial<PagedResponsePublicationPackage> = {}
    ): PagedResponsePublicationPackage => ({
        limit: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        offset: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        results: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Delivery_ID: faker.word.sample(),
            Modified_By_UUID: faker.string.uuid(),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Package_Type: faker.word.sample(),
            Report_Status: faker.word.sample(),
            UUID: faker.string.uuid(),
            Zip: {
                Filename: faker.word.sample(),
                Latest_Download_By_UUID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Latest_Download_Date: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                UUID: faker.string.uuid(),
            },
        })),
        total: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    })

export const getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportResponseMock =
    (
        overrideResponse: Partial<UploadPackageReportResponse> = {}
    ): UploadPackageReportResponse => ({
        Duplicate_Count: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement(Object.values(ReportStatusType)),
        ...overrideResponse,
    })

export const getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsResponseMock =
    (
        overrideResponse: Partial<PagedResponsePublicationAnnouncementPackageReportShort> = {}
    ): PagedResponsePublicationAnnouncementPackageReportShort => ({
        limit: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        offset: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        results: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Announcement_Package_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Filename: faker.word.sample(),
            Main_Outcome: faker.word.sample(),
            Report_Status: faker.word.sample(),
            UUID: faker.string.uuid(),
        })),
        total: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    })

export const getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportResponseMock =
    (
        overrideResponse: Partial<PublicationAnnouncementPackageReport> = {}
    ): PublicationAnnouncementPackageReport => ({
        Announcement_Package_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Main_Outcome: faker.word.sample(),
        Report_Status: faker.word.sample(),
        Source_Document: faker.word.sample(),
        Sub_Delivery_ID: faker.word.sample(),
        Sub_Outcome: faker.word.sample(),
        Sub_Progress: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })

export const getPublicationAnnouncementsPostCreateAnnouncementResponseMock = (
    overrideResponse: Partial<AnnouncementCreatedResponse> = {}
): AnnouncementCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationAnnouncementsGetListAnnouncementsResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationAnnouncementShort> = {}
): PagedResponsePublicationAnnouncementShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Announcement_Date: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                null,
            ]),
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Is_Locked: faker.datatype.boolean(),
        Metadata: {},
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAnnouncementsPostEditAnnouncementResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationAnnouncementsGetDetailAnnouncementResponseMock = (
    overrideResponse: Partial<PublicationAnnouncement> = {}
): PublicationAnnouncement => ({
    Act_Package: {
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Delivery_ID: faker.word.sample(),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Type: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
    },
    Announcement_Date: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            null,
        ]),
        undefined,
    ]),
    Content: {},
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Is_Locked: faker.datatype.boolean(),
    Metadata: {},
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Procedural: {},
    Publication: {
        Act_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    },
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationEnvironmentsPostCreateEnvironmentResponseMock = (
    overrideResponse: Partial<EnvironmentCreatedResponse> = {}
): EnvironmentCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationEnvironmentsGetListEnvironmentsResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationEnvironment> = {}
): PagedResponsePublicationEnvironment => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Authority_ID: faker.word.sample(),
        Can_Publicate: faker.datatype.boolean(),
        Can_Validate: faker.datatype.boolean(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Frbr_Country: faker.word.sample(),
        Frbr_Language: faker.word.sample(),
        Governing_Body_Type: faker.word.sample(),
        Has_State: faker.datatype.boolean(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Province_ID: faker.word.sample(),
        Submitter_ID: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationEnvironmentsPostEditEnvironmentResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationEnvironmentsGetDetailEnvironmentResponseMock = (
    overrideResponse: Partial<PublicationEnvironment> = {}
): PublicationEnvironment => ({
    Authority_ID: faker.word.sample(),
    Can_Publicate: faker.datatype.boolean(),
    Can_Validate: faker.datatype.boolean(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Description: faker.word.sample(),
    Frbr_Country: faker.word.sample(),
    Frbr_Language: faker.word.sample(),
    Governing_Body_Type: faker.word.sample(),
    Has_State: faker.datatype.boolean(),
    Is_Active: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Province_ID: faker.word.sample(),
    Submitter_ID: faker.word.sample(),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationTemplatesPostCreateTemplateResponseMock = (
    overrideResponse: Partial<TemplateCreatedResponse> = {}
): TemplateCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationTemplatesGetListTemplatesResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationTemplate> = {}
): PagedResponsePublicationTemplate => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Document_Type: faker.word.sample(),
        Field_Map: faker.helpers.arrayElement([{}, undefined]),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Object_Templates: faker.helpers.arrayElement([{}, undefined]),
        Object_Types: faker.helpers.arrayElement([{}, undefined]),
        Text_Template: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationTemplatesPostEditTemplateResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationTemplatesGetDetailTemplateResponseMock = (
    overrideResponse: Partial<PublicationTemplate> = {}
): PublicationTemplate => ({
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Description: faker.word.sample(),
    Document_Type: faker.word.sample(),
    Field_Map: faker.helpers.arrayElement([{}, undefined]),
    Is_Active: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Object_Templates: faker.helpers.arrayElement([{}, undefined]),
    Object_Types: faker.helpers.arrayElement([{}, undefined]),
    Text_Template: faker.word.sample(),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationValueListsGetAreaDesignationTypesResponseMock = (
    overrideResponse: Partial<AreaDesignationValueList> = {}
): AreaDesignationValueList => ({
    Allowed_Values: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => faker.word.sample()),
    ...overrideResponse,
})

export const getPublicationValueListsGetAreaDesignationGroupsResponseMock = (
    overrideResponse: Partial<AreaDesignationValueList> = {}
): AreaDesignationValueList => ({
    Allowed_Values: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => faker.word.sample()),
    ...overrideResponse,
})

export const getPublicationVersionsPostCreateVersionResponseMock = (
    overrideResponse: Partial<PublicationVersionCreatedResponse> = {}
): PublicationVersionCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationVersionsGetListVersionsResponseMock = (
    overrideResponse: Partial<PagedResponsePublicationVersionShort> = {}
): PagedResponsePublicationVersionShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_Packages: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Delivery_ID: faker.word.sample(),
            Modified_By_UUID: faker.string.uuid(),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Package_Type: faker.word.sample(),
            Report_Status: faker.word.sample(),
            UUID: faker.string.uuid(),
        })),
        Announcement_Date: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                null,
            ]),
            undefined,
        ]),
        Bill_Metadata: {},
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Effective_Date: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                null,
            ]),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_Status: {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ID: faker.number.int({ min: undefined, max: undefined }),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Status: faker.word.sample(),
        },
        Publication_UUID: faker.string.uuid(),
        Status: faker.helpers.arrayElement(
            Object.values(PublicationVersionStatus)
        ),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationVersionsPostEditVersionResponseMock = (
    overrideResponse: Partial<PublicationVersionEditResponse> = {}
): PublicationVersionEditResponse => ({
    Errors: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({})),
    Is_Valid: faker.datatype.boolean(),
    ...overrideResponse,
})

export const getPublicationVersionsGetDetailVersionResponseMock = (
    overrideResponse: Partial<PublicationVersion> = {}
): PublicationVersion => ({
    Announcement_Date: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            null,
        ]),
        undefined,
    ]),
    Attachments: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        File_UUID: faker.string.uuid(),
        Filename: faker.word.sample(),
        ID: faker.number.int({ min: undefined, max: undefined }),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Title: faker.word.sample(),
    })),
    Bill_Compact: {},
    Bill_Metadata: {},
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Effective_Date: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            null,
        ]),
        undefined,
    ]),
    Errors: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({})),
        undefined,
    ]),
    Is_Locked: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_Status: {
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
    },
    Procedural: {},
    Publication: {
        Act_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    },
    Status: faker.helpers.arrayElement(Object.values(PublicationVersionStatus)),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationVersionsPostDeleteVersionResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationVersionsPostUploadAttachmentResponseMock = (
    overrideResponse: Partial<UploadAttachmentResponse> = {}
): UploadAttachmentResponse => ({
    ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationVersionsPostDeleteAttachmentResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationsGetListPublicationsResponseMock = (
    overrideResponse: Partial<PagedResponsePublication> = {}
): PagedResponsePublication => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPostCreatePublicationResponseMock = (
    overrideResponse: Partial<PublicationCreatedResponse> = {}
): PublicationCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationsGetDetailPublicationResponseMock = (
    overrideResponse: Partial<Publication> = {}
): Publication => ({
    Act_UUID: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.word.sample(),
    Environment_UUID: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Is_Locked: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Procedure_Type: faker.word.sample(),
    Template_UUID: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationsPostEditPublicationResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getSearchGetMssqlSearchResponseMock = (
    overrideResponse: Partial<PagedResponseSearchObject> = {}
): PagedResponseSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
            ]),
            undefined,
        ]),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchGetMssqlValidSearchResponseMock = (
    overrideResponse: Partial<PagedResponseValidSearchObject> = {}
): PagedResponseValidSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchDoListAllLatestResponseMock = (
    overrideResponse: Partial<PagedResponseGenericObjectShort> = {}
): PagedResponseGenericObjectShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSourceWerkingsgebiedenGetListWerkingsgebiedenResponseMock = (
    overrideResponse: Partial<PagedResponseWerkingsgebied> = {}
): PagedResponseWerkingsgebied => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Geometry_Hash: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
            ]),
            undefined,
        ]),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getStorageFileGetFilesListResponseMock = (
    overrideResponse: Partial<PagedResponseStorageFileBasic> = {}
): PagedResponseStorageFileBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Checksum: faker.word.sample(),
        Content_Type: faker.word.sample(),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Size: faker.number.int({ min: undefined, max: undefined }),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getStorageFilePostFilesUploadResponseMock = (
    overrideResponse: Partial<UploadFileResponse> = {}
): UploadFileResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getStorageFileGetFilesDetailResponseMock = (
    overrideResponse: Partial<StorageFileBasic> = {}
): StorageFileBasic => ({
    Checksum: faker.word.sample(),
    Content_Type: faker.word.sample(),
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Filename: faker.word.sample(),
    Size: faker.number.int({ min: undefined, max: undefined }),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUserGetListUsersResponseMock = (
    overrideResponse: Partial<PagedResponseUser> = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUserPostCreateUserResponseMock = (
    overrideResponse: Partial<UserCreateResponse> = {}
): UserCreateResponse => ({
    Email: faker.word.sample(),
    Password: faker.word.sample(),
    Rol: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUserGetSearchUsersResponseMock = (
    overrideResponse: Partial<PagedResponseUser> = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUserViewGetUserResponseMock = (
    overrideResponse: Partial<User> = {}
): User => ({
    Email: faker.word.sample(),
    Gebruikersnaam: faker.word.sample(),
    IsActive: faker.datatype.boolean(),
    Rol: faker.word.sample(),
    Status: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUserPostEditUserResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getUserPostResetUserPasswordResponseMock = (
    overrideResponse: Partial<ResetPasswordResponse> = {}
): ResetPasswordResponse => ({
    NewPassword: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getAmbitieListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseAmbitieBasic> = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitieListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseAmbitieBasic> = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitieViewObjectVersionResponseMock = (
    overrideResponse: Partial<AmbitieFull> = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitieViewObjectLatestResponseMock = (
    overrideResponse: Partial<AmbitieFull> = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitieGetRelationsListResponseMock = (): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }))

export const getAmbitiePostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getAmbitieEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getAmbitiePostModulePatchObjectResponseMock = (
    overrideResponse: Partial<AmbitieUUID> = {}
): AmbitieUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitieGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseAmbitieExtended> = {}
): PagedResponseAmbitieExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitieViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<AmbitieFull> = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectAmbitieVersionResponseMock = (
    overrideResponse: Partial<AmbitieFull> = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitieGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsAmbitieVersionResponseMock = (
    overrideResponse: Partial<AmbitieFull> = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsdoelBasic> = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsdoelBasic> = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelViewObjectVersionResponseMock = (
    overrideResponse: Partial<BeleidsdoelFull> = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelViewObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidsdoelFull> = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelGetRelationsListResponseMock = (): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }))

export const getBeleidsdoelPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<BeleidsdoelUUID> = {}
): BeleidsdoelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsdoelExtended> = {}
): PagedResponseBeleidsdoelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidsdoelFull> = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectBeleidsdoelVersionResponseMock = (
    overrideResponse: Partial<BeleidsdoelFull> = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsBeleidsdoelVersionResponseMock = (
    overrideResponse: Partial<BeleidsdoelFull> = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzeListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidskeuzeBasic> = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzeListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidskeuzeBasic> = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzeViewObjectVersionResponseMock = (
    overrideResponse: Partial<BeleidskeuzeFull> = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzeViewObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidskeuzeFull> = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzeGetRelationsListResponseMock = (): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }))

export const getBeleidskeuzePostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzeEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzeGetAcknowledgedRelationListResponseMock =
    (): AcknowledgedRelation[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Deleted_At: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Denied: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Modified_By_UUID: faker.string.uuid(),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Requested_By_Code: faker.word.sample(),
            Side_A: {
                Acknowledged: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Acknowledged_By_UUID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Explanation: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                Title: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
            },
            Side_B: {
                Acknowledged: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Acknowledged_By_UUID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Explanation: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                Title: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
            },
            Version: faker.number.int({ min: undefined, max: undefined }),
        }))

export const getBeleidskeuzeGetAcknowledgedRelationRequestResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzePostAcknowledgedRelationEditResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzePostModulePatchObjectResponseMock = (
    overrideResponse: Partial<BeleidskeuzeUUID> = {}
): BeleidskeuzeUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzeGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidskeuzeExtended> = {}
): PagedResponseBeleidskeuzeExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzeViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidskeuzeFull> = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getGetModulesObjectBeleidskeuzeVersionResponseMock = (
    overrideResponse: Partial<BeleidskeuzeFull> = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzeGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsBeleidskeuzeVersionResponseMock = (
    overrideResponse: Partial<BeleidskeuzeFull> = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidsregelListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsregelBasic> = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsregelBasic> = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelViewObjectVersionResponseMock = (
    overrideResponse: Partial<BeleidsregelFull> = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelViewObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidsregelFull> = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelGetRelationsListResponseMock = (): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }))

export const getBeleidsregelPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<BeleidsregelUUID> = {}
): BeleidsregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseBeleidsregelExtended> = {}
): PagedResponseBeleidsregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<BeleidsregelFull> = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectBeleidsregelVersionResponseMock = (
    overrideResponse: Partial<BeleidsregelFull> = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsBeleidsregelVersionResponseMock = (
    overrideResponse: Partial<BeleidsregelFull> = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getDocumentListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseDocumentBasic> = {}
): PagedResponseDocumentBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getDocumentListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseDocumentBasic> = {}
): PagedResponseDocumentBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getDocumentViewObjectVersionResponseMock = (
    overrideResponse: Partial<DocumentFull> = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentViewObjectLatestResponseMock = (
    overrideResponse: Partial<DocumentFull> = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getDocumentPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<DocumentUUID> = {}
): DocumentUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseDocumentExtended> = {}
): PagedResponseDocumentExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getDocumentViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<DocumentFull> = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectDocumentVersionResponseMock = (
    overrideResponse: Partial<DocumentFull> = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsDocumentVersionResponseMock = (
    overrideResponse: Partial<DocumentFull> = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseGebiedsprogrammaBasic> = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammaListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseGebiedsprogrammaBasic> = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammaViewObjectVersionResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaFull> = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaViewObjectLatestResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaFull> = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaGetRelationsListResponseMock =
    (): ReadRelation[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        }))

export const getGebiedsprogrammaPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaUUID> = {}
): GebiedsprogrammaUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseGebiedsprogrammaExtended> = {}
): PagedResponseGebiedsprogrammaExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammaViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaFull> = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectGebiedsprogrammasVersionResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaFull> = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammaGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsGebiedsprogrammaVersionResponseMock = (
    overrideResponse: Partial<GebiedsprogrammaFull> = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getMaatregelListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseMaatregelBasic> = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseMaatregelBasic> = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelViewObjectVersionResponseMock = (
    overrideResponse: Partial<MaatregelFull> = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelViewObjectLatestResponseMock = (
    overrideResponse: Partial<MaatregelFull> = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelGetRelationsListResponseMock = (): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    }))

export const getMaatregelPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getMaatregelEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getMaatregelPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<MaatregelUUID> = {}
): MaatregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getMaatregelGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseMaatregelExtended> = {}
): PagedResponseMaatregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<MaatregelFull> = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getGetModulesObjectMaatregelVersionResponseMock = (
    overrideResponse: Partial<MaatregelFull> = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsMaatregelVersionResponseMock = (
    overrideResponse: Partial<MaatregelFull> = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Adjust_On: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.string.uuid(), null]),
                    undefined,
                ]),
                Area_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Onderverdelingen: faker.helpers.arrayElement([
                    Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                ]),
                Start_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
            },
            null,
        ]),
        undefined,
    ]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
            },
            null,
        ]),
        undefined,
    ]),
    ...overrideResponse,
})

export const getNationaalBelangAtemporalCreateObjectResponseMock = (
    overrideResponse: Partial<NationaalBelangUUID> = {}
): NationaalBelangUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangAtemporalEditObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangAtemporalDeleteObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseNationaalBelangBasic> = {}
): PagedResponseNationaalBelangBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getNationaalBelangViewObjectLatestResponseMock = (
    overrideResponse: Partial<NationaalBelangFull> = {}
): NationaalBelangFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangGetRelationsListResponseMock =
    (): ReadRelation[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        }))

export const getNationaalBelangPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getOnderverdelingListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseOnderverdelingBasic> = {}
): PagedResponseOnderverdelingBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getOnderverdelingListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseOnderverdelingBasic> = {}
): PagedResponseOnderverdelingBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getOnderverdelingViewObjectVersionResponseMock = (
    overrideResponse: Partial<OnderverdelingFull> = {}
): OnderverdelingFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getOnderverdelingViewObjectLatestResponseMock = (
    overrideResponse: Partial<OnderverdelingFull> = {}
): OnderverdelingFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getOnderverdelingEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getOnderverdelingGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseOnderverdelingExtended> = {}
): PagedResponseOnderverdelingExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getOnderverdelingViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<OnderverdelingFull> = {}
): OnderverdelingFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectOnderverdelingVersionResponseMock = (
    overrideResponse: Partial<OnderverdelingFull> = {}
): OnderverdelingFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getOnderverdelingGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsOnderverdelingVersionResponseMock = (
    overrideResponse: Partial<OnderverdelingFull> = {}
): OnderverdelingFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseProgrammaAlgemeenBasic> = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammaAlgemeenListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseProgrammaAlgemeenBasic> = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammaAlgemeenViewObjectVersionResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenFull> = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenViewObjectLatestResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenFull> = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenUUID> = {}
): ProgrammaAlgemeenUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseProgrammaAlgemeenExtended> = {}
): PagedResponseProgrammaAlgemeenExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammaAlgemeenViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenFull> = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectProgrammaAlgemeenVersionResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenFull> = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsProgrammaAlgemeenVersionResponseMock = (
    overrideResponse: Partial<ProgrammaAlgemeenFull> = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaAtemporalCreateObjectResponseMock = (
    overrideResponse: Partial<VerplichtProgrammaUUID> = {}
): VerplichtProgrammaUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaAtemporalEditObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaAtemporalDeleteObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseVerplichtProgrammaBasic> = {}
): PagedResponseVerplichtProgrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVerplichtProgrammaViewObjectLatestResponseMock = (
    overrideResponse: Partial<VerplichtProgrammaFull> = {}
): VerplichtProgrammaFull => ({
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getVerplichtProgrammaGetRelationsListResponseMock =
    (): ReadRelation[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        }))

export const getVerplichtProgrammaPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseVisieAlgemeenBasic> = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisieAlgemeenListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseVisieAlgemeenBasic> = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                {
                    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    End_Validity: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            `${faker.date.past().toISOString().split('.')[0]}Z`,
                            null,
                        ]),
                        undefined,
                    ]),
                    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Previous_UUID: faker.string.uuid(),
                    Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                    Title: faker.word.sample(),
                    UUID: faker.string.uuid(),
                },
                null,
            ]),
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisieAlgemeenViewObjectVersionResponseMock = (
    overrideResponse: Partial<VisieAlgemeenFull> = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenViewObjectLatestResponseMock = (
    overrideResponse: Partial<VisieAlgemeenFull> = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<VisieAlgemeenUUID> = {}
): VisieAlgemeenUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseVisieAlgemeenExtended> = {}
): PagedResponseVisieAlgemeenExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisieAlgemeenViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<VisieAlgemeenFull> = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectVisieAlgemeenVersionResponseMock = (
    overrideResponse: Partial<VisieAlgemeenFull> = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsVisieAlgemeenVersionResponseMock = (
    overrideResponse: Partial<VisieAlgemeenFull> = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                End_Validity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        null,
                    ]),
                    undefined,
                ]),
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Previous_UUID: faker.string.uuid(),
                Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_Code: faker.word.sample(),
            Module_Object_Status: faker.helpers.arrayElement(
                Object.values(PublicModuleStatusCode)
            ),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.helpers.arrayElement(
                Object.values(ModuleStatusCode)
            ),
            Module_Title: faker.word.sample(),
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseWerkingsgebiedBasic> = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Onderverdelingen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedListValidLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseWerkingsgebiedBasic> = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Onderverdelingen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedViewObjectVersionResponseMock = (
    overrideResponse: Partial<WerkingsgebiedFull> = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Related_Objects: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Module_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Module_ID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            null,
                        ]),
                        undefined,
                    ]),
                    Module_Title: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
                Valid_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
            },
            null,
        ]),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedViewObjectLatestResponseMock = (
    overrideResponse: Partial<WerkingsgebiedFull> = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Related_Objects: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Module_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Module_ID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            null,
                        ]),
                        undefined,
                    ]),
                    Module_Title: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
                Valid_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
            },
            null,
        ]),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedPostModulePatchObjectResponseMock = (
    overrideResponse: Partial<WerkingsgebiedUUID> = {}
): WerkingsgebiedUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedGetModuleListLineageTreeResponseMock = (
    overrideResponse: Partial<PagedResponseWerkingsgebiedExtended> = {}
): PagedResponseWerkingsgebiedExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
            },
            undefined,
        ]),
        Onderverdelingen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedViewModuleObjectLatestResponseMock = (
    overrideResponse: Partial<WerkingsgebiedFull> = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Related_Objects: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Module_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Module_ID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            null,
                        ]),
                        undefined,
                    ]),
                    Module_Title: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
                Valid_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
            },
            null,
        ]),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGetModulesObjectWerkingsgebiedVersionResponseMock = (
    overrideResponse: Partial<WerkingsgebiedFull> = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Related_Objects: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Module_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Module_ID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            null,
                        ]),
                        undefined,
                    ]),
                    Module_Title: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
                Valid_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
            },
            null,
        ]),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedGetListActiveModuleObjectsResponseMock =
    (): ActiveModuleObjectsResponse[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Action: faker.helpers.arrayElement(
                Object.values(ModuleObjectActionFull)
            ),
            Module: {
                Closed: faker.datatype.boolean(),
                Description: faker.word.sample(),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Manager_1: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Module_Manager_2: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        { UUID: faker.string.uuid() },
                        null,
                    ]),
                    undefined,
                ]),
                Status: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        {
                            Created_By_UUID: faker.string.uuid(),
                            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                            ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Module_ID: faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            Status: faker.word.sample(),
                        },
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
            },
            Module_Object: {
                Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Module_ID: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        null,
                    ]),
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
            },
        }))

export const getGetRevisionsWerkingsgebiedVersionResponseMock = (
    overrideResponse: Partial<WerkingsgebiedFull> = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
            },
            null,
        ]),
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Related_Objects: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            {
                Module_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Module_ID: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            null,
                        ]),
                        undefined,
                    ]),
                    Module_Title: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
                Valid_Objects: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        null,
                    ]),
                    UUID: faker.string.uuid(),
                    Werkingsgebied_Code: faker.word.sample(),
                })),
            },
            null,
        ]),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakAtemporalCreateObjectResponseMock = (
    overrideResponse: Partial<WettelijkeTaakUUID> = {}
): WettelijkeTaakUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakAtemporalEditObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakAtemporalDeleteObjectResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakListValidLineagesResponseMock = (
    overrideResponse: Partial<PagedResponseWettelijkeTaakBasic> = {}
): PagedResponseWettelijkeTaakBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWettelijkeTaakViewObjectLatestResponseMock = (
    overrideResponse: Partial<WettelijkeTaakFull> = {}
): WettelijkeTaakFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: faker.helpers.arrayElement([
                {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            Relation: faker.helpers.arrayElement([
                {
                    Description: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                },
                undefined,
            ]),
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{ UUID: faker.string.uuid() }, null]),
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    { UUID: faker.string.uuid() },
                    null,
                ]),
                undefined,
            ]),
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    VerplichtProgrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        })),
        undefined,
    ]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakGetRelationsListResponseMock =
    (): ReadRelation[] =>
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        }))

export const getWettelijkeTaakPostRelationsOverwriteResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakEditObjectStaticResponseMock = (
    overrideResponse: Partial<ResponseOK> = {}
): ResponseOK => ({
    message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getAreasGetListObjectsByAreasMockHandler = (
    overrideResponse?:
        | PagedResponseGeoSearchResult
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PagedResponseGeoSearchResult>
              | PagedResponseGeoSearchResult)
) => {
    return http.post('*/search/by-areas', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAreasGetListObjectsByAreasResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAreasGetListObjectsByGeometryMockHandler = (
    overrideResponse?:
        | PagedResponseGeoSearchResult
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PagedResponseGeoSearchResult>
              | PagedResponseGeoSearchResult)
) => {
    return http.post('*/search/by-geometry', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAreasGetListObjectsByGeometryResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAuthenticationPostAuthLoginAccessTokenMockHandler = (
    overrideResponse?:
        | AuthToken
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<AuthToken> | AuthToken)
) => {
    return http.post('*/login/access-token', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAuthenticationPostAuthLoginAccessTokenResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAuthenticationPostAuthResetPasswordMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/password-reset', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAuthenticationPostAuthResetPasswordResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGraphGetFullGraphMockHandler = (
    overrideResponse?:
        | GraphResponse
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GraphResponse> | GraphResponse)
) => {
    return http.get('*/full-graph', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGraphGetFullGraphResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGraphGetObjectGraphMockHandler = (
    overrideResponse?:
        | GraphResponse
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GraphResponse> | GraphResponse)
) => {
    return http.get('*/object-graph', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGraphGetObjectGraphResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostCreateModuleMockHandler = (
    overrideResponse?:
        | ModuleCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ModuleCreatedResponse> | ModuleCreatedResponse)
) => {
    return http.post('*/modules', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostCreateModuleResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesGetListModulesMockHandler = (
    overrideResponse?:
        | PagedResponseModule
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseModule> | PagedResponseModule)
) => {
    return http.get('*/modules', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesGetListModulesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesViewModuleOverviewMockHandler = (
    overrideResponse?:
        | ModuleOverview
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ModuleOverview> | ModuleOverview)
) => {
    return http.get('*/modules/:moduleId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesViewModuleOverviewResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostEditModuleMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/modules/:moduleId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostEditModuleResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostActivateModuleMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/modules/:moduleId/activate', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostActivateModuleResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostCompleteModuleMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/modules/:moduleId/complete', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostCompleteModuleResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostCloseModuleMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/modules/:moduleId/close', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostCloseModuleResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesViewModuleListStatusesMockHandler = (
    overrideResponse?:
        | ModuleStatus[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ModuleStatus[]> | ModuleStatus[])
) => {
    return http.get('*/modules/:moduleId/status', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesViewModuleListStatusesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostModulePatchStatusMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.patch('*/modules/:moduleId/status', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostModulePatchStatusResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostModuleAddNewObjectMockHandler = (
    overrideResponse?:
        | NewObjectStaticResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<NewObjectStaticResponse> | NewObjectStaticResponse)
) => {
    return http.post('*/modules/:moduleId/add-new-object', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostModuleAddNewObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostModuleAddExistingObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/modules/:moduleId/add-existing-object', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesPostModuleAddExistingObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesGetModuleGetObjectContextMockHandler = (
    overrideResponse?:
        | ModuleObjectContext
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ModuleObjectContext> | ModuleObjectContext)
) => {
    return http.get(
        '*/modules/:moduleId/object-context/:objectType/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getModulesGetModuleGetObjectContextResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesPostModuleEditObjectContextMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post(
        '*/modules/:moduleId/object-context/:objectType/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getModulesPostModuleEditObjectContextResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesPostModuleRemoveObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete(
        '*/modules/:moduleId/remove/:objectType/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getModulesPostModuleRemoveObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesGetModuleSnapshotMockHandler = (
    overrideResponse?:
        | ModuleSnapshot
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ModuleSnapshot> | ModuleSnapshot)
) => {
    return http.get('*/modules/:moduleId/snapshot/:statusId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesGetModuleSnapshotResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesGetListModuleObjectsMockHandler = (
    overrideResponse?:
        | PagedResponseModuleObjectsResponse
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseModuleObjectsResponse>
              | PagedResponseModuleObjectsResponse)
) => {
    return http.get('*/modules/objects/latest', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getModulesGetListModuleObjectsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectsViewObjectCountsMockHandler = (
    overrideResponse?:
        | RootModelListObjectCount
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<RootModelListObjectCount> | RootModelListObjectCount)
) => {
    return http.get('*/objects/valid/count', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getObjectsViewObjectCountsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicModulesGetPublicListModulesMockHandler = (
    overrideResponse?:
        | PagedResponsePublicModuleShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicModuleShort>
              | PagedResponsePublicModuleShort)
) => {
    return http.get('*/revisions', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicModulesGetPublicListModulesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicModulesGetPublicModuleOverviewMockHandler = (
    overrideResponse?:
        | PublicModuleOverview
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicModuleOverview> | PublicModuleOverview)
) => {
    return http.get('*/revisions/:moduleId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicModulesGetPublicModuleOverviewResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAojPostCreateAojMockHandler = (
    overrideResponse?:
        | AOJCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<AOJCreatedResponse> | AOJCreatedResponse)
) => {
    return http.post('*/publication-aoj', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationAojPostCreateAojResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAojGetListAojMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationAOJ
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationAOJ>
              | PagedResponsePublicationAOJ)
) => {
    return http.get('*/publication-aoj', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationAojGetListAojResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActPackagesPostCreateActPackageMockHandler = (
    overrideResponse?:
        | PublicationPackageCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PublicationPackageCreatedResponse>
              | PublicationPackageCreatedResponse)
) => {
    return http.post(
        '*/publication-versions/:versionUuid/packages',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationActPackagesPostCreateActPackageResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActPackagesGetListActPackagesMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationPackage
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationPackage>
              | PagedResponsePublicationPackage)
) => {
    return http.get('*/publication-act-packages', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActPackagesGetListActPackagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActPackagesGetDownloadActPackageMockHandler = () => {
    return http.get(
        '*/publication-act-packages/:actPackageUuid/download',
        async () => {
            await delay(1000)
            return new HttpResponse(null, {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            })
        }
    )
}

export const getPublicationActReportsPostUploadActPackageReportMockHandler = (
    overrideResponse?:
        | UploadPackageReportResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<UploadPackageReportResponse>
              | UploadPackageReportResponse)
) => {
    return http.post(
        '*/publication-act-packages/:actPackageUuid/report',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationActReportsPostUploadActPackageReportResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActReportsGetListActPackageReportsMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationActPackageReportShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationActPackageReportShort>
              | PagedResponsePublicationActPackageReportShort)
) => {
    return http.get('*/publication-act-reports', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActReportsGetListActPackageReportsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActReportsGetDetailActPackageReportMockHandler = (
    overrideResponse?:
        | PublicationActPackageReport
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PublicationActPackageReport>
              | PublicationActPackageReport)
) => {
    return http.get('*/publication-act-reports/:actReportUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActReportsGetDetailActPackageReportResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActReportsGetDownloadActPackageReportMockHandler =
    () => {
        return http.get(
            '*/publication-act-reports/:actReportUuid/download',
            async () => {
                await delay(1000)
                return new HttpResponse(null, {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
            }
        )
    }

export const getPublicationActsPostCreateActMockHandler = (
    overrideResponse?:
        | ActCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ActCreatedResponse> | ActCreatedResponse)
) => {
    return http.post('*/publication-acts', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActsPostCreateActResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsGetListActsMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationActShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationActShort>
              | PagedResponsePublicationActShort)
) => {
    return http.get('*/publication-acts', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActsGetListActsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsPostCloseActMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/publication-acts/:actUuid/close', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActsPostCloseActResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsPostEditActMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/publication-acts/:actUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActsPostEditActResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsGetDetailActMockHandler = (
    overrideResponse?:
        | PublicationAct
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicationAct> | PublicationAct)
) => {
    return http.get('*/publication-acts/:actUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationActsGetDetailActResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAnnouncementPackagesPostCreateAnnouncementPackageMockHandler =
    (
        overrideResponse?:
            | PublicationAnnouncementPackageCreatedResponse
            | ((
                  info: Parameters<Parameters<typeof http.post>[1]>[0]
              ) =>
                  | Promise<PublicationAnnouncementPackageCreatedResponse>
                  | PublicationAnnouncementPackageCreatedResponse)
    ) => {
        return http.post(
            '*/publication-announcements/:announcementUuid/packages',
            async info => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse !== undefined
                            ? typeof overrideResponse === 'function'
                                ? await overrideResponse(info)
                                : overrideResponse
                            : getPublicationAnnouncementPackagesPostCreateAnnouncementPackageResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementPackagesGetListAnnouncementPackagesMockHandler =
    (
        overrideResponse?:
            | PagedResponsePublicationPackage
            | ((
                  info: Parameters<Parameters<typeof http.get>[1]>[0]
              ) =>
                  | Promise<PagedResponsePublicationPackage>
                  | PagedResponsePublicationPackage)
    ) => {
        return http.get('*/publication-announcement-packages', async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationAnnouncementPackagesGetListAnnouncementPackagesResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        })
    }

export const getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageMockHandler =
    () => {
        return http.get(
            '*/publication-announcement-packages/:announcementPackageUuid/download',
            async () => {
                await delay(1000)
                return new HttpResponse(null, {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
            }
        )
    }

export const getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportMockHandler =
    (
        overrideResponse?:
            | UploadPackageReportResponse
            | ((
                  info: Parameters<Parameters<typeof http.post>[1]>[0]
              ) =>
                  | Promise<UploadPackageReportResponse>
                  | UploadPackageReportResponse)
    ) => {
        return http.post(
            '*/publication-announcement-packages/:announcementPackageUuid/report',
            async info => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse !== undefined
                            ? typeof overrideResponse === 'function'
                                ? await overrideResponse(info)
                                : overrideResponse
                            : getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsMockHandler =
    (
        overrideResponse?:
            | PagedResponsePublicationAnnouncementPackageReportShort
            | ((
                  info: Parameters<Parameters<typeof http.get>[1]>[0]
              ) =>
                  | Promise<PagedResponsePublicationAnnouncementPackageReportShort>
                  | PagedResponsePublicationAnnouncementPackageReportShort)
    ) => {
        return http.get('*/publication-announcement-reports', async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        })
    }

export const getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportMockHandler =
    (
        overrideResponse?:
            | PublicationAnnouncementPackageReport
            | ((
                  info: Parameters<Parameters<typeof http.get>[1]>[0]
              ) =>
                  | Promise<PublicationAnnouncementPackageReport>
                  | PublicationAnnouncementPackageReport)
    ) => {
        return http.get(
            '*/publication-announcement-reports/:announcementReportUuid',
            async info => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse !== undefined
                            ? typeof overrideResponse === 'function'
                                ? await overrideResponse(info)
                                : overrideResponse
                            : getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportMockHandler =
    () => {
        return http.get(
            '*/publication-announcement-reports/:announcementReportUuid/download',
            async () => {
                await delay(1000)
                return new HttpResponse(null, {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
            }
        )
    }

export const getPublicationAnnouncementsPostCreateAnnouncementMockHandler = (
    overrideResponse?:
        | AnnouncementCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<AnnouncementCreatedResponse>
              | AnnouncementCreatedResponse)
) => {
    return http.post(
        '*/publication-act-packages/:actPackageUuid/create-announcement',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationAnnouncementsPostCreateAnnouncementResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationAnnouncementsGetListAnnouncementsMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationAnnouncementShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationAnnouncementShort>
              | PagedResponsePublicationAnnouncementShort)
) => {
    return http.get('*/publication-announcements', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationAnnouncementsGetListAnnouncementsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAnnouncementsPostEditAnnouncementMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post(
        '*/publication-announcements/:announcementUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationAnnouncementsPostEditAnnouncementResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationAnnouncementsGetDetailAnnouncementMockHandler = (
    overrideResponse?:
        | PublicationAnnouncement
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicationAnnouncement> | PublicationAnnouncement)
) => {
    return http.get(
        '*/publication-announcements/:announcementUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationAnnouncementsGetDetailAnnouncementResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationEnvironmentsPostCreateEnvironmentMockHandler = (
    overrideResponse?:
        | EnvironmentCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<EnvironmentCreatedResponse> | EnvironmentCreatedResponse)
) => {
    return http.post('*/publication-environments', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationEnvironmentsPostCreateEnvironmentResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsGetListEnvironmentsMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationEnvironment
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationEnvironment>
              | PagedResponsePublicationEnvironment)
) => {
    return http.get('*/publication-environments', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationEnvironmentsGetListEnvironmentsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsPostEditEnvironmentMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post(
        '*/publication-environments/:environmentUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationEnvironmentsPostEditEnvironmentResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationEnvironmentsGetDetailEnvironmentMockHandler = (
    overrideResponse?:
        | PublicationEnvironment
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicationEnvironment> | PublicationEnvironment)
) => {
    return http.get(
        '*/publication-environments/:environmentUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationEnvironmentsGetDetailEnvironmentResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationTemplatesPostCreateTemplateMockHandler = (
    overrideResponse?:
        | TemplateCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<TemplateCreatedResponse> | TemplateCreatedResponse)
) => {
    return http.post('*/publication-templates', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationTemplatesPostCreateTemplateResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesGetListTemplatesMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationTemplate
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationTemplate>
              | PagedResponsePublicationTemplate)
) => {
    return http.get('*/publication-templates', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationTemplatesGetListTemplatesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesPostEditTemplateMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/publication-templates/:templateUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationTemplatesPostEditTemplateResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesGetDetailTemplateMockHandler = (
    overrideResponse?:
        | PublicationTemplate
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicationTemplate> | PublicationTemplate)
) => {
    return http.get('*/publication-templates/:templateUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationTemplatesGetDetailTemplateResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationValueListsGetAreaDesignationTypesMockHandler = (
    overrideResponse?:
        | AreaDesignationValueList
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AreaDesignationValueList> | AreaDesignationValueList)
) => {
    return http.get(
        '*/publication-dso-value-lists/area-designation-types',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationValueListsGetAreaDesignationTypesResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationValueListsGetAreaDesignationGroupsMockHandler = (
    overrideResponse?:
        | AreaDesignationValueList
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AreaDesignationValueList> | AreaDesignationValueList)
) => {
    return http.get(
        '*/publication-dso-value-lists/area-designation-groups',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationValueListsGetAreaDesignationGroupsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationVersionsPostCreateVersionMockHandler = (
    overrideResponse?:
        | PublicationVersionCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PublicationVersionCreatedResponse>
              | PublicationVersionCreatedResponse)
) => {
    return http.post('*/publications/:publicationUuid/version', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationVersionsPostCreateVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsGetListVersionsMockHandler = (
    overrideResponse?:
        | PagedResponsePublicationVersionShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponsePublicationVersionShort>
              | PagedResponsePublicationVersionShort)
) => {
    return http.get('*/publications/:publicationUuid/versions', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationVersionsGetListVersionsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsPostEditVersionMockHandler = (
    overrideResponse?:
        | PublicationVersionEditResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PublicationVersionEditResponse>
              | PublicationVersionEditResponse)
) => {
    return http.post('*/publication-versions/:versionUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationVersionsPostEditVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsGetDetailVersionMockHandler = (
    overrideResponse?:
        | PublicationVersion
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PublicationVersion> | PublicationVersion)
) => {
    return http.get('*/publication-versions/:versionUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationVersionsGetDetailVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsPostDeleteVersionMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete('*/publication-versions/:versionUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationVersionsPostDeleteVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsPostUploadAttachmentMockHandler = (
    overrideResponse?:
        | UploadAttachmentResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<UploadAttachmentResponse> | UploadAttachmentResponse)
) => {
    return http.post(
        '*/publication-versions/:versionUuid/attachments',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationVersionsPostUploadAttachmentResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationVersionsPostDeleteAttachmentMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete(
        '*/publication-versions/:versionUuid/attachments/:attachmentId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getPublicationVersionsPostDeleteAttachmentResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationVersionsPostCreatePdfMockHandler = () => {
    return http.post(
        '*/publication-versions/:versionUuid/pdf_export',
        async () => {
            await delay(1000)
            return new HttpResponse(null, {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            })
        }
    )
}

export const getPublicationsGetListPublicationsMockHandler = (
    overrideResponse?:
        | PagedResponsePublication
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponsePublication> | PagedResponsePublication)
) => {
    return http.get('*/publications', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationsGetListPublicationsResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPostCreatePublicationMockHandler = (
    overrideResponse?:
        | PublicationCreatedResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<PublicationCreatedResponse> | PublicationCreatedResponse)
) => {
    return http.post('*/publications', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationsPostCreatePublicationResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsGetDetailPublicationMockHandler = (
    overrideResponse?:
        | Publication
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<Publication> | Publication)
) => {
    return http.get('*/publications/:publicationUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationsGetDetailPublicationResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPostEditPublicationMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/publications/:publicationUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPublicationsPostEditPublicationResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchGetMssqlSearchMockHandler = (
    overrideResponse?:
        | PagedResponseSearchObject
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<PagedResponseSearchObject> | PagedResponseSearchObject)
) => {
    return http.post('*/search', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getSearchGetMssqlSearchResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchGetMssqlValidSearchMockHandler = (
    overrideResponse?:
        | PagedResponseValidSearchObject
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) =>
              | Promise<PagedResponseValidSearchObject>
              | PagedResponseValidSearchObject)
) => {
    return http.post('*/search/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getSearchGetMssqlValidSearchResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchDoListAllLatestMockHandler = (
    overrideResponse?:
        | PagedResponseGenericObjectShort
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseGenericObjectShort>
              | PagedResponseGenericObjectShort)
) => {
    return http.get('*/objects/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getSearchDoListAllLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSourceWerkingsgebiedenGetListWerkingsgebiedenMockHandler = (
    overrideResponse?:
        | PagedResponseWerkingsgebied
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseWerkingsgebied>
              | PagedResponseWerkingsgebied)
) => {
    return http.get('*/source-werkingsgebieden', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getSourceWerkingsgebiedenGetListWerkingsgebiedenResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getStorageFileGetFilesListMockHandler = (
    overrideResponse?:
        | PagedResponseStorageFileBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseStorageFileBasic>
              | PagedResponseStorageFileBasic)
) => {
    return http.get('*/storage-files', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getStorageFileGetFilesListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getStorageFilePostFilesUploadMockHandler = (
    overrideResponse?:
        | UploadFileResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<UploadFileResponse> | UploadFileResponse)
) => {
    return http.post('*/storage-files', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getStorageFilePostFilesUploadResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getStorageFileGetFilesDetailMockHandler = (
    overrideResponse?:
        | StorageFileBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<StorageFileBasic> | StorageFileBasic)
) => {
    return http.get('*/storage-files/:fileUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getStorageFileGetFilesDetailResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserGetListUsersMockHandler = (
    overrideResponse?:
        | PagedResponseUser
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseUser> | PagedResponseUser)
) => {
    return http.get('*/users', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserGetListUsersResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserPostCreateUserMockHandler = (
    overrideResponse?:
        | UserCreateResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<UserCreateResponse> | UserCreateResponse)
) => {
    return http.post('*/users', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserPostCreateUserResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserGetSearchUsersMockHandler = (
    overrideResponse?:
        | PagedResponseUser
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseUser> | PagedResponseUser)
) => {
    return http.get('*/users/search', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserGetSearchUsersResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserViewGetUserMockHandler = (
    overrideResponse?:
        | User
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<User> | User)
) => {
    return http.get('*/users/:userUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserViewGetUserResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserPostEditUserMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/users/:userUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserPostEditUserResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUserPostResetUserPasswordMockHandler = (
    overrideResponse?:
        | ResetPasswordResponse
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResetPasswordResponse> | ResetPasswordResponse)
) => {
    return http.post('*/users/:userUuid/reset-password', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getUserPostResetUserPasswordResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseAmbitieBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseAmbitieBasic> | PagedResponseAmbitieBasic)
) => {
    return http.get('*/ambities/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseAmbitieBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseAmbitieBasic> | PagedResponseAmbitieBasic)
) => {
    return http.get('*/ambities/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieViewObjectVersionMockHandler = (
    overrideResponse?:
        | AmbitieFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AmbitieFull> | AmbitieFull)
) => {
    return http.get('*/ambities/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieViewObjectLatestMockHandler = (
    overrideResponse?:
        | AmbitieFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AmbitieFull> | AmbitieFull)
) => {
    return http.get('*/ambities/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/ambities/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiePostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/ambities/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitiePostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/ambitie/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getAmbitieEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiePostModulePatchObjectMockHandler = (
    overrideResponse?:
        | AmbitieUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<AmbitieUUID> | AmbitieUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getAmbitiePostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getAmbitieGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseAmbitieExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseAmbitieExtended>
              | PagedResponseAmbitieExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getAmbitieGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getAmbitieViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | AmbitieFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AmbitieFull> | AmbitieFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getAmbitieViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectAmbitieVersionMockHandler = (
    overrideResponse?:
        | AmbitieFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AmbitieFull> | AmbitieFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectAmbitieVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getAmbitieGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/ambitie/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getAmbitieGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsAmbitieVersionMockHandler = (
    overrideResponse?:
        | AmbitieFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AmbitieFull> | AmbitieFull)
) => {
    return http.get(
        '*/revisions/:moduleId/ambitie/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsAmbitieVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsdoelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsdoelBasic>
              | PagedResponseBeleidsdoelBasic)
) => {
    return http.get('*/beleidsdoelen/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsdoelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsdoelBasic>
              | PagedResponseBeleidsdoelBasic)
) => {
    return http.get('*/beleidsdoelen/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelViewObjectVersionMockHandler = (
    overrideResponse?:
        | BeleidsdoelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsdoelFull> | BeleidsdoelFull)
) => {
    return http.get('*/beleidsdoelen/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelViewObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidsdoelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsdoelFull> | BeleidsdoelFull)
) => {
    return http.get('*/beleidsdoelen/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/beleidsdoelen/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/beleidsdoelen/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/beleidsdoel/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsdoelEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | BeleidsdoelUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<BeleidsdoelUUID> | BeleidsdoelUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsdoelPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsdoelExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsdoelExtended>
              | PagedResponseBeleidsdoelExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsdoelGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidsdoelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsdoelFull> | BeleidsdoelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsdoel/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsdoelViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectBeleidsdoelVersionMockHandler = (
    overrideResponse?:
        | BeleidsdoelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsdoelFull> | BeleidsdoelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsdoel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectBeleidsdoelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/beleidsdoel/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsdoelGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsBeleidsdoelVersionMockHandler = (
    overrideResponse?:
        | BeleidsdoelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsdoelFull> | BeleidsdoelFull)
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsdoel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsBeleidsdoelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidskeuzeBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidskeuzeBasic>
              | PagedResponseBeleidskeuzeBasic)
) => {
    return http.get('*/beleidskeuzes/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidskeuzeBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidskeuzeBasic>
              | PagedResponseBeleidskeuzeBasic)
) => {
    return http.get('*/beleidskeuzes/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeViewObjectVersionMockHandler = (
    overrideResponse?:
        | BeleidskeuzeFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidskeuzeFull> | BeleidskeuzeFull)
) => {
    return http.get('*/beleidskeuzes/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeViewObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidskeuzeFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidskeuzeFull> | BeleidskeuzeFull)
) => {
    return http.get('*/beleidskeuzes/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/beleidskeuzes/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzePostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/beleidskeuzes/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzePostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/beleidskeuze/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidskeuzeEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeGetAcknowledgedRelationListMockHandler = (
    overrideResponse?:
        | AcknowledgedRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<AcknowledgedRelation[]> | AcknowledgedRelation[])
) => {
    return http.get(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzeGetAcknowledgedRelationListResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeGetAcknowledgedRelationRequestMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzeGetAcknowledgedRelationRequestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzePostAcknowledgedRelationEditMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post(
        '*/beleidskeuze/acknowledged-relations/:lineageId/edit',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzePostAcknowledgedRelationEditResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzePostModulePatchObjectMockHandler = (
    overrideResponse?:
        | BeleidskeuzeUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<BeleidskeuzeUUID> | BeleidskeuzeUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzePostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidskeuzeExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidskeuzeExtended>
              | PagedResponseBeleidskeuzeExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzeGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidskeuzeFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidskeuzeFull> | BeleidskeuzeFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidskeuze/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzeViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectBeleidskeuzeVersionMockHandler = (
    overrideResponse?:
        | BeleidskeuzeFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidskeuzeFull> | BeleidskeuzeFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidskeuze/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectBeleidskeuzeVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/objects/beleidskeuze/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidskeuzeGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsBeleidskeuzeVersionMockHandler = (
    overrideResponse?:
        | BeleidskeuzeFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidskeuzeFull> | BeleidskeuzeFull)
) => {
    return http.get(
        '*/revisions/:moduleId/beleidskeuze/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsBeleidskeuzeVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsregelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsregelBasic>
              | PagedResponseBeleidsregelBasic)
) => {
    return http.get('*/beleidsregels/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsregelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsregelBasic>
              | PagedResponseBeleidsregelBasic)
) => {
    return http.get('*/beleidsregels/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelViewObjectVersionMockHandler = (
    overrideResponse?:
        | BeleidsregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsregelFull> | BeleidsregelFull)
) => {
    return http.get('*/beleidsregels/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelViewObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidsregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsregelFull> | BeleidsregelFull)
) => {
    return http.get('*/beleidsregels/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/beleidsregels/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/beleidsregels/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/beleidsregel/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getBeleidsregelEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | BeleidsregelUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<BeleidsregelUUID> | BeleidsregelUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsregelPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseBeleidsregelExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseBeleidsregelExtended>
              | PagedResponseBeleidsregelExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsregelGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | BeleidsregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsregelFull> | BeleidsregelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsregel/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsregelViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectBeleidsregelVersionMockHandler = (
    overrideResponse?:
        | BeleidsregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsregelFull> | BeleidsregelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsregel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectBeleidsregelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/objects/beleidsregel/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getBeleidsregelGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsBeleidsregelVersionMockHandler = (
    overrideResponse?:
        | BeleidsregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<BeleidsregelFull> | BeleidsregelFull)
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsregel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsBeleidsregelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getDocumentListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseDocumentBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseDocumentBasic> | PagedResponseDocumentBasic)
) => {
    return http.get('*/documenten/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getDocumentListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseDocumentBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<PagedResponseDocumentBasic> | PagedResponseDocumentBasic)
) => {
    return http.get('*/documenten/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getDocumentListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentViewObjectVersionMockHandler = (
    overrideResponse?:
        | DocumentFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DocumentFull> | DocumentFull)
) => {
    return http.get('*/documenten/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getDocumentViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentViewObjectLatestMockHandler = (
    overrideResponse?:
        | DocumentFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DocumentFull> | DocumentFull)
) => {
    return http.get('*/documenten/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getDocumentViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/document/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getDocumentEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | DocumentUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<DocumentUUID> | DocumentUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/document/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getDocumentPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getDocumentGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseDocumentExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseDocumentExtended>
              | PagedResponseDocumentExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/document/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getDocumentGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getDocumentViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | DocumentFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DocumentFull> | DocumentFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/document/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getDocumentViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectDocumentVersionMockHandler = (
    overrideResponse?:
        | DocumentFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DocumentFull> | DocumentFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/document/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectDocumentVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getDocumentGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/document/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getDocumentGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsDocumentVersionMockHandler = (
    overrideResponse?:
        | DocumentFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<DocumentFull> | DocumentFull)
) => {
    return http.get(
        '*/revisions/:moduleId/document/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsDocumentVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammaListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseGebiedsprogrammaBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseGebiedsprogrammaBasic>
              | PagedResponseGebiedsprogrammaBasic)
) => {
    return http.get('*/gebiedsprogrammas/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseGebiedsprogrammaBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseGebiedsprogrammaBasic>
              | PagedResponseGebiedsprogrammaBasic)
) => {
    return http.get('*/gebiedsprogrammas/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaViewObjectVersionMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GebiedsprogrammaFull> | GebiedsprogrammaFull)
) => {
    return http.get('*/gebiedsprogrammas/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaViewObjectLatestMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GebiedsprogrammaFull> | GebiedsprogrammaFull)
) => {
    return http.get('*/gebiedsprogrammas/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/gebiedsprogrammas/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/gebiedsprogrammas/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/gebiedsprogrammas/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGebiedsprogrammaEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammaPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<GebiedsprogrammaUUID> | GebiedsprogrammaUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGebiedsprogrammaPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammaGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseGebiedsprogrammaExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseGebiedsprogrammaExtended>
              | PagedResponseGebiedsprogrammaExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGebiedsprogrammaGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammaViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GebiedsprogrammaFull> | GebiedsprogrammaFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/gebiedsprogrammas/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGebiedsprogrammaViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectGebiedsprogrammasVersionMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GebiedsprogrammaFull> | GebiedsprogrammaFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/gebiedsprogrammas/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectGebiedsprogrammasVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammaGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/objects/gebiedsprogramma/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGebiedsprogrammaGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsGebiedsprogrammaVersionMockHandler = (
    overrideResponse?:
        | GebiedsprogrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<GebiedsprogrammaFull> | GebiedsprogrammaFull)
) => {
    return http.get(
        '*/revisions/:moduleId/gebiedsprogramma/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsGebiedsprogrammaVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getMaatregelListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseMaatregelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseMaatregelBasic>
              | PagedResponseMaatregelBasic)
) => {
    return http.get('*/maatregelen/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseMaatregelBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseMaatregelBasic>
              | PagedResponseMaatregelBasic)
) => {
    return http.get('*/maatregelen/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelViewObjectVersionMockHandler = (
    overrideResponse?:
        | MaatregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<MaatregelFull> | MaatregelFull)
) => {
    return http.get('*/maatregelen/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelViewObjectLatestMockHandler = (
    overrideResponse?:
        | MaatregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<MaatregelFull> | MaatregelFull)
) => {
    return http.get('*/maatregelen/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/maatregelen/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/maatregelen/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/maatregel/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getMaatregelEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | MaatregelUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<MaatregelUUID> | MaatregelUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getMaatregelPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getMaatregelGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseMaatregelExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseMaatregelExtended>
              | PagedResponseMaatregelExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getMaatregelGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getMaatregelViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | MaatregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<MaatregelFull> | MaatregelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getMaatregelViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectMaatregelVersionMockHandler = (
    overrideResponse?:
        | MaatregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<MaatregelFull> | MaatregelFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectMaatregelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getMaatregelGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/objects/maatregel/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getMaatregelGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsMaatregelVersionMockHandler = (
    overrideResponse?:
        | MaatregelFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<MaatregelFull> | MaatregelFull)
) => {
    return http.get(
        '*/revisions/:moduleId/maatregel/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsMaatregelVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getNationaalBelangAtemporalCreateObjectMockHandler = (
    overrideResponse?:
        | NationaalBelangUUID
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<NationaalBelangUUID> | NationaalBelangUUID)
) => {
    return http.post('*/nationaal-belang', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangAtemporalCreateObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangAtemporalEditObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/nationaal-belang/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangAtemporalEditObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangAtemporalDeleteObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete('*/nationaal-belang/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangAtemporalDeleteObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseNationaalBelangBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseNationaalBelangBasic>
              | PagedResponseNationaalBelangBasic)
) => {
    return http.get('*/nationaal-belang/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangViewObjectLatestMockHandler = (
    overrideResponse?:
        | NationaalBelangFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<NationaalBelangFull> | NationaalBelangFull)
) => {
    return http.get('*/nationaal-belang/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/nationaal-belang/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/nationaal-belang/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/nationaal-belang/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getNationaalBelangEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseOnderverdelingBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseOnderverdelingBasic>
              | PagedResponseOnderverdelingBasic)
) => {
    return http.get('*/onderverdelingen/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getOnderverdelingListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseOnderverdelingBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseOnderverdelingBasic>
              | PagedResponseOnderverdelingBasic)
) => {
    return http.get('*/onderverdelingen/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getOnderverdelingListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingViewObjectVersionMockHandler = (
    overrideResponse?:
        | OnderverdelingFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<OnderverdelingFull> | OnderverdelingFull)
) => {
    return http.get('*/onderverdelingen/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getOnderverdelingViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingViewObjectLatestMockHandler = (
    overrideResponse?:
        | OnderverdelingFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<OnderverdelingFull> | OnderverdelingFull)
) => {
    return http.get('*/onderverdelingen/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getOnderverdelingViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/onderverdeling/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getOnderverdelingEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getOnderverdelingGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseOnderverdelingExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseOnderverdelingExtended>
              | PagedResponseOnderverdelingExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/onderverdeling/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getOnderverdelingGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getOnderverdelingViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | OnderverdelingFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<OnderverdelingFull> | OnderverdelingFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/onderverdeling/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getOnderverdelingViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectOnderverdelingVersionMockHandler = (
    overrideResponse?:
        | OnderverdelingFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<OnderverdelingFull> | OnderverdelingFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/onderverdeling/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectOnderverdelingVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getOnderverdelingGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/onderverdeling/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getOnderverdelingGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsOnderverdelingVersionMockHandler = (
    overrideResponse?:
        | OnderverdelingFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<OnderverdelingFull> | OnderverdelingFull)
) => {
    return http.get(
        '*/revisions/:moduleId/onderverdeling/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsOnderverdelingVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getProgrammaAlgemeenListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseProgrammaAlgemeenBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseProgrammaAlgemeenBasic>
              | PagedResponseProgrammaAlgemeenBasic)
) => {
    return http.get('*/programmas-algemeen/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getProgrammaAlgemeenListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseProgrammaAlgemeenBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseProgrammaAlgemeenBasic>
              | PagedResponseProgrammaAlgemeenBasic)
) => {
    return http.get('*/programmas-algemeen/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getProgrammaAlgemeenListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenViewObjectVersionMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ProgrammaAlgemeenFull> | ProgrammaAlgemeenFull)
) => {
    return http.get('*/programmas-algemeen/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getProgrammaAlgemeenViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenViewObjectLatestMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ProgrammaAlgemeenFull> | ProgrammaAlgemeenFull)
) => {
    return http.get('*/programmas-algemeen/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getProgrammaAlgemeenViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/programma-algemeen/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getProgrammaAlgemeenEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<ProgrammaAlgemeenUUID> | ProgrammaAlgemeenUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/programma-algemeen/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getProgrammaAlgemeenPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getProgrammaAlgemeenGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseProgrammaAlgemeenExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseProgrammaAlgemeenExtended>
              | PagedResponseProgrammaAlgemeenExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/programma-algemeen/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getProgrammaAlgemeenGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getProgrammaAlgemeenViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ProgrammaAlgemeenFull> | ProgrammaAlgemeenFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/programma-algemeen/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getProgrammaAlgemeenViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectProgrammaAlgemeenVersionMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ProgrammaAlgemeenFull> | ProgrammaAlgemeenFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/programma-algemeen/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectProgrammaAlgemeenVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getProgrammaAlgemeenGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/programma-algemeen/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getProgrammaAlgemeenGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsProgrammaAlgemeenVersionMockHandler = (
    overrideResponse?:
        | ProgrammaAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ProgrammaAlgemeenFull> | ProgrammaAlgemeenFull)
) => {
    return http.get(
        '*/revisions/:moduleId/programma-algemeen/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsProgrammaAlgemeenVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVerplichtProgrammaAtemporalCreateObjectMockHandler = (
    overrideResponse?:
        | VerplichtProgrammaUUID
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<VerplichtProgrammaUUID> | VerplichtProgrammaUUID)
) => {
    return http.post('*/verplicht-programma', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaAtemporalCreateObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaAtemporalEditObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/verplicht-programma/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaAtemporalEditObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaAtemporalDeleteObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete('*/verplicht-programma/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaAtemporalDeleteObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseVerplichtProgrammaBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseVerplichtProgrammaBasic>
              | PagedResponseVerplichtProgrammaBasic)
) => {
    return http.get('*/verplicht-programma/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaViewObjectLatestMockHandler = (
    overrideResponse?:
        | VerplichtProgrammaFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VerplichtProgrammaFull> | VerplichtProgrammaFull)
) => {
    return http.get('*/verplicht-programma/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get(
        '*/verplicht-programma/relations/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVerplichtProgrammaGetRelationsListResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVerplichtProgrammaPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put(
        '*/verplicht-programma/relations/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVerplichtProgrammaPostRelationsOverwriteResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVerplichtProgrammaEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/verplicht-programma/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVerplichtProgrammaEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseVisieAlgemeenBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseVisieAlgemeenBasic>
              | PagedResponseVisieAlgemeenBasic)
) => {
    return http.get('*/visies-algemeen/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVisieAlgemeenListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseVisieAlgemeenBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseVisieAlgemeenBasic>
              | PagedResponseVisieAlgemeenBasic)
) => {
    return http.get('*/visies-algemeen/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVisieAlgemeenListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenViewObjectVersionMockHandler = (
    overrideResponse?:
        | VisieAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VisieAlgemeenFull> | VisieAlgemeenFull)
) => {
    return http.get('*/visies-algemeen/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVisieAlgemeenViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenViewObjectLatestMockHandler = (
    overrideResponse?:
        | VisieAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VisieAlgemeenFull> | VisieAlgemeenFull)
) => {
    return http.get('*/visies-algemeen/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVisieAlgemeenViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/visie-algemeen/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getVisieAlgemeenEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | VisieAlgemeenUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<VisieAlgemeenUUID> | VisieAlgemeenUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVisieAlgemeenPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVisieAlgemeenGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseVisieAlgemeenExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseVisieAlgemeenExtended>
              | PagedResponseVisieAlgemeenExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVisieAlgemeenGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVisieAlgemeenViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | VisieAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VisieAlgemeenFull> | VisieAlgemeenFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/visie-algemeen/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVisieAlgemeenViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectVisieAlgemeenVersionMockHandler = (
    overrideResponse?:
        | VisieAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VisieAlgemeenFull> | VisieAlgemeenFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/visie-algemeen/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectVisieAlgemeenVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getVisieAlgemeenGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/visie-algemeen/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getVisieAlgemeenGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsVisieAlgemeenVersionMockHandler = (
    overrideResponse?:
        | VisieAlgemeenFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<VisieAlgemeenFull> | VisieAlgemeenFull)
) => {
    return http.get(
        '*/revisions/:moduleId/visie-algemeen/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsVisieAlgemeenVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getWerkingsgebiedListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseWerkingsgebiedBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseWerkingsgebiedBasic>
              | PagedResponseWerkingsgebiedBasic)
) => {
    return http.get('*/werkingsgebieden/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWerkingsgebiedListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedListValidLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseWerkingsgebiedBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseWerkingsgebiedBasic>
              | PagedResponseWerkingsgebiedBasic)
) => {
    return http.get('*/werkingsgebieden/valid/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWerkingsgebiedListValidLineageTreeResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedViewObjectVersionMockHandler = (
    overrideResponse?:
        | WerkingsgebiedFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WerkingsgebiedFull> | WerkingsgebiedFull)
) => {
    return http.get('*/werkingsgebieden/version/:objectUuid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWerkingsgebiedViewObjectVersionResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedViewObjectLatestMockHandler = (
    overrideResponse?:
        | WerkingsgebiedFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WerkingsgebiedFull> | WerkingsgebiedFull)
) => {
    return http.get('*/werkingsgebieden/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWerkingsgebiedViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/werkingsgebied/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWerkingsgebiedEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedPostModulePatchObjectMockHandler = (
    overrideResponse?:
        | WerkingsgebiedUUID
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0]
          ) => Promise<WerkingsgebiedUUID> | WerkingsgebiedUUID)
) => {
    return http.patch(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getWerkingsgebiedPostModulePatchObjectResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getWerkingsgebiedGetModuleListLineageTreeMockHandler = (
    overrideResponse?:
        | PagedResponseWerkingsgebiedExtended
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseWerkingsgebiedExtended>
              | PagedResponseWerkingsgebiedExtended)
) => {
    return http.get(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getWerkingsgebiedGetModuleListLineageTreeResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getWerkingsgebiedViewModuleObjectLatestMockHandler = (
    overrideResponse?:
        | WerkingsgebiedFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WerkingsgebiedFull> | WerkingsgebiedFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/werkingsgebied/latest/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getWerkingsgebiedViewModuleObjectLatestResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetModulesObjectWerkingsgebiedVersionMockHandler = (
    overrideResponse?:
        | WerkingsgebiedFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WerkingsgebiedFull> | WerkingsgebiedFull)
) => {
    return http.get(
        '*/modules/:moduleId/object/werkingsgebied/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetModulesObjectWerkingsgebiedVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getWerkingsgebiedGetListActiveModuleObjectsMockHandler = (
    overrideResponse?:
        | ActiveModuleObjectsResponse[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<ActiveModuleObjectsResponse[]>
              | ActiveModuleObjectsResponse[])
) => {
    return http.get(
        '*/modules/object/werkingsgebied/active/:lineageId',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getWerkingsgebiedGetListActiveModuleObjectsResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGetRevisionsWerkingsgebiedVersionMockHandler = (
    overrideResponse?:
        | WerkingsgebiedFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WerkingsgebiedFull> | WerkingsgebiedFull)
) => {
    return http.get(
        '*/revisions/:moduleId/werkingsgebied/version/:objectUuid',
        async info => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse !== undefined
                        ? typeof overrideResponse === 'function'
                            ? await overrideResponse(info)
                            : overrideResponse
                        : getGetRevisionsWerkingsgebiedVersionResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getWettelijkeTaakAtemporalCreateObjectMockHandler = (
    overrideResponse?:
        | WettelijkeTaakUUID
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<WettelijkeTaakUUID> | WettelijkeTaakUUID)
) => {
    return http.post('*/wettelijke-taak', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakAtemporalCreateObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakAtemporalEditObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/wettelijke-taak/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakAtemporalEditObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakAtemporalDeleteObjectMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.delete('*/wettelijke-taak/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakAtemporalDeleteObjectResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakListValidLineagesMockHandler = (
    overrideResponse?:
        | PagedResponseWettelijkeTaakBasic
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) =>
              | Promise<PagedResponseWettelijkeTaakBasic>
              | PagedResponseWettelijkeTaakBasic)
) => {
    return http.get('*/wettelijke-taak/valid', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakListValidLineagesResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakViewObjectLatestMockHandler = (
    overrideResponse?:
        | WettelijkeTaakFull
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<WettelijkeTaakFull> | WettelijkeTaakFull)
) => {
    return http.get('*/wettelijke-taak/latest/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakViewObjectLatestResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakGetRelationsListMockHandler = (
    overrideResponse?:
        | ReadRelation[]
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0]
          ) => Promise<ReadRelation[]> | ReadRelation[])
) => {
    return http.get('*/wettelijke-taak/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakGetRelationsListResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakPostRelationsOverwriteMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.put>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.put('*/wettelijke-taak/relations/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakPostRelationsOverwriteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakEditObjectStaticMockHandler = (
    overrideResponse?:
        | ResponseOK
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0]
          ) => Promise<ResponseOK> | ResponseOK)
) => {
    return http.post('*/wettelijke-taak/static/:lineageId', async info => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === 'function'
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getWettelijkeTaakEditObjectStaticResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getHealthCheckMockHandler = () => {
    return http.get('*/health', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}
export const getOmgevingsbeleidAPIMock = () => [
    getAreasGetListObjectsByAreasMockHandler(),
    getAreasGetListObjectsByGeometryMockHandler(),
    getAuthenticationPostAuthLoginAccessTokenMockHandler(),
    getAuthenticationPostAuthResetPasswordMockHandler(),
    getGraphGetFullGraphMockHandler(),
    getGraphGetObjectGraphMockHandler(),
    getModulesPostCreateModuleMockHandler(),
    getModulesGetListModulesMockHandler(),
    getModulesViewModuleOverviewMockHandler(),
    getModulesPostEditModuleMockHandler(),
    getModulesPostActivateModuleMockHandler(),
    getModulesPostCompleteModuleMockHandler(),
    getModulesPostCloseModuleMockHandler(),
    getModulesViewModuleListStatusesMockHandler(),
    getModulesPostModulePatchStatusMockHandler(),
    getModulesPostModuleAddNewObjectMockHandler(),
    getModulesPostModuleAddExistingObjectMockHandler(),
    getModulesGetModuleGetObjectContextMockHandler(),
    getModulesPostModuleEditObjectContextMockHandler(),
    getModulesPostModuleRemoveObjectMockHandler(),
    getModulesGetModuleSnapshotMockHandler(),
    getModulesGetListModuleObjectsMockHandler(),
    getObjectsViewObjectCountsMockHandler(),
    getPublicModulesGetPublicListModulesMockHandler(),
    getPublicModulesGetPublicModuleOverviewMockHandler(),
    getPublicationAojPostCreateAojMockHandler(),
    getPublicationAojGetListAojMockHandler(),
    getPublicationActPackagesPostCreateActPackageMockHandler(),
    getPublicationActPackagesGetListActPackagesMockHandler(),
    getPublicationActPackagesGetDownloadActPackageMockHandler(),
    getPublicationActReportsPostUploadActPackageReportMockHandler(),
    getPublicationActReportsGetListActPackageReportsMockHandler(),
    getPublicationActReportsGetDetailActPackageReportMockHandler(),
    getPublicationActReportsGetDownloadActPackageReportMockHandler(),
    getPublicationActsPostCreateActMockHandler(),
    getPublicationActsGetListActsMockHandler(),
    getPublicationActsPostCloseActMockHandler(),
    getPublicationActsPostEditActMockHandler(),
    getPublicationActsGetDetailActMockHandler(),
    getPublicationAnnouncementPackagesPostCreateAnnouncementPackageMockHandler(),
    getPublicationAnnouncementPackagesGetListAnnouncementPackagesMockHandler(),
    getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageMockHandler(),
    getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportMockHandler(),
    getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsMockHandler(),
    getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportMockHandler(),
    getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportMockHandler(),
    getPublicationAnnouncementsPostCreateAnnouncementMockHandler(),
    getPublicationAnnouncementsGetListAnnouncementsMockHandler(),
    getPublicationAnnouncementsPostEditAnnouncementMockHandler(),
    getPublicationAnnouncementsGetDetailAnnouncementMockHandler(),
    getPublicationEnvironmentsPostCreateEnvironmentMockHandler(),
    getPublicationEnvironmentsGetListEnvironmentsMockHandler(),
    getPublicationEnvironmentsPostEditEnvironmentMockHandler(),
    getPublicationEnvironmentsGetDetailEnvironmentMockHandler(),
    getPublicationTemplatesPostCreateTemplateMockHandler(),
    getPublicationTemplatesGetListTemplatesMockHandler(),
    getPublicationTemplatesPostEditTemplateMockHandler(),
    getPublicationTemplatesGetDetailTemplateMockHandler(),
    getPublicationValueListsGetAreaDesignationTypesMockHandler(),
    getPublicationValueListsGetAreaDesignationGroupsMockHandler(),
    getPublicationVersionsPostCreateVersionMockHandler(),
    getPublicationVersionsGetListVersionsMockHandler(),
    getPublicationVersionsPostEditVersionMockHandler(),
    getPublicationVersionsGetDetailVersionMockHandler(),
    getPublicationVersionsPostDeleteVersionMockHandler(),
    getPublicationVersionsPostUploadAttachmentMockHandler(),
    getPublicationVersionsPostDeleteAttachmentMockHandler(),
    getPublicationVersionsPostCreatePdfMockHandler(),
    getPublicationsGetListPublicationsMockHandler(),
    getPublicationsPostCreatePublicationMockHandler(),
    getPublicationsGetDetailPublicationMockHandler(),
    getPublicationsPostEditPublicationMockHandler(),
    getSearchGetMssqlSearchMockHandler(),
    getSearchGetMssqlValidSearchMockHandler(),
    getSearchDoListAllLatestMockHandler(),
    getSourceWerkingsgebiedenGetListWerkingsgebiedenMockHandler(),
    getStorageFileGetFilesListMockHandler(),
    getStorageFilePostFilesUploadMockHandler(),
    getStorageFileGetFilesDetailMockHandler(),
    getUserGetListUsersMockHandler(),
    getUserPostCreateUserMockHandler(),
    getUserGetSearchUsersMockHandler(),
    getUserViewGetUserMockHandler(),
    getUserPostEditUserMockHandler(),
    getUserPostResetUserPasswordMockHandler(),
    getAmbitieListValidLineagesMockHandler(),
    getAmbitieListValidLineageTreeMockHandler(),
    getAmbitieViewObjectVersionMockHandler(),
    getAmbitieViewObjectLatestMockHandler(),
    getAmbitieGetRelationsListMockHandler(),
    getAmbitiePostRelationsOverwriteMockHandler(),
    getAmbitieEditObjectStaticMockHandler(),
    getAmbitiePostModulePatchObjectMockHandler(),
    getAmbitieGetModuleListLineageTreeMockHandler(),
    getAmbitieViewModuleObjectLatestMockHandler(),
    getGetModulesObjectAmbitieVersionMockHandler(),
    getAmbitieGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsAmbitieVersionMockHandler(),
    getBeleidsdoelListValidLineagesMockHandler(),
    getBeleidsdoelListValidLineageTreeMockHandler(),
    getBeleidsdoelViewObjectVersionMockHandler(),
    getBeleidsdoelViewObjectLatestMockHandler(),
    getBeleidsdoelGetRelationsListMockHandler(),
    getBeleidsdoelPostRelationsOverwriteMockHandler(),
    getBeleidsdoelEditObjectStaticMockHandler(),
    getBeleidsdoelPostModulePatchObjectMockHandler(),
    getBeleidsdoelGetModuleListLineageTreeMockHandler(),
    getBeleidsdoelViewModuleObjectLatestMockHandler(),
    getGetModulesObjectBeleidsdoelVersionMockHandler(),
    getBeleidsdoelGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsBeleidsdoelVersionMockHandler(),
    getBeleidskeuzeListValidLineagesMockHandler(),
    getBeleidskeuzeListValidLineageTreeMockHandler(),
    getBeleidskeuzeViewObjectVersionMockHandler(),
    getBeleidskeuzeViewObjectLatestMockHandler(),
    getBeleidskeuzeGetRelationsListMockHandler(),
    getBeleidskeuzePostRelationsOverwriteMockHandler(),
    getBeleidskeuzeEditObjectStaticMockHandler(),
    getBeleidskeuzeGetAcknowledgedRelationListMockHandler(),
    getBeleidskeuzeGetAcknowledgedRelationRequestMockHandler(),
    getBeleidskeuzePostAcknowledgedRelationEditMockHandler(),
    getBeleidskeuzePostModulePatchObjectMockHandler(),
    getBeleidskeuzeGetModuleListLineageTreeMockHandler(),
    getBeleidskeuzeViewModuleObjectLatestMockHandler(),
    getGetModulesObjectBeleidskeuzeVersionMockHandler(),
    getBeleidskeuzeGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsBeleidskeuzeVersionMockHandler(),
    getBeleidsregelListValidLineagesMockHandler(),
    getBeleidsregelListValidLineageTreeMockHandler(),
    getBeleidsregelViewObjectVersionMockHandler(),
    getBeleidsregelViewObjectLatestMockHandler(),
    getBeleidsregelGetRelationsListMockHandler(),
    getBeleidsregelPostRelationsOverwriteMockHandler(),
    getBeleidsregelEditObjectStaticMockHandler(),
    getBeleidsregelPostModulePatchObjectMockHandler(),
    getBeleidsregelGetModuleListLineageTreeMockHandler(),
    getBeleidsregelViewModuleObjectLatestMockHandler(),
    getGetModulesObjectBeleidsregelVersionMockHandler(),
    getBeleidsregelGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsBeleidsregelVersionMockHandler(),
    getDocumentListValidLineagesMockHandler(),
    getDocumentListValidLineageTreeMockHandler(),
    getDocumentViewObjectVersionMockHandler(),
    getDocumentViewObjectLatestMockHandler(),
    getDocumentEditObjectStaticMockHandler(),
    getDocumentPostModulePatchObjectMockHandler(),
    getDocumentGetModuleListLineageTreeMockHandler(),
    getDocumentViewModuleObjectLatestMockHandler(),
    getGetModulesObjectDocumentVersionMockHandler(),
    getDocumentGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsDocumentVersionMockHandler(),
    getGebiedsprogrammaListValidLineagesMockHandler(),
    getGebiedsprogrammaListValidLineageTreeMockHandler(),
    getGebiedsprogrammaViewObjectVersionMockHandler(),
    getGebiedsprogrammaViewObjectLatestMockHandler(),
    getGebiedsprogrammaGetRelationsListMockHandler(),
    getGebiedsprogrammaPostRelationsOverwriteMockHandler(),
    getGebiedsprogrammaEditObjectStaticMockHandler(),
    getGebiedsprogrammaPostModulePatchObjectMockHandler(),
    getGebiedsprogrammaGetModuleListLineageTreeMockHandler(),
    getGebiedsprogrammaViewModuleObjectLatestMockHandler(),
    getGetModulesObjectGebiedsprogrammasVersionMockHandler(),
    getGebiedsprogrammaGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsGebiedsprogrammaVersionMockHandler(),
    getMaatregelListValidLineagesMockHandler(),
    getMaatregelListValidLineageTreeMockHandler(),
    getMaatregelViewObjectVersionMockHandler(),
    getMaatregelViewObjectLatestMockHandler(),
    getMaatregelGetRelationsListMockHandler(),
    getMaatregelPostRelationsOverwriteMockHandler(),
    getMaatregelEditObjectStaticMockHandler(),
    getMaatregelPostModulePatchObjectMockHandler(),
    getMaatregelGetModuleListLineageTreeMockHandler(),
    getMaatregelViewModuleObjectLatestMockHandler(),
    getGetModulesObjectMaatregelVersionMockHandler(),
    getMaatregelGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsMaatregelVersionMockHandler(),
    getNationaalBelangAtemporalCreateObjectMockHandler(),
    getNationaalBelangAtemporalEditObjectMockHandler(),
    getNationaalBelangAtemporalDeleteObjectMockHandler(),
    getNationaalBelangListValidLineagesMockHandler(),
    getNationaalBelangViewObjectLatestMockHandler(),
    getNationaalBelangGetRelationsListMockHandler(),
    getNationaalBelangPostRelationsOverwriteMockHandler(),
    getNationaalBelangEditObjectStaticMockHandler(),
    getOnderverdelingListValidLineagesMockHandler(),
    getOnderverdelingListValidLineageTreeMockHandler(),
    getOnderverdelingViewObjectVersionMockHandler(),
    getOnderverdelingViewObjectLatestMockHandler(),
    getOnderverdelingEditObjectStaticMockHandler(),
    getOnderverdelingGetModuleListLineageTreeMockHandler(),
    getOnderverdelingViewModuleObjectLatestMockHandler(),
    getGetModulesObjectOnderverdelingVersionMockHandler(),
    getOnderverdelingGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsOnderverdelingVersionMockHandler(),
    getProgrammaAlgemeenListValidLineagesMockHandler(),
    getProgrammaAlgemeenListValidLineageTreeMockHandler(),
    getProgrammaAlgemeenViewObjectVersionMockHandler(),
    getProgrammaAlgemeenViewObjectLatestMockHandler(),
    getProgrammaAlgemeenEditObjectStaticMockHandler(),
    getProgrammaAlgemeenPostModulePatchObjectMockHandler(),
    getProgrammaAlgemeenGetModuleListLineageTreeMockHandler(),
    getProgrammaAlgemeenViewModuleObjectLatestMockHandler(),
    getGetModulesObjectProgrammaAlgemeenVersionMockHandler(),
    getProgrammaAlgemeenGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsProgrammaAlgemeenVersionMockHandler(),
    getVerplichtProgrammaAtemporalCreateObjectMockHandler(),
    getVerplichtProgrammaAtemporalEditObjectMockHandler(),
    getVerplichtProgrammaAtemporalDeleteObjectMockHandler(),
    getVerplichtProgrammaListValidLineagesMockHandler(),
    getVerplichtProgrammaViewObjectLatestMockHandler(),
    getVerplichtProgrammaGetRelationsListMockHandler(),
    getVerplichtProgrammaPostRelationsOverwriteMockHandler(),
    getVerplichtProgrammaEditObjectStaticMockHandler(),
    getVisieAlgemeenListValidLineagesMockHandler(),
    getVisieAlgemeenListValidLineageTreeMockHandler(),
    getVisieAlgemeenViewObjectVersionMockHandler(),
    getVisieAlgemeenViewObjectLatestMockHandler(),
    getVisieAlgemeenEditObjectStaticMockHandler(),
    getVisieAlgemeenPostModulePatchObjectMockHandler(),
    getVisieAlgemeenGetModuleListLineageTreeMockHandler(),
    getVisieAlgemeenViewModuleObjectLatestMockHandler(),
    getGetModulesObjectVisieAlgemeenVersionMockHandler(),
    getVisieAlgemeenGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsVisieAlgemeenVersionMockHandler(),
    getWerkingsgebiedListValidLineagesMockHandler(),
    getWerkingsgebiedListValidLineageTreeMockHandler(),
    getWerkingsgebiedViewObjectVersionMockHandler(),
    getWerkingsgebiedViewObjectLatestMockHandler(),
    getWerkingsgebiedEditObjectStaticMockHandler(),
    getWerkingsgebiedPostModulePatchObjectMockHandler(),
    getWerkingsgebiedGetModuleListLineageTreeMockHandler(),
    getWerkingsgebiedViewModuleObjectLatestMockHandler(),
    getGetModulesObjectWerkingsgebiedVersionMockHandler(),
    getWerkingsgebiedGetListActiveModuleObjectsMockHandler(),
    getGetRevisionsWerkingsgebiedVersionMockHandler(),
    getWettelijkeTaakAtemporalCreateObjectMockHandler(),
    getWettelijkeTaakAtemporalEditObjectMockHandler(),
    getWettelijkeTaakAtemporalDeleteObjectMockHandler(),
    getWettelijkeTaakListValidLineagesMockHandler(),
    getWettelijkeTaakViewObjectLatestMockHandler(),
    getWettelijkeTaakGetRelationsListMockHandler(),
    getWettelijkeTaakPostRelationsOverwriteMockHandler(),
    getWettelijkeTaakEditObjectStaticMockHandler(),
    getHealthCheckMockHandler(),
]
