/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 3.0-alpha
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type {
    AOJCreatedResponse,
    AcknowledgedRelation,
    ActCreatedResponse,
    ActiveModuleObjectWrapper,
    AmbitieFull,
    AmbitieUUID,
    AnnouncementCreatedResponse,
    AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationGroupsAreaDesignationValueList,
    AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationTypesAreaDesignationValueList,
    AppExtensionsPublicationsEndpointsPublicationsActReportsUploadActPackageReportUploadPackageReportResponse,
    AppExtensionsPublicationsEndpointsPublicationsAnnouncementReportsUploadAnnouncementPackageReportUploadPackageReportResponse,
    AuthToken,
    BeleidsdoelFull,
    BeleidsdoelUUID,
    BeleidskeuzeFull,
    BeleidskeuzeUUID,
    BeleidsregelFull,
    BeleidsregelUUID,
    DocumentFull,
    DocumentUUID,
    EnvironmentCreatedResponse,
    GebiedsprogrammaFull,
    GebiedsprogrammaUUID,
    GraphResponse,
    HealthCheckHealthGet200,
    MaatregelFull,
    MaatregelUUID,
    ModuleCreatedResponse,
    ModuleObjectContext,
    ModuleOverview,
    ModuleSnapshot,
    ModuleStatus,
    NationaalBelangFull,
    NationaalBelangUUID,
    NewObjectStaticResponse,
    ObjectCount,
    PagedResponseAmbitieBasic,
    PagedResponseAmbitieExtended,
    PagedResponseBeleidsdoelBasic,
    PagedResponseBeleidsdoelExtended,
    PagedResponseBeleidskeuzeBasic,
    PagedResponseBeleidskeuzeExtended,
    PagedResponseBeleidsregelBasic,
    PagedResponseBeleidsregelExtended,
    PagedResponseDocumentBasic,
    PagedResponseDocumentExtended,
    PagedResponseGebiedsprogrammaBasic,
    PagedResponseGebiedsprogrammaExtended,
    PagedResponseGenericObjectShort,
    PagedResponseGeoSearchResult,
    PagedResponseMaatregelBasic,
    PagedResponseMaatregelExtended,
    PagedResponseModule,
    PagedResponseModuleObjectShortStatus,
    PagedResponseNationaalBelangBasic,
    PagedResponseProgrammaAlgemeenBasic,
    PagedResponseProgrammaAlgemeenExtended,
    PagedResponsePublicModuleShort,
    PagedResponsePublication,
    PagedResponsePublicationAOJ,
    PagedResponsePublicationActPackageReportShort,
    PagedResponsePublicationActShort,
    PagedResponsePublicationAnnouncementPackageReportShort,
    PagedResponsePublicationAnnouncementShort,
    PagedResponsePublicationEnvironment,
    PagedResponsePublicationPackage,
    PagedResponsePublicationTemplate,
    PagedResponsePublicationVersionShort,
    PagedResponseSearchObject,
    PagedResponseStorageFileBasic,
    PagedResponseUser,
    PagedResponseValidSearchObject,
    PagedResponseVerplichtProgrammaBasic,
    PagedResponseVisieAlgemeenBasic,
    PagedResponseVisieAlgemeenExtended,
    PagedResponseWerkingsgebied,
    PagedResponseWerkingsgebiedBasic,
    PagedResponseWerkingsgebiedExtended,
    PagedResponseWettelijkeTaakBasic,
    ProgrammaAlgemeenFull,
    ProgrammaAlgemeenUUID,
    PublicModuleOverview,
    Publication,
    PublicationAct,
    PublicationActPackageReport,
    PublicationActPackagesActPackageUuidDownloadGet200,
    PublicationActReportsActReportUuidDownloadGet200,
    PublicationAnnouncement,
    PublicationAnnouncementPackageCreatedResponse,
    PublicationAnnouncementPackageReport,
    PublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGet200,
    PublicationAnnouncementReportsAnnouncementReportUuidDownloadGet200,
    PublicationCreatedResponse,
    PublicationEnvironment,
    PublicationPackageCreatedResponse,
    PublicationTemplate,
    PublicationVersion,
    PublicationVersionCreatedResponse,
    PublicationVersionEditResponse,
    PublicationVersionsVersionUuidPdfExportPost200,
    ReadRelation,
    ResetPasswordResponse,
    ResponseOK,
    TemplateCreatedResponse,
    UploadAttachmentResponse,
    UploadFileResponse,
    User,
    UserCreateResponse,
    VerplichtProgrammaFull,
    VerplichtProgrammaUUID,
    VisieAlgemeenFull,
    VisieAlgemeenUUID,
    WerkingsgebiedFull,
    WerkingsgebiedUUID,
    WettelijkeTaakFull,
    WettelijkeTaakUUID,
} from './fetchers.schemas'
import {
    GraphEdgeType,
    PublicationVersionStatus,
    ReportStatusType,
} from './fetchers.schemas'

export const getAmbitiesValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitiesValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitiesVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitiesLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitiesRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getAmbitiesRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getAmbitieStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectAmbitieLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): AmbitieUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectAmbitieActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdAmbitieVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidsdoelenRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidsdoelStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectBeleidsdoelLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsdoelLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): BeleidsdoelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): BeleidsdoelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Ambities: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): BeleidsdoelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Ambities: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectBeleidsdoelActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzesValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzesValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzesVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzesLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzesRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidskeuzesRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeAcknowledgedRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): AcknowledgedRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Deleted_At: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Denied: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Requested_By_Code: faker.word.sample(),
        Side_A: {
            Acknowledged: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Acknowledged_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Explanation: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        },
        Side_B: {
            Acknowledged: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Acknowledged_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Explanation: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        },
        Version: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    }))

export const getBeleidskeuzeAcknowledgedRelationsLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostResponseMock =
    (overrideResponse: any = {}): ResponseOK => ({
        message: faker.word.sample(),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectBeleidskeuzeLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidskeuzeLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): BeleidskeuzeUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): BeleidskeuzeFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidsdoelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidsregels: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Explanation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        NationaleBelangen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Provincial_Interest: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Werkingsgebied_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        WettelijkeTaken: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): BeleidskeuzeFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidsdoelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidsregels: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Explanation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        NationaleBelangen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Provincial_Interest: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Werkingsgebied_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        WettelijkeTaken: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        ...overrideResponse,
    })

export const getModulesObjectsBeleidskeuzeActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): BeleidskeuzeFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidsdoelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidsregels: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Explanation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        NationaleBelangen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    Weblink: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Provincial_Interest: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Werkingsgebied_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        WettelijkeTaken: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Code: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Created_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Modified_Date: faker.helpers.arrayElement([
                        `${faker.date.past().toISOString().split('.')[0]}Z`,
                        undefined,
                    ]),
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        ...overrideResponse,
    })

export const getBeleidsregelsValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelsValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelsVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelsLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelsRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidsregelsRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidsregelStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectBeleidsregelLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsregelLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): BeleidsregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsregelLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): BeleidsregelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): BeleidsregelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectsBeleidsregelActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidsregelVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): BeleidsregelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })

export const getDocumentenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseDocumentBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getDocumentenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseDocumentBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getDocumentenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        {
            Checksum: faker.word.sample(),
            Content_Type: faker.word.sample(),
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Filename: faker.word.sample(),
            Size: faker.number.int({ min: undefined, max: undefined }),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        {
            Checksum: faker.word.sample(),
            Content_Type: faker.word.sample(),
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Filename: faker.word.sample(),
            Size: faker.number.int({ min: undefined, max: undefined }),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getDocumentStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectDocumentLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseDocumentExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectDocumentLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): DocumentUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectDocumentLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        {
            Checksum: faker.word.sample(),
            Content_Type: faker.word.sample(),
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Filename: faker.word.sample(),
            Size: faker.number.int({ min: undefined, max: undefined }),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectDocumentVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): DocumentFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        File: faker.helpers.arrayElement([
            {
                Checksum: faker.word.sample(),
                Content_Type: faker.word.sample(),
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Filename: faker.word.sample(),
                Size: faker.number.int({ min: undefined, max: undefined }),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectDocumentActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdDocumentVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): DocumentFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    File: faker.helpers.arrayElement([
        {
            Checksum: faker.word.sample(),
            Content_Type: faker.word.sample(),
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Filename: faker.word.sample(),
            Size: faker.number.int({ min: undefined, max: undefined }),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    File_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Filename: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammasValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammasVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getGebiedsprogrammasRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getGebiedsprogrammasStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdGetResponseMock =
    (overrideResponse: any = {}): PagedResponseGebiedsprogrammaExtended => ({
        limit: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        offset: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        results: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Adjust_On: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.uuid(), null]),
                undefined,
            ]),
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_By: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            End_Validity: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Image: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.word.sample(), null]),
                undefined,
            ]),
            Modified_By: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            ObjectStatics: faker.helpers.arrayElement([
                {
                    Client_1: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    Owner_1: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    Owner_2: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    Portfolio_Holder_1: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    Portfolio_Holder_2: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Start_Validity: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        total: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchResponseMock =
    (overrideResponse: any = {}): GebiedsprogrammaUUID => ({
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): GebiedsprogrammaFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): GebiedsprogrammaFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectsGebiedsprogrammaActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): GebiedsprogrammaFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getMaatregelenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelenRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getMaatregelenRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getMaatregelStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectMaatregelLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): MaatregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): MaatregelFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Beleidsdoelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Beleidskeuzes: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Documents: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
        ]),
        Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Gebiedsprogrammas: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Hierarchy_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Werkingsgebied_Statics: faker.helpers.arrayElement([
            {
                Cached_Title: faker.word.sample(),
                Code: faker.word.sample(),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        ...overrideResponse,
    })

export const getModulesObjectsMaatregelActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdMaatregelVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Documents: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
    ]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getNationaalBelangPostResponseMock = (
    overrideResponse: any = {}
): NationaalBelangUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangLineageIdDeleteResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseNationaalBelangBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getNationaalBelangLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): NationaalBelangFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getNationaalBelangRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getProgrammasAlgemeenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammasAlgemeenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammasAlgemeenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammasAlgemeenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetResponseMock =
    (overrideResponse: any = {}): PagedResponseProgrammaAlgemeenExtended => ({
        limit: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        offset: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        results: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Adjust_On: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.uuid(), null]),
                undefined,
            ]),
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_By: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            End_Validity: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Modified_By: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            ObjectStatics: faker.helpers.arrayElement([
                {
                    Owner_1: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    Owner_2: faker.helpers.arrayElement([
                        {
                            Gebruikersnaam: faker.word.sample(),
                            Rol: faker.word.sample(),
                            UUID: faker.string.uuid(),
                            ...overrideResponse,
                        },
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Start_Validity: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    null,
                ]),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        total: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchResponseMock =
    (overrideResponse: any = {}): ProgrammaAlgemeenUUID => ({
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): ProgrammaAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): ProgrammaAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectProgrammaAlgemeenActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): ProgrammaAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getVerplichtProgrammaPostResponseMock = (
    overrideResponse: any = {}
): VerplichtProgrammaUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaLineageIdDeleteResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseVerplichtProgrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVerplichtProgrammaLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): VerplichtProgrammaFull => ({
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getVerplichtProgrammaRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getVerplichtProgrammaRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVisiesAlgemeenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisiesAlgemeenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisiesAlgemeenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisiesAlgemeenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Next_Version: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Object_UUID: faker.string.uuid(),
            Start_Validity: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ...overrideResponse,
        },
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectVisieAlgemeenLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectVisieAlgemeenLineageIdPatchResponseMock = (
    overrideResponse: any = {}
): VisieAlgemeenUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): VisieAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): VisieAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectVisieAlgemeenActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): VisieAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Next_Version: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Object_UUID: faker.string.uuid(),
                Start_Validity: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getWerkingsgebiedenValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedenValidLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedenVersionObjectUuidGetResponseMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedenLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectWerkingsgebiedLineageIdGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectWerkingsgebiedLineageIdPatchResponseMock =
    (overrideResponse: any = {}): WerkingsgebiedUUID => ({
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetResponseMock =
    (overrideResponse: any = {}): WerkingsgebiedFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): WerkingsgebiedFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectWerkingsgebiedActiveLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetResponseMock =
    (overrideResponse: any = {}): WerkingsgebiedFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Source_Title: faker.word.sample(),
                Source_UUID: faker.string.uuid(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getWettelijkeTaakPostResponseMock = (
    overrideResponse: any = {}
): WettelijkeTaakUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakLineageIdDeleteResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseWettelijkeTaakBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWettelijkeTaakLatestLineageIdGetResponseMock = (
    overrideResponse: any = {}
): WettelijkeTaakFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    VerplichtProgrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakRelationsLineageIdGetResponseMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getWettelijkeTaakRelationsLineageIdPutResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakStaticLineageIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getUsersGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUsersPostResponseMock = (
    overrideResponse: any = {}
): UserCreateResponse => ({
    Email: faker.word.sample(),
    Password: faker.word.sample(),
    Rol: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUsersSearchGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUsersUserUuidGetResponseMock = (
    overrideResponse: any = {}
): User => ({
    Email: faker.word.sample(),
    Gebruikersnaam: faker.word.sample(),
    IsActive: faker.datatype.boolean(),
    Rol: faker.word.sample(),
    Status: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUsersUserUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getUsersUserUuidResetPasswordPostResponseMock = (
    overrideResponse: any = {}
): ResetPasswordResponse => ({
    NewPassword: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getSourceWerkingsgebiedenGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebied => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        End_Validity: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Geometry_Hash: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Start_Validity: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchSourceGeoPostResponseMock = (
    overrideResponse: any = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Gebied: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        Omschrijving: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Type: faker.word.sample(),
        UUID: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchSourceGeometryPostResponseMock = (
    overrideResponse: any = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Gebied: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        Omschrijving: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Type: faker.word.sample(),
        UUID: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchPostResponseMock = (
    overrideResponse: any = {}
): PagedResponseSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchValidPostResponseMock = (
    overrideResponse: any = {}
): PagedResponseValidSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getFullGraphGetResponseMock = (
    overrideResponse: any = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
        ...overrideResponse,
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getObjectGraphGetResponseMock = (
    overrideResponse: any = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
        ...overrideResponse,
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getRevisionsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicModuleShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getRevisionsModuleIdGetResponseMock = (
    overrideResponse: any = {}
): PublicModuleOverview => ({
    Module: {
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        ...overrideResponse,
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Description: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getStorageFilesGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseStorageFileBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Checksum: faker.word.sample(),
        Content_Type: faker.word.sample(),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Size: faker.number.int({ min: undefined, max: undefined }),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getStorageFilesPostResponseMock = (
    overrideResponse: any = {}
): UploadFileResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getModulesGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseModule => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesPostResponseMock = (
    overrideResponse: any = {}
): ModuleCreatedResponse => ({
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdGetResponseMock = (
    overrideResponse: any = {}
): ModuleOverview => ({
    Module: {
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
        ...overrideResponse,
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    StatusHistory: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getModulesModuleIdPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdActivatePostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdCompletePostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdClosePostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdStatusGetResponseMock = (
    overrideResponse: any = {}
): ModuleStatus[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
        ...overrideResponse,
    }))

export const getModulesModuleIdStatusPatchResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdAddNewObjectPostResponseMock = (
    overrideResponse: any = {}
): NewObjectStaticResponse => ({
    Code: faker.word.sample(),
    Object_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_Type: faker.word.sample(),
    ...overrideResponse,
})

export const getModulesModuleIdAddExistingObjectPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectContextObjectTypeLineageIdGetResponseMock =
    (overrideResponse: any = {}): ModuleObjectContext => ({
        Action: faker.word.sample(),
        Code: faker.word.sample(),
        Conclusion: faker.word.sample(),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Explanation: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Original_Adjust_On: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        ...overrideResponse,
    })

export const getModulesModuleIdObjectContextObjectTypeLineageIdPostResponseMock =
    (overrideResponse: any = {}): ResponseOK => ({
        message: faker.word.sample(),
        ...overrideResponse,
    })

export const getModulesModuleIdRemoveObjectTypeLineageIdDeleteResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdSnapshotStatusIdGetResponseMock = (
    overrideResponse: any = {}
): ModuleSnapshot => ({
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({})),
    ...overrideResponse,
})

export const getModulesObjectsLatestGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseModuleObjectShortStatus => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Status: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getObjectsValidCountGetResponseMock = (
    overrideResponse: any = {}
): ObjectCount[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Count: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ...overrideResponse,
    }))

export const getObjectsValidGetResponseMock = (
    overrideResponse: any = {}
): PagedResponseGenericObjectShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAojGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationAOJ => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Administrative_Borders_Date: faker.date
            .past()
            .toISOString()
            .split('T')[0],
        Administrative_Borders_Domain: faker.word.sample(),
        Administrative_Borders_ID: faker.word.sample(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAojPostResponseMock = (
    overrideResponse: any = {}
): AOJCreatedResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getPublicationTemplatesGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationTemplate => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Document_Type: faker.word.sample(),
        Field_Map: faker.helpers.arrayElement([{}, undefined]),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Object_Templates: faker.helpers.arrayElement([{}, undefined]),
        Object_Types: faker.helpers.arrayElement([{}, undefined]),
        Text_Template: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationTemplatesPostResponseMock = (
    overrideResponse: any = {}
): TemplateCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationTemplatesTemplateUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationTemplate => ({
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Description: faker.word.sample(),
    Document_Type: faker.word.sample(),
    Field_Map: faker.helpers.arrayElement([{}, undefined]),
    Is_Active: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Object_Templates: faker.helpers.arrayElement([{}, undefined]),
    Object_Types: faker.helpers.arrayElement([{}, undefined]),
    Text_Template: faker.word.sample(),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationTemplatesTemplateUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationActsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationActShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.string.uuid(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Procedure_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        Work_Country: faker.word.sample(),
        Work_Date: faker.word.sample(),
        Work_Other: faker.word.sample(),
        Work_Province_ID: faker.word.sample(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActsPostResponseMock = (
    overrideResponse: any = {}
): ActCreatedResponse => ({ UUID: faker.string.uuid(), ...overrideResponse })

export const getPublicationActsActUuidClosePostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationActsActUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationAct => ({
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.word.sample(),
    Environment: {
        Authority_ID: faker.word.sample(),
        Can_Publicate: faker.datatype.boolean(),
        Can_Validate: faker.datatype.boolean(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Frbr_Country: faker.word.sample(),
        Frbr_Language: faker.word.sample(),
        Governing_Body_Type: faker.word.sample(),
        Has_State: faker.datatype.boolean(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Province_ID: faker.word.sample(),
        Submitter_ID: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    Is_Active: faker.datatype.boolean(),
    Metadata: {},
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Procedure_Type: faker.word.sample(),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    Work_Country: faker.word.sample(),
    Work_Date: faker.word.sample(),
    Work_Other: faker.word.sample(),
    Work_Province_ID: faker.word.sample(),
    ...overrideResponse,
})

export const getPublicationActsActUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationEnvironmentsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationEnvironment => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Authority_ID: faker.word.sample(),
        Can_Publicate: faker.datatype.boolean(),
        Can_Validate: faker.datatype.boolean(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Frbr_Country: faker.word.sample(),
        Frbr_Language: faker.word.sample(),
        Governing_Body_Type: faker.word.sample(),
        Has_State: faker.datatype.boolean(),
        Is_Active: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Province_ID: faker.word.sample(),
        Submitter_ID: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationEnvironmentsPostResponseMock = (
    overrideResponse: any = {}
): EnvironmentCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationEnvironmentsEnvironmentUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationEnvironment => ({
    Authority_ID: faker.word.sample(),
    Can_Publicate: faker.datatype.boolean(),
    Can_Validate: faker.datatype.boolean(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Description: faker.word.sample(),
    Frbr_Country: faker.word.sample(),
    Frbr_Language: faker.word.sample(),
    Governing_Body_Type: faker.word.sample(),
    Has_State: faker.datatype.boolean(),
    Is_Active: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Province_ID: faker.word.sample(),
    Submitter_ID: faker.word.sample(),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationEnvironmentsEnvironmentUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublication => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPostResponseMock = (
    overrideResponse: any = {}
): PublicationCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidGetResponseMock = (
    overrideResponse: any = {}
): Publication => ({
    Act_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.word.sample(),
    Environment_UUID: faker.helpers.arrayElement([
        faker.string.uuid(),
        undefined,
    ]),
    Is_Locked: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Procedure_Type: faker.word.sample(),
    Template_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Title: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationsPublicationUuidVersionPostResponseMock = (
    overrideResponse: any = {}
): PublicationVersionCreatedResponse => ({
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidVersionsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationVersionShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_Packages: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Delivery_ID: faker.word.sample(),
            Modified_By_UUID: faker.string.uuid(),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Package_Type: faker.word.sample(),
            Report_Status: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        })),
        Announcement_Date: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
        ]),
        Bill_Metadata: {},
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Effective_Date: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_Status: {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ID: faker.number.int({ min: undefined, max: undefined }),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Status: faker.word.sample(),
            ...overrideResponse,
        },
        Publication_UUID: faker.string.uuid(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationVersionsVersionUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationVersion => ({
    Announcement_Date: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
    ]),
    Attachments: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        File_UUID: faker.string.uuid(),
        Filename: faker.word.sample(),
        ID: faker.number.int({ min: undefined, max: undefined }),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Title: faker.word.sample(),
        ...overrideResponse,
    })),
    Bill_Compact: {},
    Bill_Metadata: {},
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Effective_Date: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
    ]),
    Errors: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({})),
        undefined,
    ]),
    Is_Locked: faker.datatype.boolean(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_Status: {
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
        ...overrideResponse,
    },
    Procedural: {},
    Publication: {
        Act_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    Status: faker.helpers.arrayElement(Object.values(PublicationVersionStatus)),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationVersionsVersionUuidPostResponseMock = (
    overrideResponse: any = {}
): PublicationVersionEditResponse => ({
    Errors: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({})),
    Is_Valid: faker.datatype.boolean(),
    ...overrideResponse,
})

export const getPublicationVersionsVersionUuidDeleteResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationVersionsVersionUuidAttachmentsPostResponseMock = (
    overrideResponse: any = {}
): UploadAttachmentResponse => ({
    ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationVersionsVersionUuidPdfExportPostResponseMock =
    (): PublicationVersionsVersionUuidPdfExportPost200 => ({})

export const getPublicationVersionsVersionUuidPackagesPostResponseMock = (
    overrideResponse: any = {}
): PublicationPackageCreatedResponse => ({
    Package_UUID: faker.string.uuid(),
    Zip_UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationActPackagesGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationPackage => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Delivery_ID: faker.word.sample(),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Type: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        Zip: {
            Filename: faker.word.sample(),
            Latest_Download_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Latest_Download_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActPackagesActPackageUuidDownloadGetResponseMock =
    (): PublicationActPackagesActPackageUuidDownloadGet200 => ({})

export const getPublicationActPackagesActPackageUuidReportPostResponseMock = (
    overrideResponse: any = {}
): AppExtensionsPublicationsEndpointsPublicationsActReportsUploadActPackageReportUploadPackageReportResponse => ({
    Duplicate_Count: faker.number.int({ min: undefined, max: undefined }),
    Status: faker.helpers.arrayElement(Object.values(ReportStatusType)),
    ...overrideResponse,
})

export const getPublicationActReportsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationActPackageReportShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Act_Package_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Main_Outcome: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationActReportsActReportUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationActPackageReport => ({
    Act_Package_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Filename: faker.word.sample(),
    Main_Outcome: faker.word.sample(),
    Report_Status: faker.word.sample(),
    Source_Document: faker.word.sample(),
    Sub_Delivery_ID: faker.word.sample(),
    Sub_Outcome: faker.word.sample(),
    Sub_Progress: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationActReportsActReportUuidDownloadGetResponseMock =
    (): PublicationActReportsActReportUuidDownloadGet200 => ({})

export const getPublicationActPackagesActPackageUuidCreateAnnouncementPostResponseMock =
    (overrideResponse: any = {}): AnnouncementCreatedResponse => ({
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })

export const getPublicationAnnouncementsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationAnnouncementShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Announcement_Date: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
        ]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Is_Locked: faker.datatype.boolean(),
        Metadata: {},
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAnnouncementsAnnouncementUuidGetResponseMock = (
    overrideResponse: any = {}
): PublicationAnnouncement => ({
    Act_Package: {
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Delivery_ID: faker.word.sample(),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Type: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    Announcement_Date: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
    ]),
    Content: {},
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Is_Locked: faker.datatype.boolean(),
    Metadata: {},
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Procedural: {},
    Publication: {
        Act_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.word.sample(),
        Environment_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Is_Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.word.sample(),
        Template_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getPublicationAnnouncementsAnnouncementUuidPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getPublicationAnnouncementsAnnouncementUuidPackagesPostResponseMock =
    (
        overrideResponse: any = {}
    ): PublicationAnnouncementPackageCreatedResponse => ({
        Package_UUID: faker.string.uuid(),
        Zip_UUID: faker.string.uuid(),
        ...overrideResponse,
    })

export const getPublicationAnnouncementPackagesGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationPackage => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Delivery_ID: faker.word.sample(),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Type: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        Zip: {
            Filename: faker.word.sample(),
            Latest_Download_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Latest_Download_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGetResponseMock =
    (): PublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGet200 => ({})

export const getPublicationAnnouncementPackagesAnnouncementPackageUuidReportPostResponseMock =
    (
        overrideResponse: any = {}
    ): AppExtensionsPublicationsEndpointsPublicationsAnnouncementReportsUploadAnnouncementPackageReportUploadPackageReportResponse => ({
        Duplicate_Count: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement(Object.values(ReportStatusType)),
        ...overrideResponse,
    })

export const getPublicationAnnouncementReportsGetResponseMock = (
    overrideResponse: any = {}
): PagedResponsePublicationAnnouncementPackageReportShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Announcement_Package_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Main_Outcome: faker.word.sample(),
        Report_Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationAnnouncementReportsAnnouncementReportUuidGetResponseMock =
    (overrideResponse: any = {}): PublicationAnnouncementPackageReport => ({
        Announcement_Package_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Filename: faker.word.sample(),
        Main_Outcome: faker.word.sample(),
        Report_Status: faker.word.sample(),
        Source_Document: faker.word.sample(),
        Sub_Delivery_ID: faker.word.sample(),
        Sub_Outcome: faker.word.sample(),
        Sub_Progress: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })

export const getPublicationAnnouncementReportsAnnouncementReportUuidDownloadGetResponseMock =
    (): PublicationAnnouncementReportsAnnouncementReportUuidDownloadGet200 => ({})

export const getPublicationDsoValueListsAreaDesignationTypesGetResponseMock = (
    overrideResponse: any = {}
): AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationTypesAreaDesignationValueList => ({
    Allowed_Values: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => faker.word.sample()),
    ...overrideResponse,
})

export const getPublicationDsoValueListsAreaDesignationGroupsGetResponseMock = (
    overrideResponse: any = {}
): AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationGroupsAreaDesignationValueList => ({
    Allowed_Values: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => faker.word.sample()),
    ...overrideResponse,
})

export const getLoginAccessTokenPostResponseMock = (
    overrideResponse: any = {}
): AuthToken => ({
    access_token: faker.word.sample(),
    identifier: {
        Gebruikersnaam: faker.word.sample(),
        Rol: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    token_type: faker.word.sample(),
    ...overrideResponse,
})

export const getPasswordResetPostResponseMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getHealthCheckHealthGetResponseMock =
    (): HealthCheckHealthGet200 => ({})

export const getAmbitiesValidGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieBasic
) => {
    return http.get('*/ambities/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieBasic
) => {
    return http.get('*/ambities/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get('*/ambities/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesLatestLineageIdGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get('*/ambities/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/ambities/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/ambities/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/ambitie/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitieStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectAmbitieLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieLineageIdPatchMockHandler = (
    overrideResponse?: AmbitieUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieLatestLineageIdGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/latest/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLatestLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesObjectAmbitieActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get('*/modules/object/ambitie/active/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesObjectAmbitieActiveLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsModuleIdAmbitieVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/revisions/:moduleId/ambitie/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdAmbitieVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelenValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelBasic
) => {
    return http.get('*/beleidsdoelen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelBasic
) => {
    return http.get('*/beleidsdoelen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get('*/beleidsdoelen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get('*/beleidsdoelen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidsdoelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidsdoelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidsdoel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectBeleidsdoelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsdoelLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsdoelLineageIdPatchMockHandler = (
    overrideResponse?: BeleidsdoelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsdoelLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidsdoelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsdoel/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidsdoelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsdoel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectBeleidsdoelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/beleidsdoel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectBeleidsdoelActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsdoel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzesValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeBasic
) => {
    return http.get('*/beleidskeuzes/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeBasic
) => {
    return http.get('*/beleidskeuzes/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get('*/beleidskeuzes/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get('*/beleidskeuzes/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidskeuzes/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidskeuzes/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidskeuze/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzeStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdGetMockHandler = (
    overrideResponse?: AcknowledgedRelation[]
) => {
    return http.get(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getBeleidskeuzeAcknowledgedRelationsLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getBeleidskeuzeAcknowledgedRelationsLineageIdPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMockHandler =
    (overrideResponse?: ResponseOK) => {
        return http.post(
            '*/beleidskeuze/acknowledged-relations/:lineageId/edit',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidskeuzeLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidskeuzeLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMockHandler = (
    overrideResponse?: BeleidskeuzeUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidskeuzeLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidskeuzeFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidskeuze/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidskeuzeFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidskeuze/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsBeleidskeuzeActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/beleidskeuze/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsBeleidskeuzeActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidskeuze/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelsValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelBasic
) => {
    return http.get('*/beleidsregels/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelBasic
) => {
    return http.get('*/beleidsregels/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get('*/beleidsregels/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get('*/beleidsregels/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidsregels/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidsregels/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidsregel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectBeleidsregelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsregelLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsregelLineageIdPatchMockHandler = (
    overrideResponse?: BeleidsregelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsregelLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidsregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsregel/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsregelLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidsregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsregel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsBeleidsregelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/beleidsregel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsBeleidsregelActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsregel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidsregelVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getDocumentenValidGetMockHandler = (
    overrideResponse?: PagedResponseDocumentBasic
) => {
    return http.get('*/documenten/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getDocumentenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseDocumentBasic
) => {
    return http.get('*/documenten/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getDocumentenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentenVersionObjectUuidGetMockHandler = (
    overrideResponse?: DocumentFull
) => {
    return http.get('*/documenten/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getDocumentenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentenLatestLineageIdGetMockHandler = (
    overrideResponse?: DocumentFull
) => {
    return http.get('*/documenten/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getDocumentenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getDocumentStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/document/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getDocumentStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectDocumentLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseDocumentExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/document/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectDocumentLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectDocumentLineageIdPatchMockHandler = (
    overrideResponse?: DocumentUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/document/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectDocumentLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectDocumentLatestLineageIdGetMockHandler = (
    overrideResponse?: DocumentFull
) => {
    return http.get(
        '*/modules/:moduleId/object/document/latest/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectDocumentLatestLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectDocumentVersionObjectUuidGetMockHandler = (
    overrideResponse?: DocumentFull
) => {
    return http.get(
        '*/modules/:moduleId/object/document/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectDocumentVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesObjectDocumentActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get('*/modules/object/document/active/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesObjectDocumentActiveLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsModuleIdDocumentVersionObjectUuidGetMockHandler = (
    overrideResponse?: DocumentFull
) => {
    return http.get(
        '*/revisions/:moduleId/document/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdDocumentVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammasValidGetMockHandler = (
    overrideResponse?: PagedResponseGebiedsprogrammaBasic
) => {
    return http.get('*/gebiedsprogrammas/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseGebiedsprogrammaBasic
) => {
    return http.get('*/gebiedsprogrammas/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasVersionObjectUuidGetMockHandler = (
    overrideResponse?: GebiedsprogrammaFull
) => {
    return http.get('*/gebiedsprogrammas/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasLatestLineageIdGetMockHandler = (
    overrideResponse?: GebiedsprogrammaFull
) => {
    return http.get('*/gebiedsprogrammas/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/gebiedsprogrammas/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/gebiedsprogrammas/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/gebiedsprogrammas/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMockHandler =
    (overrideResponse?: PagedResponseGebiedsprogrammaExtended) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMockHandler =
    (overrideResponse?: GebiedsprogrammaUUID) => {
        return http.patch(
            '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsGebiedsprogrammaActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/gebiedsprogramma/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsGebiedsprogrammaActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/revisions/:moduleId/gebiedsprogramma/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getMaatregelenValidGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelBasic
) => {
    return http.get('*/maatregelen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelBasic
) => {
    return http.get('*/maatregelen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenVersionObjectUuidGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get('*/maatregelen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenLatestLineageIdGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get('*/maatregelen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/maatregelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/maatregelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/maatregel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectMaatregelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelLineageIdPatchMockHandler = (
    overrideResponse?: MaatregelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelLatestLineageIdGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/latest/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLatestLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelVersionObjectUuidGetMockHandler =
    (overrideResponse?: MaatregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/maatregel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectMaatregelVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsMaatregelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/maatregel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsMaatregelActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdMaatregelVersionObjectUuidGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get(
        '*/revisions/:moduleId/maatregel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdMaatregelVersionObjectUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getNationaalBelangPostMockHandler = (
    overrideResponse?: NationaalBelangUUID
) => {
    return http.post('*/nationaal-belang', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/nationaal-belang/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/nationaal-belang/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLineageIdDeleteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangValidGetMockHandler = (
    overrideResponse?: PagedResponseNationaalBelangBasic
) => {
    return http.get('*/nationaal-belang/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLatestLineageIdGetMockHandler = (
    overrideResponse?: NationaalBelangFull
) => {
    return http.get('*/nationaal-belang/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/nationaal-belang/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/nationaal-belang/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/nationaal-belang/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenValidGetMockHandler = (
    overrideResponse?: PagedResponseProgrammaAlgemeenBasic
) => {
    return http.get('*/programmas-algemeen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseProgrammaAlgemeenBasic
) => {
    return http.get('*/programmas-algemeen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenVersionObjectUuidGetMockHandler = (
    overrideResponse?: ProgrammaAlgemeenFull
) => {
    return http.get('*/programmas-algemeen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenLatestLineageIdGetMockHandler = (
    overrideResponse?: ProgrammaAlgemeenFull
) => {
    return http.get('*/programmas-algemeen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/programma-algemeen/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammaAlgemeenStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMockHandler =
    (overrideResponse?: PagedResponseProgrammaAlgemeenExtended) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMockHandler =
    (overrideResponse?: ProgrammaAlgemeenUUID) => {
        return http.patch(
            '*/modules/:moduleId/object/programma-algemeen/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectProgrammaAlgemeenActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/programma-algemeen/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectProgrammaAlgemeenActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/revisions/:moduleId/programma-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getVerplichtProgrammaPostMockHandler = (
    overrideResponse?: VerplichtProgrammaUUID
) => {
    return http.post('*/verplicht-programma', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/verplicht-programma/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/verplicht-programma/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLineageIdDeleteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaValidGetMockHandler = (
    overrideResponse?: PagedResponseVerplichtProgrammaBasic
) => {
    return http.get('*/verplicht-programma/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLatestLineageIdGetMockHandler = (
    overrideResponse?: VerplichtProgrammaFull
) => {
    return http.get('*/verplicht-programma/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/verplicht-programma/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/verplicht-programma/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/verplicht-programma/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenValidGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenBasic
) => {
    return http.get('*/visies-algemeen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenBasic
) => {
    return http.get('*/visies-algemeen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenVersionObjectUuidGetMockHandler = (
    overrideResponse?: VisieAlgemeenFull
) => {
    return http.get('*/visies-algemeen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenLatestLineageIdGetMockHandler = (
    overrideResponse?: VisieAlgemeenFull
) => {
    return http.get('*/visies-algemeen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/visie-algemeen/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisieAlgemeenStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectVisieAlgemeenLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectVisieAlgemeenLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMockHandler = (
    overrideResponse?: VisieAlgemeenUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectVisieAlgemeenLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/visie-algemeen/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/visie-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectVisieAlgemeenActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/visie-algemeen/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectVisieAlgemeenActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/revisions/:moduleId/visie-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getWerkingsgebiedenValidGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedBasic
) => {
    return http.get('*/werkingsgebieden/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedBasic
) => {
    return http.get('*/werkingsgebieden/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenValidLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenVersionObjectUuidGetMockHandler = (
    overrideResponse?: WerkingsgebiedFull
) => {
    return http.get('*/werkingsgebieden/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenVersionObjectUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenLatestLineageIdGetMockHandler = (
    overrideResponse?: WerkingsgebiedFull
) => {
    return http.get('*/werkingsgebieden/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/werkingsgebied/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectWerkingsgebiedLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectWerkingsgebiedLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMockHandler = (
    overrideResponse?: WerkingsgebiedUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectWerkingsgebiedLineageIdPatchResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/modules/:moduleId/object/werkingsgebied/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/modules/:moduleId/object/werkingsgebied/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectWerkingsgebiedActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/werkingsgebied/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectWerkingsgebiedActiveLineageIdGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/revisions/:moduleId/werkingsgebied/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getWettelijkeTaakPostMockHandler = (
    overrideResponse?: WettelijkeTaakUUID
) => {
    return http.post('*/wettelijke-taak', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/wettelijke-taak/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/wettelijke-taak/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLineageIdDeleteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakValidGetMockHandler = (
    overrideResponse?: PagedResponseWettelijkeTaakBasic
) => {
    return http.get('*/wettelijke-taak/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLatestLineageIdGetMockHandler = (
    overrideResponse?: WettelijkeTaakFull
) => {
    return http.get('*/wettelijke-taak/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLatestLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/wettelijke-taak/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakRelationsLineageIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/wettelijke-taak/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakRelationsLineageIdPutResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/wettelijke-taak/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakStaticLineageIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersGetMockHandler = (
    overrideResponse?: PagedResponseUser
) => {
    return http.get('*/users', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersPostMockHandler = (
    overrideResponse?: UserCreateResponse
) => {
    return http.post('*/users', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersSearchGetMockHandler = (
    overrideResponse?: PagedResponseUser
) => {
    return http.get('*/users/search', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getUsersSearchGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidGetMockHandler = (overrideResponse?: User) => {
    return http.get('*/users/:userUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getUsersUserUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/users/:userUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getUsersUserUuidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidResetPasswordPostMockHandler = (
    overrideResponse?: ResetPasswordResponse
) => {
    return http.post('*/users/:userUuid/reset-password', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getUsersUserUuidResetPasswordPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSourceWerkingsgebiedenGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebied
) => {
    return http.get('*/source-werkingsgebieden', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSourceWerkingsgebiedenGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchSourceGeoPostMockHandler = (
    overrideResponse?: PagedResponseGeoSearchResult
) => {
    return http.post('*/search/source-geo', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchSourceGeoPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchSourceGeometryPostMockHandler = (
    overrideResponse?: PagedResponseGeoSearchResult
) => {
    return http.post('*/search/source-geometry', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchSourceGeometryPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchPostMockHandler = (
    overrideResponse?: PagedResponseSearchObject
) => {
    return http.post('*/search', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchValidPostMockHandler = (
    overrideResponse?: PagedResponseValidSearchObject
) => {
    return http.post('*/search/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchValidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getFullGraphGetMockHandler = (
    overrideResponse?: GraphResponse
) => {
    return http.get('*/full-graph', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getFullGraphGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectGraphGetMockHandler = (
    overrideResponse?: GraphResponse
) => {
    return http.get('*/object-graph', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getObjectGraphGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsGetMockHandler = (
    overrideResponse?: PagedResponsePublicModuleShort
) => {
    return http.get('*/revisions', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getRevisionsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsModuleIdGetMockHandler = (
    overrideResponse?: PublicModuleOverview
) => {
    return http.get('*/revisions/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getRevisionsModuleIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getStorageFilesGetMockHandler = (
    overrideResponse?: PagedResponseStorageFileBasic
) => {
    return http.get('*/storage-files', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getStorageFilesGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getStorageFilesPostMockHandler = (
    overrideResponse?: UploadFileResponse
) => {
    return http.post('*/storage-files', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getStorageFilesPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesGetMockHandler = (
    overrideResponse?: PagedResponseModule
) => {
    return http.get('*/modules', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostMockHandler = (
    overrideResponse?: ModuleCreatedResponse
) => {
    return http.post('*/modules', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdGetMockHandler = (
    overrideResponse?: ModuleOverview
) => {
    return http.get('*/modules/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdActivatePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/activate', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdActivatePostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdCompletePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/complete', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdCompletePostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdClosePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/close', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdClosePostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdStatusGetMockHandler = (
    overrideResponse?: ModuleStatus[]
) => {
    return http.get('*/modules/:moduleId/status', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdStatusGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdStatusPatchMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.patch('*/modules/:moduleId/status', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdStatusPatchResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdDiffGetMockHandler = () => {
    return http.get('*/modules/:moduleId/diff', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export const getModulesModuleIdAddNewObjectPostMockHandler = (
    overrideResponse?: NewObjectStaticResponse
) => {
    return http.post('*/modules/:moduleId/add-new-object', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdAddNewObjectPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdAddExistingObjectPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/add-existing-object', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdAddExistingObjectPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectContextObjectTypeLineageIdGetMockHandler =
    (overrideResponse?: ModuleObjectContext) => {
        return http.get(
            '*/modules/:moduleId/object-context/:objectType/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectContextObjectTypeLineageIdGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectContextObjectTypeLineageIdPostMockHandler =
    (overrideResponse?: ResponseOK) => {
        return http.post(
            '*/modules/:moduleId/object-context/:objectType/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectContextObjectTypeLineageIdPostResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdRemoveObjectTypeLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete(
        '*/modules/:moduleId/remove/:objectType/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdRemoveObjectTypeLineageIdDeleteResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdSnapshotStatusIdGetMockHandler = (
    overrideResponse?: ModuleSnapshot
) => {
    return http.get('*/modules/:moduleId/snapshot/:statusId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdSnapshotStatusIdGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesObjectsLatestGetMockHandler = (
    overrideResponse?: PagedResponseModuleObjectShortStatus
) => {
    return http.get('*/modules/objects/latest', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesObjectsLatestGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectsValidCountGetMockHandler = (
    overrideResponse?: ObjectCount[]
) => {
    return http.get('*/objects/valid/count', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getObjectsValidCountGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectsValidGetMockHandler = (
    overrideResponse?: PagedResponseGenericObjectShort
) => {
    return http.get('*/objects/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getObjectsValidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAojGetMockHandler = (
    overrideResponse?: PagedResponsePublicationAOJ
) => {
    return http.get('*/publication-aoj', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationAojGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAojPostMockHandler = (
    overrideResponse?: AOJCreatedResponse
) => {
    return http.post('*/publication-aoj', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationAojPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesGetMockHandler = (
    overrideResponse?: PagedResponsePublicationTemplate
) => {
    return http.get('*/publication-templates', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationTemplatesGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesPostMockHandler = (
    overrideResponse?: TemplateCreatedResponse
) => {
    return http.post('*/publication-templates', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationTemplatesPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesTemplateUuidGetMockHandler = (
    overrideResponse?: PublicationTemplate
) => {
    return http.get('*/publication-templates/:templateUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationTemplatesTemplateUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationTemplatesTemplateUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/publication-templates/:templateUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationTemplatesTemplateUuidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationActShort
) => {
    return http.get('*/publication-acts', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsPostMockHandler = (
    overrideResponse?: ActCreatedResponse
) => {
    return http.post('*/publication-acts', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActsPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsActUuidClosePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/publication-acts/:actUuid/close', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActsActUuidClosePostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsActUuidGetMockHandler = (
    overrideResponse?: PublicationAct
) => {
    return http.get('*/publication-acts/:actUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActsActUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActsActUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/publication-acts/:actUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActsActUuidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationEnvironment
) => {
    return http.get('*/publication-environments', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationEnvironmentsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsPostMockHandler = (
    overrideResponse?: EnvironmentCreatedResponse
) => {
    return http.post('*/publication-environments', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationEnvironmentsPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsEnvironmentUuidGetMockHandler = (
    overrideResponse?: PublicationEnvironment
) => {
    return http.get('*/publication-environments/:environmentUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationEnvironmentsEnvironmentUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationEnvironmentsEnvironmentUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post(
        '*/publication-environments/:environmentUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationEnvironmentsEnvironmentUuidPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationsGetMockHandler = (
    overrideResponse?: PagedResponsePublication
) => {
    return http.get('*/publications', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPostMockHandler = (
    overrideResponse?: PublicationCreatedResponse
) => {
    return http.post('*/publications', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidGetMockHandler = (
    overrideResponse?: Publication
) => {
    return http.get('*/publications/:publicationUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/publications/:publicationUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidVersionPostMockHandler = (
    overrideResponse?: PublicationVersionCreatedResponse
) => {
    return http.post('*/publications/:publicationUuid/version', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidVersionPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidVersionsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationVersionShort
) => {
    return http.get('*/publications/:publicationUuid/versions', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidVersionsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsVersionUuidGetMockHandler = (
    overrideResponse?: PublicationVersion
) => {
    return http.get('*/publication-versions/:versionUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationVersionsVersionUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsVersionUuidPostMockHandler = (
    overrideResponse?: PublicationVersionEditResponse
) => {
    return http.post('*/publication-versions/:versionUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationVersionsVersionUuidPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsVersionUuidDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/publication-versions/:versionUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationVersionsVersionUuidDeleteResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationVersionsVersionUuidAttachmentsPostMockHandler = (
    overrideResponse?: UploadAttachmentResponse
) => {
    return http.post(
        '*/publication-versions/:versionUuid/attachments',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationVersionsVersionUuidAttachmentsPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationVersionsVersionUuidPdfExportPostMockHandler = (
    overrideResponse?: PublicationVersionsVersionUuidPdfExportPost200
) => {
    return http.post(
        '*/publication-versions/:versionUuid/pdf_export',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationVersionsVersionUuidPdfExportPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationVersionsVersionUuidPackagesPostMockHandler = (
    overrideResponse?: PublicationPackageCreatedResponse
) => {
    return http.post(
        '*/publication-versions/:versionUuid/packages',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationVersionsVersionUuidPackagesPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActPackagesGetMockHandler = (
    overrideResponse?: PagedResponsePublicationPackage
) => {
    return http.get('*/publication-act-packages', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActPackagesGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActPackagesActPackageUuidDownloadGetMockHandler = (
    overrideResponse?: PublicationActPackagesActPackageUuidDownloadGet200
) => {
    return http.get(
        '*/publication-act-packages/:actPackageUuid/download',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationActPackagesActPackageUuidDownloadGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActPackagesActPackageUuidReportPostMockHandler = (
    overrideResponse?: AppExtensionsPublicationsEndpointsPublicationsActReportsUploadActPackageReportUploadPackageReportResponse
) => {
    return http.post(
        '*/publication-act-packages/:actPackageUuid/report',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationActPackagesActPackageUuidReportPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActReportsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationActPackageReportShort
) => {
    return http.get('*/publication-act-reports', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActReportsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActReportsActReportUuidGetMockHandler = (
    overrideResponse?: PublicationActPackageReport
) => {
    return http.get('*/publication-act-reports/:actReportUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationActReportsActReportUuidGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationActReportsActReportUuidDownloadGetMockHandler = (
    overrideResponse?: PublicationActReportsActReportUuidDownloadGet200
) => {
    return http.get(
        '*/publication-act-reports/:actReportUuid/download',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationActReportsActReportUuidDownloadGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationActPackagesActPackageUuidCreateAnnouncementPostMockHandler =
    (overrideResponse?: AnnouncementCreatedResponse) => {
        return http.post(
            '*/publication-act-packages/:actPackageUuid/create-announcement',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationActPackagesActPackageUuidCreateAnnouncementPostResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationAnnouncementShort
) => {
    return http.get('*/publication-announcements', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationAnnouncementsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAnnouncementsAnnouncementUuidGetMockHandler = (
    overrideResponse?: PublicationAnnouncement
) => {
    return http.get(
        '*/publication-announcements/:announcementUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationAnnouncementsAnnouncementUuidGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationAnnouncementsAnnouncementUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post(
        '*/publication-announcements/:announcementUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationAnnouncementsAnnouncementUuidPostResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationAnnouncementsAnnouncementUuidPackagesPostMockHandler =
    (overrideResponse?: PublicationAnnouncementPackageCreatedResponse) => {
        return http.post(
            '*/publication-announcements/:announcementUuid/packages',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationAnnouncementsAnnouncementUuidPackagesPostResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementPackagesGetMockHandler = (
    overrideResponse?: PagedResponsePublicationPackage
) => {
    return http.get('*/publication-announcement-packages', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationAnnouncementPackagesGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGetMockHandler =
    (
        overrideResponse?: PublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGet200
    ) => {
        return http.get(
            '*/publication-announcement-packages/:announcementPackageUuid/download',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementPackagesAnnouncementPackageUuidReportPostMockHandler =
    (
        overrideResponse?: AppExtensionsPublicationsEndpointsPublicationsAnnouncementReportsUploadAnnouncementPackageReportUploadPackageReportResponse
    ) => {
        return http.post(
            '*/publication-announcement-packages/:announcementPackageUuid/report',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationAnnouncementPackagesAnnouncementPackageUuidReportPostResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementReportsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationAnnouncementPackageReportShort
) => {
    return http.get('*/publication-announcement-reports', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationAnnouncementReportsGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationAnnouncementReportsAnnouncementReportUuidGetMockHandler =
    (overrideResponse?: PublicationAnnouncementPackageReport) => {
        return http.get(
            '*/publication-announcement-reports/:announcementReportUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationAnnouncementReportsAnnouncementReportUuidGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationAnnouncementReportsAnnouncementReportUuidDownloadGetMockHandler =
    (
        overrideResponse?: PublicationAnnouncementReportsAnnouncementReportUuidDownloadGet200
    ) => {
        return http.get(
            '*/publication-announcement-reports/:announcementReportUuid/download',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getPublicationAnnouncementReportsAnnouncementReportUuidDownloadGetResponseMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getPublicationDsoValueListsAreaDesignationTypesGetMockHandler = (
    overrideResponse?: AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationTypesAreaDesignationValueList
) => {
    return http.get(
        '*/publication-dso-value-lists/area-designation-types',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationDsoValueListsAreaDesignationTypesGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationDsoValueListsAreaDesignationGroupsGetMockHandler = (
    overrideResponse?: AppExtensionsPublicationsEndpointsDsoValueListsAreaDesignationGroupsAreaDesignationValueList
) => {
    return http.get(
        '*/publication-dso-value-lists/area-designation-groups',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationDsoValueListsAreaDesignationGroupsGetResponseMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getLoginAccessTokenPostMockHandler = (
    overrideResponse?: AuthToken
) => {
    return http.post('*/login/access-token', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getLoginAccessTokenPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPasswordResetPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/password-reset', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPasswordResetPostResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getHealthCheckHealthGetMockHandler = (
    overrideResponse?: HealthCheckHealthGet200
) => {
    return http.get('*/health', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getHealthCheckHealthGetResponseMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}
export const getOmgevingsbeleidAPIMock = () => [
    getAmbitiesValidGetMockHandler(),
    getAmbitiesValidLineageIdGetMockHandler(),
    getAmbitiesVersionObjectUuidGetMockHandler(),
    getAmbitiesLatestLineageIdGetMockHandler(),
    getAmbitiesRelationsLineageIdGetMockHandler(),
    getAmbitiesRelationsLineageIdPutMockHandler(),
    getAmbitieStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectAmbitieLineageIdGetMockHandler(),
    getModulesModuleIdObjectAmbitieLineageIdPatchMockHandler(),
    getModulesModuleIdObjectAmbitieLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectAmbitieVersionObjectUuidGetMockHandler(),
    getModulesObjectAmbitieActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdAmbitieVersionObjectUuidGetMockHandler(),
    getBeleidsdoelenValidGetMockHandler(),
    getBeleidsdoelenValidLineageIdGetMockHandler(),
    getBeleidsdoelenVersionObjectUuidGetMockHandler(),
    getBeleidsdoelenLatestLineageIdGetMockHandler(),
    getBeleidsdoelenRelationsLineageIdGetMockHandler(),
    getBeleidsdoelenRelationsLineageIdPutMockHandler(),
    getBeleidsdoelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMockHandler(),
    getModulesObjectBeleidsdoelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMockHandler(),
    getBeleidskeuzesValidGetMockHandler(),
    getBeleidskeuzesValidLineageIdGetMockHandler(),
    getBeleidskeuzesVersionObjectUuidGetMockHandler(),
    getBeleidskeuzesLatestLineageIdGetMockHandler(),
    getBeleidskeuzesRelationsLineageIdGetMockHandler(),
    getBeleidskeuzesRelationsLineageIdPutMockHandler(),
    getBeleidskeuzeStaticLineageIdPostMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdGetMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdPostMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMockHandler(),
    getModulesObjectsBeleidskeuzeActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMockHandler(),
    getBeleidsregelsValidGetMockHandler(),
    getBeleidsregelsValidLineageIdGetMockHandler(),
    getBeleidsregelsVersionObjectUuidGetMockHandler(),
    getBeleidsregelsLatestLineageIdGetMockHandler(),
    getBeleidsregelsRelationsLineageIdGetMockHandler(),
    getBeleidsregelsRelationsLineageIdPutMockHandler(),
    getBeleidsregelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectBeleidsregelLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsregelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMockHandler(),
    getModulesObjectsBeleidsregelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMockHandler(),
    getDocumentenValidGetMockHandler(),
    getDocumentenValidLineageIdGetMockHandler(),
    getDocumentenVersionObjectUuidGetMockHandler(),
    getDocumentenLatestLineageIdGetMockHandler(),
    getDocumentStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectDocumentLineageIdGetMockHandler(),
    getModulesModuleIdObjectDocumentLineageIdPatchMockHandler(),
    getModulesModuleIdObjectDocumentLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectDocumentVersionObjectUuidGetMockHandler(),
    getModulesObjectDocumentActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdDocumentVersionObjectUuidGetMockHandler(),
    getGebiedsprogrammasValidGetMockHandler(),
    getGebiedsprogrammasValidLineageIdGetMockHandler(),
    getGebiedsprogrammasVersionObjectUuidGetMockHandler(),
    getGebiedsprogrammasLatestLineageIdGetMockHandler(),
    getGebiedsprogrammasRelationsLineageIdGetMockHandler(),
    getGebiedsprogrammasRelationsLineageIdPutMockHandler(),
    getGebiedsprogrammasStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMockHandler(),
    getModulesObjectsGebiedsprogrammaActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMockHandler(),
    getMaatregelenValidGetMockHandler(),
    getMaatregelenValidLineageIdGetMockHandler(),
    getMaatregelenVersionObjectUuidGetMockHandler(),
    getMaatregelenLatestLineageIdGetMockHandler(),
    getMaatregelenRelationsLineageIdGetMockHandler(),
    getMaatregelenRelationsLineageIdPutMockHandler(),
    getMaatregelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectMaatregelLineageIdGetMockHandler(),
    getModulesModuleIdObjectMaatregelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectMaatregelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectMaatregelVersionObjectUuidGetMockHandler(),
    getModulesObjectsMaatregelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdMaatregelVersionObjectUuidGetMockHandler(),
    getNationaalBelangPostMockHandler(),
    getNationaalBelangLineageIdPostMockHandler(),
    getNationaalBelangLineageIdDeleteMockHandler(),
    getNationaalBelangValidGetMockHandler(),
    getNationaalBelangLatestLineageIdGetMockHandler(),
    getNationaalBelangRelationsLineageIdGetMockHandler(),
    getNationaalBelangRelationsLineageIdPutMockHandler(),
    getNationaalBelangStaticLineageIdPostMockHandler(),
    getProgrammasAlgemeenValidGetMockHandler(),
    getProgrammasAlgemeenValidLineageIdGetMockHandler(),
    getProgrammasAlgemeenVersionObjectUuidGetMockHandler(),
    getProgrammasAlgemeenLatestLineageIdGetMockHandler(),
    getProgrammaAlgemeenStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMockHandler(),
    getModulesObjectProgrammaAlgemeenActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMockHandler(),
    getVerplichtProgrammaPostMockHandler(),
    getVerplichtProgrammaLineageIdPostMockHandler(),
    getVerplichtProgrammaLineageIdDeleteMockHandler(),
    getVerplichtProgrammaValidGetMockHandler(),
    getVerplichtProgrammaLatestLineageIdGetMockHandler(),
    getVerplichtProgrammaRelationsLineageIdGetMockHandler(),
    getVerplichtProgrammaRelationsLineageIdPutMockHandler(),
    getVerplichtProgrammaStaticLineageIdPostMockHandler(),
    getVisiesAlgemeenValidGetMockHandler(),
    getVisiesAlgemeenValidLineageIdGetMockHandler(),
    getVisiesAlgemeenVersionObjectUuidGetMockHandler(),
    getVisiesAlgemeenLatestLineageIdGetMockHandler(),
    getVisieAlgemeenStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLineageIdGetMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMockHandler(),
    getModulesObjectVisieAlgemeenActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMockHandler(),
    getWerkingsgebiedenValidGetMockHandler(),
    getWerkingsgebiedenValidLineageIdGetMockHandler(),
    getWerkingsgebiedenVersionObjectUuidGetMockHandler(),
    getWerkingsgebiedenLatestLineageIdGetMockHandler(),
    getWerkingsgebiedStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLineageIdGetMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMockHandler(),
    getModulesObjectWerkingsgebiedActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMockHandler(),
    getWettelijkeTaakPostMockHandler(),
    getWettelijkeTaakLineageIdPostMockHandler(),
    getWettelijkeTaakLineageIdDeleteMockHandler(),
    getWettelijkeTaakValidGetMockHandler(),
    getWettelijkeTaakLatestLineageIdGetMockHandler(),
    getWettelijkeTaakRelationsLineageIdGetMockHandler(),
    getWettelijkeTaakRelationsLineageIdPutMockHandler(),
    getWettelijkeTaakStaticLineageIdPostMockHandler(),
    getUsersGetMockHandler(),
    getUsersPostMockHandler(),
    getUsersSearchGetMockHandler(),
    getUsersUserUuidGetMockHandler(),
    getUsersUserUuidPostMockHandler(),
    getUsersUserUuidResetPasswordPostMockHandler(),
    getSourceWerkingsgebiedenGetMockHandler(),
    getSearchSourceGeoPostMockHandler(),
    getSearchSourceGeometryPostMockHandler(),
    getSearchPostMockHandler(),
    getSearchValidPostMockHandler(),
    getFullGraphGetMockHandler(),
    getObjectGraphGetMockHandler(),
    getRevisionsGetMockHandler(),
    getRevisionsModuleIdGetMockHandler(),
    getStorageFilesGetMockHandler(),
    getStorageFilesPostMockHandler(),
    getModulesGetMockHandler(),
    getModulesPostMockHandler(),
    getModulesModuleIdGetMockHandler(),
    getModulesModuleIdPostMockHandler(),
    getModulesModuleIdActivatePostMockHandler(),
    getModulesModuleIdCompletePostMockHandler(),
    getModulesModuleIdClosePostMockHandler(),
    getModulesModuleIdStatusGetMockHandler(),
    getModulesModuleIdStatusPatchMockHandler(),
    getModulesModuleIdDiffGetMockHandler(),
    getModulesModuleIdAddNewObjectPostMockHandler(),
    getModulesModuleIdAddExistingObjectPostMockHandler(),
    getModulesModuleIdObjectContextObjectTypeLineageIdGetMockHandler(),
    getModulesModuleIdObjectContextObjectTypeLineageIdPostMockHandler(),
    getModulesModuleIdRemoveObjectTypeLineageIdDeleteMockHandler(),
    getModulesModuleIdSnapshotStatusIdGetMockHandler(),
    getModulesObjectsLatestGetMockHandler(),
    getObjectsValidCountGetMockHandler(),
    getObjectsValidGetMockHandler(),
    getPublicationAojGetMockHandler(),
    getPublicationAojPostMockHandler(),
    getPublicationTemplatesGetMockHandler(),
    getPublicationTemplatesPostMockHandler(),
    getPublicationTemplatesTemplateUuidGetMockHandler(),
    getPublicationTemplatesTemplateUuidPostMockHandler(),
    getPublicationActsGetMockHandler(),
    getPublicationActsPostMockHandler(),
    getPublicationActsActUuidClosePostMockHandler(),
    getPublicationActsActUuidGetMockHandler(),
    getPublicationActsActUuidPostMockHandler(),
    getPublicationEnvironmentsGetMockHandler(),
    getPublicationEnvironmentsPostMockHandler(),
    getPublicationEnvironmentsEnvironmentUuidGetMockHandler(),
    getPublicationEnvironmentsEnvironmentUuidPostMockHandler(),
    getPublicationsGetMockHandler(),
    getPublicationsPostMockHandler(),
    getPublicationsPublicationUuidGetMockHandler(),
    getPublicationsPublicationUuidPostMockHandler(),
    getPublicationsPublicationUuidVersionPostMockHandler(),
    getPublicationsPublicationUuidVersionsGetMockHandler(),
    getPublicationVersionsVersionUuidGetMockHandler(),
    getPublicationVersionsVersionUuidPostMockHandler(),
    getPublicationVersionsVersionUuidDeleteMockHandler(),
    getPublicationVersionsVersionUuidAttachmentsPostMockHandler(),
    getPublicationVersionsVersionUuidPdfExportPostMockHandler(),
    getPublicationVersionsVersionUuidPackagesPostMockHandler(),
    getPublicationActPackagesGetMockHandler(),
    getPublicationActPackagesActPackageUuidDownloadGetMockHandler(),
    getPublicationActPackagesActPackageUuidReportPostMockHandler(),
    getPublicationActReportsGetMockHandler(),
    getPublicationActReportsActReportUuidGetMockHandler(),
    getPublicationActReportsActReportUuidDownloadGetMockHandler(),
    getPublicationActPackagesActPackageUuidCreateAnnouncementPostMockHandler(),
    getPublicationAnnouncementsGetMockHandler(),
    getPublicationAnnouncementsAnnouncementUuidGetMockHandler(),
    getPublicationAnnouncementsAnnouncementUuidPostMockHandler(),
    getPublicationAnnouncementsAnnouncementUuidPackagesPostMockHandler(),
    getPublicationAnnouncementPackagesGetMockHandler(),
    getPublicationAnnouncementPackagesAnnouncementPackageUuidDownloadGetMockHandler(),
    getPublicationAnnouncementPackagesAnnouncementPackageUuidReportPostMockHandler(),
    getPublicationAnnouncementReportsGetMockHandler(),
    getPublicationAnnouncementReportsAnnouncementReportUuidGetMockHandler(),
    getPublicationAnnouncementReportsAnnouncementReportUuidDownloadGetMockHandler(),
    getPublicationDsoValueListsAreaDesignationTypesGetMockHandler(),
    getPublicationDsoValueListsAreaDesignationGroupsGetMockHandler(),
    getLoginAccessTokenPostMockHandler(),
    getPasswordResetPostMockHandler(),
    getHealthCheckHealthGetMockHandler(),
]
