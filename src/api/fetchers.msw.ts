/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 3.0-alpha
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type {
    AcknowledgedRelation,
    ActiveModuleObjectWrapper,
    AmbitieFull,
    AmbitieUUID,
    AuthToken,
    BeleidsdoelFull,
    BeleidsdoelUUID,
    BeleidskeuzeFull,
    BeleidskeuzeUUID,
    BeleidsregelFull,
    BeleidsregelUUID,
    GebiedsprogrammaFull,
    GebiedsprogrammaUUID,
    GraphResponse,
    MaatregelFull,
    MaatregelUUID,
    ModuleCreatedResponse,
    ModuleObjectContext,
    ModuleOverview,
    ModuleSnapshot,
    ModuleStatus,
    NationaalBelangFull,
    NationaalBelangUUID,
    NewObjectStaticResponse,
    ObjectCount,
    PagedResponseAmbitieBasic,
    PagedResponseAmbitieExtended,
    PagedResponseBeleidsdoelBasic,
    PagedResponseBeleidsdoelExtended,
    PagedResponseBeleidskeuzeBasic,
    PagedResponseBeleidskeuzeExtended,
    PagedResponseBeleidsregelBasic,
    PagedResponseBeleidsregelExtended,
    PagedResponseGebiedsprogrammaBasic,
    PagedResponseGebiedsprogrammaExtended,
    PagedResponseGenericObjectShort,
    PagedResponseGeoSearchResult,
    PagedResponseMaatregelBasic,
    PagedResponseMaatregelExtended,
    PagedResponseModule,
    PagedResponseModuleObjectShortStatus,
    PagedResponseNationaalBelangBasic,
    PagedResponseProgrammaAlgemeenBasic,
    PagedResponseProgrammaAlgemeenExtended,
    PagedResponsePublicModuleShort,
    PagedResponsePublication,
    PagedResponsePublicationBillShort,
    PagedResponsePublicationPackage,
    PagedResponseSearchObject,
    PagedResponseUser,
    PagedResponseValidSearchObject,
    PagedResponseVerplichtProgrammaBasic,
    PagedResponseVisieAlgemeenBasic,
    PagedResponseVisieAlgemeenExtended,
    PagedResponseWerkingsgebied,
    PagedResponseWerkingsgebiedBasic,
    PagedResponseWerkingsgebiedExtended,
    PagedResponseWettelijkeTaakBasic,
    ProgrammaAlgemeenFull,
    ProgrammaAlgemeenUUID,
    PublicModuleOverview,
    Publication,
    PublicationBill,
    PublicationPackage,
    PublicationPackageReport,
    ReadRelation,
    ResetPasswordResponse,
    ResponseOK,
    User,
    UserCreateResponse,
    VerplichtProgrammaFull,
    VerplichtProgrammaUUID,
    VisieAlgemeenFull,
    VisieAlgemeenUUID,
    WerkingsgebiedFull,
    WerkingsgebiedUUID,
    WettelijkeTaakFull,
    WettelijkeTaakUUID,
} from './fetchers.schemas'

export const getAmbitiesValidGetMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitiesValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getAmbitiesVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitiesLatestLineageIdGetMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getAmbitiesRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getAmbitiesRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getAmbitieStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectAmbitieLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseAmbitieExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieLineageIdPatchMock = (
    overrideResponse: any = {}
): AmbitieUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieLatestLineageIdGetMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectAmbitieVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectAmbitieActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdAmbitieVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): AmbitieFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenValidGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelenValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsdoelenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidsdoelenRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidsdoelenRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidsdoelStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectBeleidsdoelLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsdoelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsdoelLineageIdPatchMock = (
    overrideResponse: any = {}
): BeleidsdoelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectBeleidsdoelActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsdoelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Ambities: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getBeleidskeuzesValidGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzesValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidskeuzesVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzesLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidskeuzesRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidskeuzesRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeAcknowledgedRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): AcknowledgedRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Deleted_At: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Denied: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Requested_By_Code: faker.word.sample(),
        Side_A: {
            Acknowledged: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Acknowledged_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Explanation: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        },
        Side_B: {
            Acknowledged: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Acknowledged_By_UUID: faker.helpers.arrayElement([
                faker.string.uuid(),
                undefined,
            ]),
            Explanation: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
        },
        Version: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    }))

export const getBeleidskeuzeAcknowledgedRelationsLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectBeleidskeuzeLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidskeuzeExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMock = (
    overrideResponse: any = {}
): BeleidskeuzeUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesObjectsBeleidskeuzeActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidskeuzeFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidsregels: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Cause: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Explanation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    NationaleBelangen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Weblink: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Provincial_Interest: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Code: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Modified_Date: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getBeleidsregelsValidGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelsValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getBeleidsregelsVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelsLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getBeleidsregelsRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getBeleidsregelsRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getBeleidsregelStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectBeleidsregelLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseBeleidsregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsregelLineageIdPatchMock = (
    overrideResponse: any = {}
): BeleidsregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectsBeleidsregelActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): BeleidsregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasValidGetMock = (
    overrideResponse: any = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammasValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseGebiedsprogrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getGebiedsprogrammasVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasLatestLineageIdGetMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getGebiedsprogrammasRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getGebiedsprogrammasRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getGebiedsprogrammasStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseGebiedsprogrammaExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMock = (
    overrideResponse: any = {}
): GebiedsprogrammaUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMock =
    (overrideResponse: any = {}): GebiedsprogrammaFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Maatregelen: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Object: {
                    Object_ID: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                    ]),
                    Object_Type: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    Title: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    UUID: faker.helpers.arrayElement([
                        faker.string.uuid(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                Relation: {
                    Description: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([faker.word.sample(), null]),
                        undefined,
                    ]),
                    Object_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Object_Type: faker.word.sample(),
                    ...overrideResponse,
                },
                ...overrideResponse,
            })),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectsGebiedsprogrammaActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): GebiedsprogrammaFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getMaatregelenValidGetMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelenValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getMaatregelenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getMaatregelenRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getMaatregelenRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getMaatregelStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectMaatregelLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseMaatregelExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Gebied: faker.helpers.arrayElement([
            {
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                End_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                ID: faker.number.int({ min: undefined, max: undefined }),
                Modified_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                Start_Validity: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Title: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Hierarchy_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Portfolio_Holder_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Werkingsgebied_Code: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelLineageIdPatchMock = (
    overrideResponse: any = {}
): MaatregelUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelLatestLineageIdGetMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectMaatregelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesObjectsMaatregelActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdMaatregelVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): MaatregelFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Beleidsdoelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Effect: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Gebied: faker.helpers.arrayElement([
        {
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            End_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            ID: faker.number.int({ min: undefined, max: undefined }),
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Start_Validity: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Gebiedsprogrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Hierarchy_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Hierarchy_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Client_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Portfolio_Holder_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Role: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Werkingsgebied_Code: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Werkingsgebied_Statics: faker.helpers.arrayElement([
        {
            Cached_Title: faker.word.sample(),
            Code: faker.word.sample(),
            Object_ID: faker.number.int({ min: undefined, max: undefined }),
            Object_Type: faker.word.sample(),
            ...overrideResponse,
        },
        undefined,
    ]),
    ...overrideResponse,
})

export const getNationaalBelangPostMock = (
    overrideResponse: any = {}
): NationaalBelangUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangLineageIdDeleteMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangValidGetMock = (
    overrideResponse: any = {}
): PagedResponseNationaalBelangBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getNationaalBelangLatestLineageIdGetMock = (
    overrideResponse: any = {}
): NationaalBelangFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getNationaalBelangRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getNationaalBelangRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getNationaalBelangStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getProgrammasAlgemeenValidGetMock = (
    overrideResponse: any = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammasAlgemeenValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseProgrammaAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getProgrammasAlgemeenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammasAlgemeenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getProgrammaAlgemeenStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseProgrammaAlgemeenExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMock =
    (overrideResponse: any = {}): ProgrammaAlgemeenFull => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Public_Revisions: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Module_Object_UUID: faker.string.uuid(),
                Module_Status: faker.word.sample(),
                Module_Title: faker.word.sample(),
                ...overrideResponse,
            })),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })

export const getModulesObjectProgrammaAlgemeenActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): ProgrammaAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaPostMock = (
    overrideResponse: any = {}
): VerplichtProgrammaUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVerplichtProgrammaLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaLineageIdDeleteMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaValidGetMock = (
    overrideResponse: any = {}
): PagedResponseVerplichtProgrammaBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVerplichtProgrammaLatestLineageIdGetMock = (
    overrideResponse: any = {}
): VerplichtProgrammaFull => ({
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Maatregelen: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    WettelijkeTaken: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    ...overrideResponse,
})

export const getVerplichtProgrammaRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getVerplichtProgrammaRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVerplichtProgrammaStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getVisiesAlgemeenValidGetMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisiesAlgemeenValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getVisiesAlgemeenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisiesAlgemeenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getVisieAlgemeenStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectVisieAlgemeenLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseVisieAlgemeenExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMock = (
    overrideResponse: any = {}
): VisieAlgemeenUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectVisieAlgemeenActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): VisieAlgemeenFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Public_Revisions: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Object_UUID: faker.string.uuid(),
            Module_Status: faker.word.sample(),
            Module_Title: faker.word.sample(),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedenValidGetMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedenValidLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWerkingsgebiedenVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedenLatestLineageIdGetMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWerkingsgebiedStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectWerkingsgebiedLineageIdGetMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebiedExtended => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Adjust_On: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        End_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Owner_1: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                Owner_2: faker.helpers.arrayElement([
                    {
                        Gebruikersnaam: faker.word.sample(),
                        Rol: faker.word.sample(),
                        UUID: faker.string.uuid(),
                        ...overrideResponse,
                    },
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Start_Validity: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                null,
            ]),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMock = (
    overrideResponse: any = {}
): WerkingsgebiedUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getModulesObjectWerkingsgebiedActiveLineageIdGetMock = (
    overrideResponse: any = {}
): ActiveModuleObjectWrapper[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Module: {
            Closed: faker.datatype.boolean(),
            Description: faker.word.sample(),
            Module_ID: faker.number.int({ min: undefined, max: undefined }),
            Module_Manager_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Module_Manager_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Status: faker.helpers.arrayElement([
                {
                    Created_By_UUID: faker.string.uuid(),
                    Created_Date: `${
                        faker.date.past().toISOString().split('.')[0]
                    }Z`,
                    ID: faker.number.int({ min: undefined, max: undefined }),
                    Module_ID: faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    Status: faker.word.sample(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Title: faker.word.sample(),
            ...overrideResponse,
        },
        Module_Object: {
            Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Module_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Title: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        ...overrideResponse,
    }))

export const getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMock = (
    overrideResponse: any = {}
): WerkingsgebiedFull => ({
    Adjust_On: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
    ]),
    Area: faker.helpers.arrayElement([
        {
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            Source_Modified_Date: `${
                faker.date.past().toISOString().split('.')[0]
            }Z`,
            Source_Title: faker.word.sample(),
            Source_UUID: faker.string.uuid(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Area_UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakPostMock = (
    overrideResponse: any = {}
): WettelijkeTaakUUID => ({
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakLineageIdDeleteMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakValidGetMock = (
    overrideResponse: any = {}
): PagedResponseWettelijkeTaakBasic => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Created_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Object_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Type: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
        Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getWettelijkeTaakLatestLineageIdGetMock = (
    overrideResponse: any = {}
): WettelijkeTaakFull => ({
    Beleidskeuzes: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Object: {
                Object_ID: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                ]),
                Object_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Title: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            Relation: {
                Description: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([faker.word.sample(), null]),
                    undefined,
                ]),
                Object_ID: faker.number.int({ min: undefined, max: undefined }),
                Object_Type: faker.word.sample(),
                ...overrideResponse,
            },
            ...overrideResponse,
        })),
        undefined,
    ]),
    Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    End_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Object_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    Object_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ObjectStatics: faker.helpers.arrayElement([
        {
            Owner_1: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Owner_2: faker.helpers.arrayElement([
                {
                    Gebruikersnaam: faker.word.sample(),
                    Rol: faker.word.sample(),
                    UUID: faker.string.uuid(),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Start_Validity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            null,
        ]),
        undefined,
    ]),
    Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    VerplichtProgrammas: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            Created_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Modified_Date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Object_ID: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
            ]),
            Object_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            UUID: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    Weblink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getWettelijkeTaakRelationsLineageIdGetMock = (
    overrideResponse: any = {}
): ReadRelation[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
        ]),
        ...overrideResponse,
    }))

export const getWettelijkeTaakRelationsLineageIdPutMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getWettelijkeTaakStaticLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getUsersGetMock = (
    overrideResponse: any = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUsersPostMock = (
    overrideResponse: any = {}
): UserCreateResponse => ({
    Email: faker.word.sample(),
    Password: faker.word.sample(),
    Rol: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUsersSearchGetMock = (
    overrideResponse: any = {}
): PagedResponseUser => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Email: faker.word.sample(),
        Gebruikersnaam: faker.word.sample(),
        IsActive: faker.datatype.boolean(),
        Rol: faker.word.sample(),
        Status: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getUsersUserUuidGetMock = (overrideResponse: any = {}): User => ({
    Email: faker.word.sample(),
    Gebruikersnaam: faker.word.sample(),
    IsActive: faker.datatype.boolean(),
    Rol: faker.word.sample(),
    Status: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getUsersUserUuidPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getUsersUserUuidResetPasswordPostMock = (
    overrideResponse: any = {}
): ResetPasswordResponse => ({
    NewPassword: faker.word.sample(),
    UUID: faker.string.uuid(),
    ...overrideResponse,
})

export const getSourceWerkingsgebiedenGetMock = (
    overrideResponse: any = {}
): PagedResponseWerkingsgebied => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        End_Validity: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        ID: faker.number.int({ min: undefined, max: undefined }),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Start_Validity: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchSourceGeoPostMock = (
    overrideResponse: any = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Gebied: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        Omschrijving: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Type: faker.word.sample(),
        UUID: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchSourceGeometryPostMock = (
    overrideResponse: any = {}
): PagedResponseGeoSearchResult => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Gebied: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        Omschrijving: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Titel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        Type: faker.word.sample(),
        UUID: faker.helpers.arrayElement([
            faker.word.sample(),
            faker.string.uuid(),
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchPostMock = (
    overrideResponse: any = {}
): PagedResponseSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getSearchValidPostMock = (
    overrideResponse: any = {}
): PagedResponseValidSearchObject => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Object_Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Score: faker.number.int({ min: undefined, max: undefined }),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getFullGraphGetMock = (
    overrideResponse: any = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
        ...overrideResponse,
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getObjectGraphGetMock = (
    overrideResponse: any = {}
): GraphResponse => ({
    Edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Type: faker.helpers.arrayElement(Object.values(GraphEdgeType)),
        Vertice_A_Code: faker.word.sample(),
        Vertice_B_Code: faker.word.sample(),
        ...overrideResponse,
    })),
    Vertices: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getRevisionsGetMock = (
    overrideResponse: any = {}
): PagedResponsePublicModuleShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getRevisionsModuleIdGetMock = (
    overrideResponse: any = {}
): PublicModuleOverview => ({
    Module: {
        Description: faker.word.sample(),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        ...overrideResponse,
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Description: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getModulesGetMock = (
    overrideResponse: any = {}
): PagedResponseModule => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesPostMock = (
    overrideResponse: any = {}
): ModuleCreatedResponse => ({
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getModulesModuleIdGetMock = (
    overrideResponse: any = {}
): ModuleOverview => ({
    Module: {
        Activated: faker.datatype.boolean(),
        Closed: faker.datatype.boolean(),
        Created_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Description: faker.word.sample(),
        Modified_By: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Module_Manager_1: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_1_UUID: faker.string.uuid(),
        Module_Manager_2: faker.helpers.arrayElement([
            {
                Gebruikersnaam: faker.word.sample(),
                Rol: faker.word.sample(),
                UUID: faker.string.uuid(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Module_Manager_2_UUID: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
        ]),
        Status: faker.helpers.arrayElement([
            {
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Module_ID: faker.number.int({ min: undefined, max: undefined }),
                Status: faker.word.sample(),
                ...overrideResponse,
            },
            undefined,
        ]),
        Successful: faker.datatype.boolean(),
        Temporary_Locked: faker.datatype.boolean(),
        Title: faker.word.sample(),
        ...overrideResponse,
    },
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    StatusHistory: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
        ...overrideResponse,
    })),
    ...overrideResponse,
})

export const getModulesModuleIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdActivatePostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdCompletePostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdClosePostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdStatusGetMock = (
    overrideResponse: any = {}
): ModuleStatus[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        ID: faker.number.int({ min: undefined, max: undefined }),
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Status: faker.word.sample(),
        ...overrideResponse,
    }))

export const getModulesModuleIdStatusPatchMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdAddNewObjectPostMock = (
    overrideResponse: any = {}
): NewObjectStaticResponse => ({
    Code: faker.word.sample(),
    Object_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_Type: faker.word.sample(),
    ...overrideResponse,
})

export const getModulesModuleIdAddExistingObjectPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdObjectContextObjectTypeLineageIdGetMock = (
    overrideResponse: any = {}
): ModuleObjectContext => ({
    Action: faker.word.sample(),
    Code: faker.word.sample(),
    Conclusion: faker.word.sample(),
    Created_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Explanation: faker.word.sample(),
    Modified_By: faker.helpers.arrayElement([
        {
            Gebruikersnaam: faker.word.sample(),
            Rol: faker.word.sample(),
            UUID: faker.string.uuid(),
            ...overrideResponse,
        },
        undefined,
    ]),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_ID: faker.number.int({ min: undefined, max: undefined }),
    Object_Type: faker.word.sample(),
    Original_Adjust_On: faker.helpers.arrayElement([
        faker.string.uuid(),
        undefined,
    ]),
    ...overrideResponse,
})

export const getModulesModuleIdObjectContextObjectTypeLineageIdPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdRemoveObjectTypeLineageIdDeleteMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getModulesModuleIdSnapshotStatusIdGetMock = (
    overrideResponse: any = {}
): ModuleSnapshot => ({
    Objects: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({})),
    ...overrideResponse,
})

export const getModulesObjectsLatestGetMock = (
    overrideResponse: any = {}
): PagedResponseModuleObjectShortStatus => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Code: faker.word.sample(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        ModuleObjectContext: faker.helpers.arrayElement([
            {
                Action: faker.word.sample(),
                Original_Adjust_On: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ObjectStatics: faker.helpers.arrayElement([
            {
                Client_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Owner_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_1_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                Portfolio_Holder_2_UUID: faker.helpers.arrayElement([
                    faker.string.uuid(),
                    undefined,
                ]),
                ...overrideResponse,
            },
            undefined,
        ]),
        Status: faker.word.sample(),
        Title: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getObjectsValidCountGetMock = (
    overrideResponse: any = {}
): ObjectCount[] =>
    Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Count: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        ...overrideResponse,
    }))

export const getObjectsValidGetMock = (
    overrideResponse: any = {}
): PagedResponseGenericObjectShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Object_ID: faker.number.int({ min: undefined, max: undefined }),
        Object_Type: faker.word.sample(),
        Title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsGetMock = (
    overrideResponse: any = {}
): PagedResponsePublication => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Document_Type: faker.helpers.arrayElement(
            Object.values(AppExtensionsPublicationsEnumsDocumentType)
        ),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_ID: faker.number.int({ min: undefined, max: undefined }),
        Official_Title: faker.word.sample(),
        Regulation_Title: faker.word.sample(),
        Template_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        UUID: faker.string.uuid(),
        Work_ID: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPostMock = (
    overrideResponse: any = {}
): Publication => ({
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.helpers.arrayElement(
        Object.values(AppExtensionsPublicationsEnumsDocumentType)
    ),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Official_Title: faker.word.sample(),
    Regulation_Title: faker.word.sample(),
    Template_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Work_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidGetMock = (
    overrideResponse: any = {}
): Publication => ({
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.helpers.arrayElement(
        Object.values(AppExtensionsPublicationsEnumsDocumentType)
    ),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Official_Title: faker.word.sample(),
    Regulation_Title: faker.word.sample(),
    Template_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Work_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidPatchMock = (
    overrideResponse: any = {}
): Publication => ({
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Document_Type: faker.helpers.arrayElement(
        Object.values(AppExtensionsPublicationsEnumsDocumentType)
    ),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_ID: faker.number.int({ min: undefined, max: undefined }),
    Official_Title: faker.word.sample(),
    Regulation_Title: faker.word.sample(),
    Template_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Work_ID: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidBillsGetMock = (
    overrideResponse: any = {}
): PagedResponsePublicationBillShort => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Is_Official: faker.datatype.boolean(),
        Locked: faker.datatype.boolean(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Module_Status_ID: faker.number.int({ min: undefined, max: undefined }),
        Procedure_Type: faker.helpers.arrayElement(
            Object.values(ProcedureType)
        ),
        Publication_UUID: faker.string.uuid(),
        UUID: faker.string.uuid(),
        Version_ID: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidBillsPostMock = (
    overrideResponse: any = {}
): PublicationBill => ({
    Announcement_Date: faker.date.past().toISOString().split('T')[0],
    Bill_Data: faker.helpers.arrayElement([
        {
            Amendment_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Articles: faker.helpers.arrayElement([
                Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                })),
                undefined,
            ]),
            Bill_Title: faker.word.sample(),
            Closing: faker.word.sample(),
            Preamble: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Regulation_Title: faker.word.sample(),
            Signature: faker.word.sample(),
            Time_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Effective_Date: faker.date.past().toISOString().split('T')[0],
    Is_Official: faker.datatype.boolean(),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_Status_ID: faker.number.int({ min: undefined, max: undefined }),
    Procedure_Data: faker.helpers.arrayElement([
        {
            Announcement_Date: faker.date.past().toISOString().split('T')[0],
            Steps: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Conclusion_Date: faker.date.past().toISOString().split('T')[0],
                Step_Type: faker.helpers.arrayElement(
                    Object.values(ProcedureStepType)
                ),
                ...overrideResponse,
            })),
            ...overrideResponse,
        },
        undefined,
    ]),
    Procedure_Type: faker.helpers.arrayElement(Object.values(ProcedureType)),
    Publication_UUID: faker.string.uuid(),
    PZH_Bill_Identifier: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Version_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidBillsBillUuidGetMock = (
    overrideResponse: any = {}
): PublicationBill => ({
    Announcement_Date: faker.date.past().toISOString().split('T')[0],
    Bill_Data: faker.helpers.arrayElement([
        {
            Amendment_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Articles: faker.helpers.arrayElement([
                Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                })),
                undefined,
            ]),
            Bill_Title: faker.word.sample(),
            Closing: faker.word.sample(),
            Preamble: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Regulation_Title: faker.word.sample(),
            Signature: faker.word.sample(),
            Time_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Effective_Date: faker.date.past().toISOString().split('T')[0],
    Is_Official: faker.datatype.boolean(),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_Status_ID: faker.number.int({ min: undefined, max: undefined }),
    Procedure_Data: faker.helpers.arrayElement([
        {
            Announcement_Date: faker.date.past().toISOString().split('T')[0],
            Steps: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Conclusion_Date: faker.date.past().toISOString().split('T')[0],
                Step_Type: faker.helpers.arrayElement(
                    Object.values(ProcedureStepType)
                ),
                ...overrideResponse,
            })),
            ...overrideResponse,
        },
        undefined,
    ]),
    Procedure_Type: faker.helpers.arrayElement(Object.values(ProcedureType)),
    Publication_UUID: faker.string.uuid(),
    PZH_Bill_Identifier: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Version_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ...overrideResponse,
})

export const getPublicationsPublicationUuidBillsBillUuidPatchMock = (
    overrideResponse: any = {}
): PublicationBill => ({
    Announcement_Date: faker.date.past().toISOString().split('T')[0],
    Bill_Data: faker.helpers.arrayElement([
        {
            Amendment_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            Articles: faker.helpers.arrayElement([
                Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                ).map(() => ({
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                })),
                undefined,
            ]),
            Bill_Title: faker.word.sample(),
            Closing: faker.word.sample(),
            Preamble: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Regulation_Title: faker.word.sample(),
            Signature: faker.word.sample(),
            Time_Article: faker.helpers.arrayElement([
                {
                    Content: faker.word.sample(),
                    Label: faker.word.sample(),
                    Number: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                    ]),
                    ...overrideResponse,
                },
                undefined,
            ]),
            ...overrideResponse,
        },
        undefined,
    ]),
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Effective_Date: faker.date.past().toISOString().split('T')[0],
    Is_Official: faker.datatype.boolean(),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Module_Status_ID: faker.number.int({ min: undefined, max: undefined }),
    Procedure_Data: faker.helpers.arrayElement([
        {
            Announcement_Date: faker.date.past().toISOString().split('T')[0],
            Steps: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Conclusion_Date: faker.date.past().toISOString().split('T')[0],
                Step_Type: faker.helpers.arrayElement(
                    Object.values(ProcedureStepType)
                ),
                ...overrideResponse,
            })),
            ...overrideResponse,
        },
        undefined,
    ]),
    Procedure_Type: faker.helpers.arrayElement(Object.values(ProcedureType)),
    Publication_UUID: faker.string.uuid(),
    PZH_Bill_Identifier: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Version_ID: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    ...overrideResponse,
})

export const getPublicationBillsBillUuidPackagesGetMock = (
    overrideResponse: any = {}
): PagedResponsePublicationPackage => ({
    limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
    ]),
    results: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
    ).map(() => ({
        Announcement_Date: faker.date.past().toISOString().split('T')[0],
        Bill_UUID: faker.string.uuid(),
        Config_ID: faker.number.int({ min: undefined, max: undefined }),
        Created_By_UUID: faker.string.uuid(),
        Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        FRBR_ID: faker.number.int({ min: undefined, max: undefined }),
        FRBR_Info: faker.helpers.arrayElement([
            {
                act_expression_date: faker.date
                    .past()
                    .toISOString()
                    .split('T')[0],
                act_expression_lang: faker.word.sample(),
                act_expression_misc: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                act_expression_version: faker.word.sample(),
                act_work_country: faker.word.sample(),
                act_work_date: faker.word.sample(),
                act_work_misc: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                bill_expression_date: faker.date
                    .past()
                    .toISOString()
                    .split('T')[0],
                bill_expression_lang: faker.word.sample(),
                bill_expression_misc: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                bill_expression_version: faker.word.sample(),
                bill_work_country: faker.word.sample(),
                bill_work_date: faker.word.sample(),
                bill_work_misc: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                ...overrideResponse,
            },
            undefined,
        ]),
        Latest_Download_By_UUID: faker.helpers.arrayElement([
            faker.string.uuid(),
            undefined,
        ]),
        Latest_Download_Date: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split('.')[0]}Z`,
            undefined,
        ]),
        Modified_By_UUID: faker.string.uuid(),
        Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
        Package_Event_Type: faker.helpers.arrayElement(
            Object.values(PackageEventType)
        ),
        Publication_Filename: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        Reports: faker.helpers.arrayElement([
            Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
            ).map(() => ({
                Created_By_UUID: faker.string.uuid(),
                Created_Date: `${
                    faker.date.past().toISOString().split('.')[0]
                }Z`,
                ID: faker.number.int({ min: undefined, max: undefined }),
                Messages: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Package_UUID: faker.string.uuid(),
                Report_Timestamp: faker.helpers.arrayElement([
                    `${faker.date.past().toISOString().split('.')[0]}Z`,
                    undefined,
                ]),
                Report_Type: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                Result: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                ]),
                ...overrideResponse,
            })),
            undefined,
        ]),
        UUID: faker.string.uuid(),
        Validation_Status: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ZIP_File_Checksum: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ZIP_File_Name: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
        ]),
        ...overrideResponse,
    })),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
})

export const getPublicationBillsBillUuidPackagesPostMock = (
    overrideResponse: any = {}
): PublicationPackage => ({
    Announcement_Date: faker.date.past().toISOString().split('T')[0],
    Bill_UUID: faker.string.uuid(),
    Config_ID: faker.number.int({ min: undefined, max: undefined }),
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    FRBR_ID: faker.number.int({ min: undefined, max: undefined }),
    FRBR_Info: faker.helpers.arrayElement([
        {
            act_expression_date: faker.date.past().toISOString().split('T')[0],
            act_expression_lang: faker.word.sample(),
            act_expression_misc: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            act_expression_version: faker.word.sample(),
            act_work_country: faker.word.sample(),
            act_work_date: faker.word.sample(),
            act_work_misc: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            bill_expression_date: faker.date.past().toISOString().split('T')[0],
            bill_expression_lang: faker.word.sample(),
            bill_expression_misc: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            bill_expression_version: faker.word.sample(),
            bill_work_country: faker.word.sample(),
            bill_work_date: faker.word.sample(),
            bill_work_misc: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ID: faker.number.int({ min: undefined, max: undefined }),
            ...overrideResponse,
        },
        undefined,
    ]),
    Latest_Download_By_UUID: faker.helpers.arrayElement([
        faker.string.uuid(),
        undefined,
    ]),
    Latest_Download_Date: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Modified_By_UUID: faker.string.uuid(),
    Modified_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    Package_Event_Type: faker.helpers.arrayElement(
        Object.values(PackageEventType)
    ),
    Publication_Filename: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    Reports: faker.helpers.arrayElement([
        Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
        ).map(() => ({
            Created_By_UUID: faker.string.uuid(),
            Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
            ID: faker.number.int({ min: undefined, max: undefined }),
            Messages: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Package_UUID: faker.string.uuid(),
            Report_Timestamp: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            Report_Type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            Result: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
            ]),
            ...overrideResponse,
        })),
        undefined,
    ]),
    UUID: faker.string.uuid(),
    Validation_Status: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    ZIP_File_Checksum: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
    ]),
    ZIP_File_Name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getPublicationPackagesPackageUuidReportPostMock = (
    overrideResponse: any = {}
): PublicationPackageReport => ({
    Created_By_UUID: faker.string.uuid(),
    Created_Date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    ID: faker.number.int({ min: undefined, max: undefined }),
    Messages: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Package_UUID: faker.string.uuid(),
    Report_Timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    Report_Type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    Result: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
})

export const getLoginAccessTokenPostMock = (
    overrideResponse: any = {}
): AuthToken => ({
    access_token: faker.word.sample(),
    identifier: {
        Gebruikersnaam: faker.word.sample(),
        Rol: faker.word.sample(),
        UUID: faker.string.uuid(),
        ...overrideResponse,
    },
    token_type: faker.word.sample(),
    ...overrideResponse,
})

export const getPasswordResetPostMock = (
    overrideResponse: any = {}
): ResponseOK => ({ message: faker.word.sample(), ...overrideResponse })

export const getAmbitiesValidGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieBasic
) => {
    return http.get('*/ambities/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getAmbitiesValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieBasic
) => {
    return http.get('*/ambities/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get('*/ambities/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesLatestLineageIdGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get('*/ambities/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/ambities/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitiesRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/ambities/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitiesRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getAmbitieStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/ambitie/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getAmbitieStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectAmbitieLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseAmbitieExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieLineageIdPatchMockHandler = (
    overrideResponse?: AmbitieUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/ambitie/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieLatestLineageIdGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/latest/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieLatestLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectAmbitieVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/modules/:moduleId/object/ambitie/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectAmbitieVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesObjectAmbitieActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get('*/modules/object/ambitie/active/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesObjectAmbitieActiveLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsModuleIdAmbitieVersionObjectUuidGetMockHandler = (
    overrideResponse?: AmbitieFull
) => {
    return http.get(
        '*/revisions/:moduleId/ambitie/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdAmbitieVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsdoelenValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelBasic
) => {
    return http.get('*/beleidsdoelen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelBasic
) => {
    return http.get('*/beleidsdoelen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get('*/beleidsdoelen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get('*/beleidsdoelen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidsdoelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelenRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidsdoelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelenRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsdoelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidsdoel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsdoelStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectBeleidsdoelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsdoelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsdoelLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsdoelLineageIdPatchMockHandler = (
    overrideResponse?: BeleidsdoelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsdoel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsdoelLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidsdoelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsdoel/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidsdoelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsdoel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectBeleidsdoelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/beleidsdoel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectBeleidsdoelActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsdoelFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsdoel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzesValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeBasic
) => {
    return http.get('*/beleidskeuzes/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeBasic
) => {
    return http.get('*/beleidskeuzes/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get('*/beleidskeuzes/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get('*/beleidskeuzes/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidskeuzes/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzesRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidskeuzes/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzesRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidskeuze/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidskeuzeStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdGetMockHandler = (
    overrideResponse?: AcknowledgedRelation[]
) => {
    return http.get(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getBeleidskeuzeAcknowledgedRelationsLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post(
        '*/beleidskeuze/acknowledged-relations/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getBeleidskeuzeAcknowledgedRelationsLineageIdPostMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMockHandler =
    (overrideResponse?: ResponseOK) => {
        return http.post(
            '*/beleidskeuze/acknowledged-relations/:lineageId/edit',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidskeuzeLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidskeuzeExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidskeuzeLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMockHandler = (
    overrideResponse?: BeleidskeuzeUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidskeuze/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidskeuzeFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidskeuze/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidskeuzeFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidskeuze/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsBeleidskeuzeActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/beleidskeuze/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsBeleidskeuzeActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidskeuzeFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidskeuze/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getBeleidsregelsValidGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelBasic
) => {
    return http.get('*/beleidsregels/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelBasic
) => {
    return http.get('*/beleidsregels/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get('*/beleidsregels/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsLatestLineageIdGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get('*/beleidsregels/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/beleidsregels/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelsRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/beleidsregels/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelsRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getBeleidsregelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/beleidsregel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getBeleidsregelStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectBeleidsregelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseBeleidsregelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsregelLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsregelLineageIdPatchMockHandler = (
    overrideResponse?: BeleidsregelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/beleidsregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectBeleidsregelLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMockHandler =
    (overrideResponse?: BeleidsregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsregel/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMockHandler =
    (overrideResponse?: BeleidsregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/beleidsregel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsBeleidsregelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/beleidsregel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsBeleidsregelActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMockHandler = (
    overrideResponse?: BeleidsregelFull
) => {
    return http.get(
        '*/revisions/:moduleId/beleidsregel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getGebiedsprogrammasValidGetMockHandler = (
    overrideResponse?: PagedResponseGebiedsprogrammaBasic
) => {
    return http.get('*/gebiedsprogrammas/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseGebiedsprogrammaBasic
) => {
    return http.get('*/gebiedsprogrammas/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasVersionObjectUuidGetMockHandler = (
    overrideResponse?: GebiedsprogrammaFull
) => {
    return http.get('*/gebiedsprogrammas/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasLatestLineageIdGetMockHandler = (
    overrideResponse?: GebiedsprogrammaFull
) => {
    return http.get('*/gebiedsprogrammas/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/gebiedsprogrammas/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/gebiedsprogrammas/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getGebiedsprogrammasStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/gebiedsprogrammas/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getGebiedsprogrammasStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMockHandler =
    (overrideResponse?: PagedResponseGebiedsprogrammaExtended) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMockHandler =
    (overrideResponse?: GebiedsprogrammaUUID) => {
        return http.patch(
            '*/modules/:moduleId/object/gebiedsprogrammas/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/modules/:moduleId/object/gebiedsprogrammas/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsGebiedsprogrammaActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/gebiedsprogramma/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsGebiedsprogrammaActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMockHandler =
    (overrideResponse?: GebiedsprogrammaFull) => {
        return http.get(
            '*/revisions/:moduleId/gebiedsprogramma/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getMaatregelenValidGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelBasic
) => {
    return http.get('*/maatregelen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelBasic
) => {
    return http.get('*/maatregelen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenVersionObjectUuidGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get('*/maatregelen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenLatestLineageIdGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get('*/maatregelen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/maatregelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelenRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/maatregelen/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelenRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getMaatregelStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/maatregel/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getMaatregelStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectMaatregelLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseMaatregelExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelLineageIdPatchMockHandler = (
    overrideResponse?: MaatregelUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/maatregel/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelLatestLineageIdGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get(
        '*/modules/:moduleId/object/maatregel/latest/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectMaatregelLatestLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectMaatregelVersionObjectUuidGetMockHandler =
    (overrideResponse?: MaatregelFull) => {
        return http.get(
            '*/modules/:moduleId/object/maatregel/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectMaatregelVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectsMaatregelActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/objects/maatregel/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectsMaatregelActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdMaatregelVersionObjectUuidGetMockHandler = (
    overrideResponse?: MaatregelFull
) => {
    return http.get(
        '*/revisions/:moduleId/maatregel/version/:objectUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getRevisionsModuleIdMaatregelVersionObjectUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getNationaalBelangPostMockHandler = (
    overrideResponse?: NationaalBelangUUID
) => {
    return http.post('*/nationaal-belang', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/nationaal-belang/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/nationaal-belang/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLineageIdDeleteMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangValidGetMockHandler = (
    overrideResponse?: PagedResponseNationaalBelangBasic
) => {
    return http.get('*/nationaal-belang/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangLatestLineageIdGetMockHandler = (
    overrideResponse?: NationaalBelangFull
) => {
    return http.get('*/nationaal-belang/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/nationaal-belang/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/nationaal-belang/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getNationaalBelangStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/nationaal-belang/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getNationaalBelangStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenValidGetMockHandler = (
    overrideResponse?: PagedResponseProgrammaAlgemeenBasic
) => {
    return http.get('*/programmas-algemeen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseProgrammaAlgemeenBasic
) => {
    return http.get('*/programmas-algemeen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenVersionObjectUuidGetMockHandler = (
    overrideResponse?: ProgrammaAlgemeenFull
) => {
    return http.get('*/programmas-algemeen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammasAlgemeenLatestLineageIdGetMockHandler = (
    overrideResponse?: ProgrammaAlgemeenFull
) => {
    return http.get('*/programmas-algemeen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammasAlgemeenLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getProgrammaAlgemeenStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/programma-algemeen/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getProgrammaAlgemeenStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMockHandler =
    (overrideResponse?: PagedResponseProgrammaAlgemeenExtended) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMockHandler =
    (overrideResponse?: ProgrammaAlgemeenUUID) => {
        return http.patch(
            '*/modules/:moduleId/object/programma-algemeen/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/programma-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectProgrammaAlgemeenActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/programma-algemeen/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectProgrammaAlgemeenActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: ProgrammaAlgemeenFull) => {
        return http.get(
            '*/revisions/:moduleId/programma-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getVerplichtProgrammaPostMockHandler = (
    overrideResponse?: VerplichtProgrammaUUID
) => {
    return http.post('*/verplicht-programma', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/verplicht-programma/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/verplicht-programma/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLineageIdDeleteMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaValidGetMockHandler = (
    overrideResponse?: PagedResponseVerplichtProgrammaBasic
) => {
    return http.get('*/verplicht-programma/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaLatestLineageIdGetMockHandler = (
    overrideResponse?: VerplichtProgrammaFull
) => {
    return http.get('*/verplicht-programma/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/verplicht-programma/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/verplicht-programma/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVerplichtProgrammaStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/verplicht-programma/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVerplichtProgrammaStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenValidGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenBasic
) => {
    return http.get('*/visies-algemeen/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenBasic
) => {
    return http.get('*/visies-algemeen/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenVersionObjectUuidGetMockHandler = (
    overrideResponse?: VisieAlgemeenFull
) => {
    return http.get('*/visies-algemeen/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisiesAlgemeenLatestLineageIdGetMockHandler = (
    overrideResponse?: VisieAlgemeenFull
) => {
    return http.get('*/visies-algemeen/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisiesAlgemeenLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getVisieAlgemeenStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/visie-algemeen/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getVisieAlgemeenStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectVisieAlgemeenLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseVisieAlgemeenExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectVisieAlgemeenLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMockHandler = (
    overrideResponse?: VisieAlgemeenUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/visie-algemeen/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/visie-algemeen/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/modules/:moduleId/object/visie-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectVisieAlgemeenActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/visie-algemeen/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectVisieAlgemeenActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMockHandler =
    (overrideResponse?: VisieAlgemeenFull) => {
        return http.get(
            '*/revisions/:moduleId/visie-algemeen/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getWerkingsgebiedenValidGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedBasic
) => {
    return http.get('*/werkingsgebieden/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenValidLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedBasic
) => {
    return http.get('*/werkingsgebieden/valid/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenValidLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenVersionObjectUuidGetMockHandler = (
    overrideResponse?: WerkingsgebiedFull
) => {
    return http.get('*/werkingsgebieden/version/:objectUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenVersionObjectUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedenLatestLineageIdGetMockHandler = (
    overrideResponse?: WerkingsgebiedFull
) => {
    return http.get('*/werkingsgebieden/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedenLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWerkingsgebiedStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/werkingsgebied/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWerkingsgebiedStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectWerkingsgebiedLineageIdGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebiedExtended
) => {
    return http.get(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectWerkingsgebiedLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMockHandler = (
    overrideResponse?: WerkingsgebiedUUID
) => {
    return http.patch(
        '*/modules/:moduleId/object/werkingsgebied/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/modules/:moduleId/object/werkingsgebied/latest/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/modules/:moduleId/object/werkingsgebied/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesObjectWerkingsgebiedActiveLineageIdGetMockHandler = (
    overrideResponse?: ActiveModuleObjectWrapper[]
) => {
    return http.get(
        '*/modules/object/werkingsgebied/active/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesObjectWerkingsgebiedActiveLineageIdGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMockHandler =
    (overrideResponse?: WerkingsgebiedFull) => {
        return http.get(
            '*/revisions/:moduleId/werkingsgebied/version/:objectUuid',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getWettelijkeTaakPostMockHandler = (
    overrideResponse?: WettelijkeTaakUUID
) => {
    return http.post('*/wettelijke-taak', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/wettelijke-taak/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete('*/wettelijke-taak/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLineageIdDeleteMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakValidGetMockHandler = (
    overrideResponse?: PagedResponseWettelijkeTaakBasic
) => {
    return http.get('*/wettelijke-taak/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakLatestLineageIdGetMockHandler = (
    overrideResponse?: WettelijkeTaakFull
) => {
    return http.get('*/wettelijke-taak/latest/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakLatestLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakRelationsLineageIdGetMockHandler = (
    overrideResponse?: ReadRelation[]
) => {
    return http.get('*/wettelijke-taak/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakRelationsLineageIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakRelationsLineageIdPutMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.put('*/wettelijke-taak/relations/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakRelationsLineageIdPutMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getWettelijkeTaakStaticLineageIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/wettelijke-taak/static/:lineageId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getWettelijkeTaakStaticLineageIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPlaygroundDoDsoModuleIdPostMockHandler = () => {
    return http.post('*/playground/do-dso/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export const getPlaygroundCheckGeoGetMockHandler = () => {
    return http.get('*/playground/check-geo', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export const getUsersGetMockHandler = (
    overrideResponse?: PagedResponseUser
) => {
    return http.get('*/users', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersPostMockHandler = (
    overrideResponse?: UserCreateResponse
) => {
    return http.post('*/users', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersSearchGetMockHandler = (
    overrideResponse?: PagedResponseUser
) => {
    return http.get('*/users/search', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersSearchGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidGetMockHandler = (overrideResponse?: User) => {
    return http.get('*/users/:userUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersUserUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/users/:userUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getUsersUserUuidPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getUsersUserUuidResetPasswordPostMockHandler = (
    overrideResponse?: ResetPasswordResponse
) => {
    return http.post('*/users/:userUuid/reset-password', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getUsersUserUuidResetPasswordPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSourceWerkingsgebiedenGetMockHandler = (
    overrideResponse?: PagedResponseWerkingsgebied
) => {
    return http.get('*/source-werkingsgebieden', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSourceWerkingsgebiedenGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchSourceGeoPostMockHandler = (
    overrideResponse?: PagedResponseGeoSearchResult
) => {
    return http.post('*/search/source-geo', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchSourceGeoPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchSourceGeometryPostMockHandler = (
    overrideResponse?: PagedResponseGeoSearchResult
) => {
    return http.post('*/search/source-geometry', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getSearchSourceGeometryPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchPostMockHandler = (
    overrideResponse?: PagedResponseSearchObject
) => {
    return http.post('*/search', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getSearchPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getSearchValidPostMockHandler = (
    overrideResponse?: PagedResponseValidSearchObject
) => {
    return http.post('*/search/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getSearchValidPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getFullGraphGetMockHandler = (
    overrideResponse?: GraphResponse
) => {
    return http.get('*/full-graph', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getFullGraphGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectGraphGetMockHandler = (
    overrideResponse?: GraphResponse
) => {
    return http.get('*/object-graph', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getObjectGraphGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsGetMockHandler = (
    overrideResponse?: PagedResponsePublicModuleShort
) => {
    return http.get('*/revisions', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getRevisionsGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getRevisionsModuleIdGetMockHandler = (
    overrideResponse?: PublicModuleOverview
) => {
    return http.get('*/revisions/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getRevisionsModuleIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesGetMockHandler = (
    overrideResponse?: PagedResponseModule
) => {
    return http.get('*/modules', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getModulesGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesPostMockHandler = (
    overrideResponse?: ModuleCreatedResponse
) => {
    return http.post('*/modules', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getModulesPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdGetMockHandler = (
    overrideResponse?: ModuleOverview
) => {
    return http.get('*/modules/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdActivatePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/activate', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdActivatePostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdCompletePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/complete', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdCompletePostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdClosePostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/close', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdClosePostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdStatusGetMockHandler = (
    overrideResponse?: ModuleStatus[]
) => {
    return http.get('*/modules/:moduleId/status', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdStatusGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdStatusPatchMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.patch('*/modules/:moduleId/status', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdStatusPatchMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdDiffGetMockHandler = () => {
    return http.get('*/modules/:moduleId/diff', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export const getModulesModuleIdAddNewObjectPostMockHandler = (
    overrideResponse?: NewObjectStaticResponse
) => {
    return http.post('*/modules/:moduleId/add-new-object', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdAddNewObjectPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdAddExistingObjectPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/modules/:moduleId/add-existing-object', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdAddExistingObjectPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesModuleIdObjectContextObjectTypeLineageIdGetMockHandler =
    (overrideResponse?: ModuleObjectContext) => {
        return http.get(
            '*/modules/:moduleId/object-context/:objectType/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectContextObjectTypeLineageIdGetMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdObjectContextObjectTypeLineageIdPostMockHandler =
    (overrideResponse?: ResponseOK) => {
        return http.post(
            '*/modules/:moduleId/object-context/:objectType/:lineageId',
            async () => {
                await delay(1000)
                return new HttpResponse(
                    JSON.stringify(
                        overrideResponse
                            ? overrideResponse
                            : getModulesModuleIdObjectContextObjectTypeLineageIdPostMock()
                    ),
                    {
                        status: 200,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }
                )
            }
        )
    }

export const getModulesModuleIdRemoveObjectTypeLineageIdDeleteMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.delete(
        '*/modules/:moduleId/remove/:objectType/:lineageId',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getModulesModuleIdRemoveObjectTypeLineageIdDeleteMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getModulesModuleIdSnapshotStatusIdGetMockHandler = (
    overrideResponse?: ModuleSnapshot
) => {
    return http.get('*/modules/:moduleId/snapshot/:statusId', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesModuleIdSnapshotStatusIdGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getModulesObjectsLatestGetMockHandler = (
    overrideResponse?: PagedResponseModuleObjectShortStatus
) => {
    return http.get('*/modules/objects/latest', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getModulesObjectsLatestGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectsValidCountGetMockHandler = (
    overrideResponse?: ObjectCount[]
) => {
    return http.get('*/objects/valid/count', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getObjectsValidCountGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getObjectsValidGetMockHandler = (
    overrideResponse?: PagedResponseGenericObjectShort
) => {
    return http.get('*/objects/valid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getObjectsValidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsGetMockHandler = (
    overrideResponse?: PagedResponsePublication
) => {
    return http.get('*/publications', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getPublicationsGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPostMockHandler = (
    overrideResponse?: Publication
) => {
    return http.post('*/publications', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getPublicationsPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidGetMockHandler = (
    overrideResponse?: Publication
) => {
    return http.get('*/publications/:publicationUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidPatchMockHandler = (
    overrideResponse?: Publication
) => {
    return http.patch('*/publications/:publicationUuid', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidPatchMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidBillsGetMockHandler = (
    overrideResponse?: PagedResponsePublicationBillShort
) => {
    return http.get('*/publications/:publicationUuid/bills', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidBillsGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidBillsPostMockHandler = (
    overrideResponse?: PublicationBill
) => {
    return http.post('*/publications/:publicationUuid/bills', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationsPublicationUuidBillsPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationsPublicationUuidBillsBillUuidGetMockHandler = (
    overrideResponse?: PublicationBill
) => {
    return http.get(
        '*/publications/:publicationUuid/bills/:billUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationsPublicationUuidBillsBillUuidGetMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationsPublicationUuidBillsBillUuidPatchMockHandler = (
    overrideResponse?: PublicationBill
) => {
    return http.patch(
        '*/publications/:publicationUuid/bills/:billUuid',
        async () => {
            await delay(1000)
            return new HttpResponse(
                JSON.stringify(
                    overrideResponse
                        ? overrideResponse
                        : getPublicationsPublicationUuidBillsBillUuidPatchMock()
                ),
                {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }
            )
        }
    )
}

export const getPublicationBillsBillUuidPackagesGetMockHandler = (
    overrideResponse?: PagedResponsePublicationPackage
) => {
    return http.get('*/publication-bills/:billUuid/packages', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationBillsBillUuidPackagesGetMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationBillsBillUuidPackagesPostMockHandler = (
    overrideResponse?: PublicationPackage
) => {
    return http.post('*/publication-bills/:billUuid/packages', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationBillsBillUuidPackagesPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationPackagesPackageUuidReportPostMockHandler = (
    overrideResponse?: PublicationPackageReport
) => {
    return http.post('*/publication-packages/:packageUuid/report', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getPublicationPackagesPackageUuidReportPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPublicationPackagesPackageUuidReportDownloadGetMockHandler =
    () => {
        return http.get(
            '*/publication-packages/:packageUuid/report/download',
            async () => {
                await delay(1000)
                return new HttpResponse(null, {
                    status: 200,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
            }
        )
    }

export const getPublicationPackagesPackageUuidDownloadGetMockHandler = () => {
    return http.get(
        '*/publication-packages/:packageUuid/download',
        async () => {
            await delay(1000)
            return new HttpResponse(null, {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            })
        }
    )
}

export const getLoginAccessTokenPostMockHandler = (
    overrideResponse?: AuthToken
) => {
    return http.post('*/login/access-token', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse
                    ? overrideResponse
                    : getLoginAccessTokenPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getPasswordResetPostMockHandler = (
    overrideResponse?: ResponseOK
) => {
    return http.post('*/password-reset', async () => {
        await delay(1000)
        return new HttpResponse(
            JSON.stringify(
                overrideResponse ? overrideResponse : getPasswordResetPostMock()
            ),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        )
    })
}

export const getHealthCheckHealthGetMockHandler = () => {
    return http.get('*/health', async () => {
        await delay(1000)
        return new HttpResponse(null, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}
export const getOmgevingsbeleidAPIMock = () => [
    getAmbitiesValidGetMockHandler(),
    getAmbitiesValidLineageIdGetMockHandler(),
    getAmbitiesVersionObjectUuidGetMockHandler(),
    getAmbitiesLatestLineageIdGetMockHandler(),
    getAmbitiesRelationsLineageIdGetMockHandler(),
    getAmbitiesRelationsLineageIdPutMockHandler(),
    getAmbitieStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectAmbitieLineageIdGetMockHandler(),
    getModulesModuleIdObjectAmbitieLineageIdPatchMockHandler(),
    getModulesModuleIdObjectAmbitieLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectAmbitieVersionObjectUuidGetMockHandler(),
    getModulesObjectAmbitieActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdAmbitieVersionObjectUuidGetMockHandler(),
    getBeleidsdoelenValidGetMockHandler(),
    getBeleidsdoelenValidLineageIdGetMockHandler(),
    getBeleidsdoelenVersionObjectUuidGetMockHandler(),
    getBeleidsdoelenLatestLineageIdGetMockHandler(),
    getBeleidsdoelenRelationsLineageIdGetMockHandler(),
    getBeleidsdoelenRelationsLineageIdPutMockHandler(),
    getBeleidsdoelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetMockHandler(),
    getModulesObjectBeleidsdoelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidsdoelVersionObjectUuidGetMockHandler(),
    getBeleidskeuzesValidGetMockHandler(),
    getBeleidskeuzesValidLineageIdGetMockHandler(),
    getBeleidskeuzesVersionObjectUuidGetMockHandler(),
    getBeleidskeuzesLatestLineageIdGetMockHandler(),
    getBeleidskeuzesRelationsLineageIdGetMockHandler(),
    getBeleidskeuzesRelationsLineageIdPutMockHandler(),
    getBeleidskeuzeStaticLineageIdPostMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdGetMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdPostMockHandler(),
    getBeleidskeuzeAcknowledgedRelationsLineageIdEditPostMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetMockHandler(),
    getModulesObjectsBeleidskeuzeActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidskeuzeVersionObjectUuidGetMockHandler(),
    getBeleidsregelsValidGetMockHandler(),
    getBeleidsregelsValidLineageIdGetMockHandler(),
    getBeleidsregelsVersionObjectUuidGetMockHandler(),
    getBeleidsregelsLatestLineageIdGetMockHandler(),
    getBeleidsregelsRelationsLineageIdGetMockHandler(),
    getBeleidsregelsRelationsLineageIdPutMockHandler(),
    getBeleidsregelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectBeleidsregelLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsregelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectBeleidsregelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectBeleidsregelVersionObjectUuidGetMockHandler(),
    getModulesObjectsBeleidsregelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdBeleidsregelVersionObjectUuidGetMockHandler(),
    getGebiedsprogrammasValidGetMockHandler(),
    getGebiedsprogrammasValidLineageIdGetMockHandler(),
    getGebiedsprogrammasVersionObjectUuidGetMockHandler(),
    getGebiedsprogrammasLatestLineageIdGetMockHandler(),
    getGebiedsprogrammasRelationsLineageIdGetMockHandler(),
    getGebiedsprogrammasRelationsLineageIdPutMockHandler(),
    getGebiedsprogrammasStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLineageIdGetMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLineageIdPatchMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectGebiedsprogrammasVersionObjectUuidGetMockHandler(),
    getModulesObjectsGebiedsprogrammaActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdGebiedsprogrammaVersionObjectUuidGetMockHandler(),
    getMaatregelenValidGetMockHandler(),
    getMaatregelenValidLineageIdGetMockHandler(),
    getMaatregelenVersionObjectUuidGetMockHandler(),
    getMaatregelenLatestLineageIdGetMockHandler(),
    getMaatregelenRelationsLineageIdGetMockHandler(),
    getMaatregelenRelationsLineageIdPutMockHandler(),
    getMaatregelStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectMaatregelLineageIdGetMockHandler(),
    getModulesModuleIdObjectMaatregelLineageIdPatchMockHandler(),
    getModulesModuleIdObjectMaatregelLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectMaatregelVersionObjectUuidGetMockHandler(),
    getModulesObjectsMaatregelActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdMaatregelVersionObjectUuidGetMockHandler(),
    getNationaalBelangPostMockHandler(),
    getNationaalBelangLineageIdPostMockHandler(),
    getNationaalBelangLineageIdDeleteMockHandler(),
    getNationaalBelangValidGetMockHandler(),
    getNationaalBelangLatestLineageIdGetMockHandler(),
    getNationaalBelangRelationsLineageIdGetMockHandler(),
    getNationaalBelangRelationsLineageIdPutMockHandler(),
    getNationaalBelangStaticLineageIdPostMockHandler(),
    getProgrammasAlgemeenValidGetMockHandler(),
    getProgrammasAlgemeenValidLineageIdGetMockHandler(),
    getProgrammasAlgemeenVersionObjectUuidGetMockHandler(),
    getProgrammasAlgemeenLatestLineageIdGetMockHandler(),
    getProgrammaAlgemeenStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLineageIdGetMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLineageIdPatchMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectProgrammaAlgemeenVersionObjectUuidGetMockHandler(),
    getModulesObjectProgrammaAlgemeenActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdProgrammaAlgemeenVersionObjectUuidGetMockHandler(),
    getVerplichtProgrammaPostMockHandler(),
    getVerplichtProgrammaLineageIdPostMockHandler(),
    getVerplichtProgrammaLineageIdDeleteMockHandler(),
    getVerplichtProgrammaValidGetMockHandler(),
    getVerplichtProgrammaLatestLineageIdGetMockHandler(),
    getVerplichtProgrammaRelationsLineageIdGetMockHandler(),
    getVerplichtProgrammaRelationsLineageIdPutMockHandler(),
    getVerplichtProgrammaStaticLineageIdPostMockHandler(),
    getVisiesAlgemeenValidGetMockHandler(),
    getVisiesAlgemeenValidLineageIdGetMockHandler(),
    getVisiesAlgemeenVersionObjectUuidGetMockHandler(),
    getVisiesAlgemeenLatestLineageIdGetMockHandler(),
    getVisieAlgemeenStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLineageIdGetMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLineageIdPatchMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectVisieAlgemeenVersionObjectUuidGetMockHandler(),
    getModulesObjectVisieAlgemeenActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdVisieAlgemeenVersionObjectUuidGetMockHandler(),
    getWerkingsgebiedenValidGetMockHandler(),
    getWerkingsgebiedenValidLineageIdGetMockHandler(),
    getWerkingsgebiedenVersionObjectUuidGetMockHandler(),
    getWerkingsgebiedenLatestLineageIdGetMockHandler(),
    getWerkingsgebiedStaticLineageIdPostMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLineageIdGetMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLineageIdPatchMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedLatestLineageIdGetMockHandler(),
    getModulesModuleIdObjectWerkingsgebiedVersionObjectUuidGetMockHandler(),
    getModulesObjectWerkingsgebiedActiveLineageIdGetMockHandler(),
    getRevisionsModuleIdWerkingsgebiedVersionObjectUuidGetMockHandler(),
    getWettelijkeTaakPostMockHandler(),
    getWettelijkeTaakLineageIdPostMockHandler(),
    getWettelijkeTaakLineageIdDeleteMockHandler(),
    getWettelijkeTaakValidGetMockHandler(),
    getWettelijkeTaakLatestLineageIdGetMockHandler(),
    getWettelijkeTaakRelationsLineageIdGetMockHandler(),
    getWettelijkeTaakRelationsLineageIdPutMockHandler(),
    getWettelijkeTaakStaticLineageIdPostMockHandler(),
    getPlaygroundDoDsoModuleIdPostMockHandler(),
    getPlaygroundCheckGeoGetMockHandler(),
    getUsersGetMockHandler(),
    getUsersPostMockHandler(),
    getUsersSearchGetMockHandler(),
    getUsersUserUuidGetMockHandler(),
    getUsersUserUuidPostMockHandler(),
    getUsersUserUuidResetPasswordPostMockHandler(),
    getSourceWerkingsgebiedenGetMockHandler(),
    getSearchSourceGeoPostMockHandler(),
    getSearchSourceGeometryPostMockHandler(),
    getSearchPostMockHandler(),
    getSearchValidPostMockHandler(),
    getFullGraphGetMockHandler(),
    getObjectGraphGetMockHandler(),
    getRevisionsGetMockHandler(),
    getRevisionsModuleIdGetMockHandler(),
    getModulesGetMockHandler(),
    getModulesPostMockHandler(),
    getModulesModuleIdGetMockHandler(),
    getModulesModuleIdPostMockHandler(),
    getModulesModuleIdActivatePostMockHandler(),
    getModulesModuleIdCompletePostMockHandler(),
    getModulesModuleIdClosePostMockHandler(),
    getModulesModuleIdStatusGetMockHandler(),
    getModulesModuleIdStatusPatchMockHandler(),
    getModulesModuleIdDiffGetMockHandler(),
    getModulesModuleIdAddNewObjectPostMockHandler(),
    getModulesModuleIdAddExistingObjectPostMockHandler(),
    getModulesModuleIdObjectContextObjectTypeLineageIdGetMockHandler(),
    getModulesModuleIdObjectContextObjectTypeLineageIdPostMockHandler(),
    getModulesModuleIdRemoveObjectTypeLineageIdDeleteMockHandler(),
    getModulesModuleIdSnapshotStatusIdGetMockHandler(),
    getModulesObjectsLatestGetMockHandler(),
    getObjectsValidCountGetMockHandler(),
    getObjectsValidGetMockHandler(),
    getPublicationsGetMockHandler(),
    getPublicationsPostMockHandler(),
    getPublicationsPublicationUuidGetMockHandler(),
    getPublicationsPublicationUuidPatchMockHandler(),
    getPublicationsPublicationUuidBillsGetMockHandler(),
    getPublicationsPublicationUuidBillsPostMockHandler(),
    getPublicationsPublicationUuidBillsBillUuidGetMockHandler(),
    getPublicationsPublicationUuidBillsBillUuidPatchMockHandler(),
    getPublicationBillsBillUuidPackagesGetMockHandler(),
    getPublicationBillsBillUuidPackagesPostMockHandler(),
    getPublicationPackagesPackageUuidReportPostMockHandler(),
    getPublicationPackagesPackageUuidReportDownloadGetMockHandler(),
    getPublicationPackagesPackageUuidDownloadGetMockHandler(),
    getLoginAccessTokenPostMockHandler(),
    getPasswordResetPostMockHandler(),
    getHealthCheckHealthGetMockHandler(),
]
