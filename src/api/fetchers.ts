/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 1.1.17
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from '@tanstack/react-query'

import type {
    Token,
    HTTPValidationError,
    BodyLoginAccessToken,
    PasswordUpdate,
    Ambitie,
    ReadAmbitiesParams,
    AmbitieCreate,
    ReadAmbitieLineageParams,
    AmbitieUpdate,
    ReadValidAmbitiesParams,
    ReadValidAmbitieLineageParams,
    Belang,
    ReadBelangenParams,
    BelangCreate,
    BelangUpdate,
    ReadValidBelangenParams,
    ReadValidBelangLineageParams,
    BeleidskeuzeListable,
    ReadBeleidskeuzesParams,
    Beleidskeuze,
    BeleidskeuzeCreate,
    ReadBeleidskeuzeLineageParams,
    BeleidskeuzeUpdate,
    ReadValidBeleidskeuzesParams,
    ReadValidBeleidskeuzeLineageParams,
    Beleidsdoel,
    ReadBeleidsdoelenParams,
    BeleidsdoelCreate,
    BeleidsdoelUpdate,
    ReadValidBeleidsdoelenParams,
    ReadValidBeleidsdoelLineageParams,
    Beleidsmodule,
    ReadBeleidsmodulesParams,
    BeleidsmoduleCreate,
    BeleidsmoduleUpdate,
    ReadValidBeleidsmodulesParams,
    ReadValidBeleidsmoduleLineageParams,
    Beleidsprestatie,
    ReadBeleidsprestatiesParams,
    BeleidsprestatieCreate,
    BeleidsprestatieUpdate,
    ReadValidBeleidsprestatiesParams,
    ReadValidBeleidsprestatieLineageParams,
    Beleidsrelatie,
    ReadBeleidsrelatiesParams,
    BeleidsrelatieCreate,
    BeleidsrelatieUpdate,
    ReadValidBeleidsrelatiesParams,
    ReadValidBeleidsrelatieLineageParams,
    Beleidsregel,
    ReadBeleidsregelsParams,
    BeleidsregelCreate,
    BeleidsregelUpdate,
    ReadValidBeleidsregelsParams,
    ReadValidBeleidsregelLineageParams,
    LatestVersionInline,
    GraphView,
    GebruikerInline,
    Gebiedsprogramma,
    ReadGebiedsprogrammasParams,
    GebiedsprogrammaCreate,
    GebiedsprogrammaUpdate,
    ReadValidGebiedsprogrammasParams,
    ReadValidGebiedsprogrammaLineageParams,
    SearchResultWrapper,
    SearchParams,
    GeoSearchParams,
    Thema,
    ReadThemasParams,
    ThemaCreate,
    ThemaUpdate,
    ReadValidThemasParams,
    ReadValidThemaLineageParams,
    Verordening,
    ReadVerordeningParams,
    VerordeningCreate,
    VerordeningUpdate,
    ReadValidVerordeningParams,
    ReadValidVerordeningLineageParams,
    Verordeningstructuur,
    ReadVerordeningstructurenParams,
    VerordeningstructuurCreate,
    VerordeningstructuurUpdate,
    ReadValidVerordeningstructurenParams,
    ReadValidVerordeningstructuurLineageParams,
    MaatregelListable,
    ReadMaatregelenParams,
    Maatregel,
    MaatregelCreate,
    MaatregelUpdate,
    ReadValidMaatregelenParams,
    ReadValidMaatregelLineageParams,
    Werkingsgebied,
    ReadWerkingsgebiedParams,
    WerkingsgebiedCreate,
    WerkingsgebiedUpdate,
    ReadValidWerkingsgebiedParams,
    ReadValidWerkingsgebiedLineageParams,
} from './fetchers.schemas'
import { customInstance } from './instance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Health Request
 */
export const healthRequestHealthGet = (signal?: AbortSignal) => {
    return customInstance<boolean>({ url: `/health/`, method: 'get', signal })
}

export const getHealthRequestHealthGetQueryKey = () => [`/health/`]

export type HealthRequestHealthGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof healthRequestHealthGet>>
>
export type HealthRequestHealthGetQueryError = unknown

export const useHealthRequestHealthGet = <
    TData = Awaited<ReturnType<typeof healthRequestHealthGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof healthRequestHealthGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getHealthRequestHealthGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof healthRequestHealthGet>>
    > = ({ signal }) => healthRequestHealthGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof healthRequestHealthGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Health Request
 */
export const healthRequestHealthHead = (signal?: AbortSignal) => {
    return customInstance<boolean>({ url: `/health/`, method: 'head', signal })
}

export type HealthRequestHealthHeadMutationResult = NonNullable<
    Awaited<ReturnType<typeof healthRequestHealthHead>>
>

export type HealthRequestHealthHeadMutationError = unknown

export const useHealthRequestHealthHead = <
    TError = unknown,
    TVariables = void,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TError,
        TVariables,
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TVariables
    > = () => {
        return healthRequestHealthHead()
    }

    return useMutation<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TError,
        TVariables,
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * OAuth2 compatible token login, get an access token for future requests
 * @summary Login Access Token
 */
export const loginAccessToken = (
    bodyLoginAccessToken: BodyLoginAccessToken
) => {
    const formUrlEncoded = new URLSearchParams()
    if (bodyLoginAccessToken.grant_type !== undefined) {
        formUrlEncoded.append('grant_type', bodyLoginAccessToken.grant_type)
    }
    formUrlEncoded.append('username', bodyLoginAccessToken.username)
    formUrlEncoded.append('password', bodyLoginAccessToken.password)
    if (bodyLoginAccessToken.scope !== undefined) {
        formUrlEncoded.append('scope', bodyLoginAccessToken.scope)
    }
    if (bodyLoginAccessToken.client_id !== undefined) {
        formUrlEncoded.append('client_id', bodyLoginAccessToken.client_id)
    }
    if (bodyLoginAccessToken.client_secret !== undefined) {
        formUrlEncoded.append(
            'client_secret',
            bodyLoginAccessToken.client_secret
        )
    }

    return customInstance<Token>({
        url: `/v0.1/login/access-token`,
        method: 'post',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded,
    })
}

export type LoginAccessTokenMutationResult = NonNullable<
    Awaited<ReturnType<typeof loginAccessToken>>
>
export type LoginAccessTokenMutationBody = BodyLoginAccessToken
export type LoginAccessTokenMutationError = HTTPValidationError

export const useLoginAccessToken = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof loginAccessToken>>,
        TError,
        { data: BodyLoginAccessToken },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof loginAccessToken>>,
        { data: BodyLoginAccessToken }
    > = props => {
        const { data } = props ?? {}

        return loginAccessToken(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof loginAccessToken>>,
        TError,
        { data: BodyLoginAccessToken },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Password Reset
 */
export const passwordReset = (passwordUpdate: PasswordUpdate) => {
    return customInstance<unknown>({
        url: `/v0.1/password-reset`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordUpdate,
    })
}

export type PasswordResetMutationResult = NonNullable<
    Awaited<ReturnType<typeof passwordReset>>
>
export type PasswordResetMutationBody = PasswordUpdate
export type PasswordResetMutationError = HTTPValidationError

export const usePasswordReset = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof passwordReset>>,
        TError,
        { data: PasswordUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof passwordReset>>,
        { data: PasswordUpdate }
    > = props => {
        const { data } = props ?? {}

        return passwordReset(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof passwordReset>>,
        TError,
        { data: PasswordUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the ambities lineages and shows the latests object for each
 * @summary Read Ambities
 */
export const readAmbities = (
    params?: ReadAmbitiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadAmbitiesQueryKey = (params?: ReadAmbitiesParams) => [
    `/v0.1/ambities`,
    ...(params ? [params] : []),
]

export type ReadAmbitiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readAmbities>>
>
export type ReadAmbitiesQueryError = HTTPValidationError

export const useReadAmbities = <
    TData = Awaited<ReturnType<typeof readAmbities>>,
    TError = HTTPValidationError
>(
    params?: ReadAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readAmbities>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadAmbitiesQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAmbities>>> = ({
        signal,
    }) => readAmbities(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readAmbities>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new ambities lineage
 * @summary Create Ambitie
 */
export const createAmbitie = (ambitieCreate: AmbitieCreate) => {
    return customInstance<Ambitie>({
        url: `/v0.1/ambities`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieCreate,
    })
}

export type CreateAmbitieMutationResult = NonNullable<
    Awaited<ReturnType<typeof createAmbitie>>
>
export type CreateAmbitieMutationBody = AmbitieCreate
export type CreateAmbitieMutationError = HTTPValidationError

export const useCreateAmbitie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createAmbitie>>,
        TError,
        { data: AmbitieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createAmbitie>>,
        { data: AmbitieCreate }
    > = props => {
        const { data } = props ?? {}

        return createAmbitie(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createAmbitie>>,
        TError,
        { data: AmbitieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the ambities versions by lineage
 * @summary Read Ambitie Lineage
 */
export const readAmbitieLineage = (
    lineageId: number,
    params?: ReadAmbitieLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/ambities/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadAmbitieLineageQueryKey = (
    lineageId: number,
    params?: ReadAmbitieLineageParams
) => [`/v0.1/ambities/${lineageId}`, ...(params ? [params] : [])]

export type ReadAmbitieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readAmbitieLineage>>
>
export type ReadAmbitieLineageQueryError = HTTPValidationError

export const useReadAmbitieLineage = <
    TData = Awaited<ReturnType<typeof readAmbitieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadAmbitieLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readAmbitieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadAmbitieLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readAmbitieLineage>>
    > = ({ signal }) => readAmbitieLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readAmbitieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new ambities to a lineage
 * @summary Update Ambitie
 */
export const updateAmbitie = (
    lineageId: number,
    ambitieUpdate: AmbitieUpdate
) => {
    return customInstance<Ambitie>({
        url: `/v0.1/ambities/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieUpdate,
    })
}

export type UpdateAmbitieMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateAmbitie>>
>
export type UpdateAmbitieMutationBody = AmbitieUpdate
export type UpdateAmbitieMutationError = HTTPValidationError

export const useUpdateAmbitie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateAmbitie>>,
        TError,
        { lineageId: number; data: AmbitieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateAmbitie>>,
        { lineageId: number; data: AmbitieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateAmbitie(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateAmbitie>>,
        TError,
        { lineageId: number; data: AmbitieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of ambities.
 * @summary Changes Ambities
 */
export const changesAmbities = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/ambities/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesAmbitiesQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/ambities/${oldUuid}/${newUuid}`]

export type ChangesAmbitiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesAmbities>>
>
export type ChangesAmbitiesQueryError = HTTPValidationError

export const useChangesAmbities = <
    TData = Awaited<ReturnType<typeof changesAmbities>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesAmbities>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getChangesAmbitiesQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesAmbities>>
    > = ({ signal }) => changesAmbities(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesAmbities>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the ambities lineages and shows the latests valid object for each.
 * @summary Read Valid Ambities
 */
export const readValidAmbities = (
    params?: ReadValidAmbitiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/valid/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidAmbitiesQueryKey = (
    params?: ReadValidAmbitiesParams
) => [`/v0.1/valid/ambities`, ...(params ? [params] : [])]

export type ReadValidAmbitiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidAmbities>>
>
export type ReadValidAmbitiesQueryError = HTTPValidationError

export const useReadValidAmbities = <
    TData = Awaited<ReturnType<typeof readValidAmbities>>,
    TError = HTTPValidationError
>(
    params?: ReadValidAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidAmbities>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidAmbitiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidAmbities>>
    > = ({ signal }) => readValidAmbities(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidAmbities>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the ambities in this lineage that are valid
 * @summary Read Valid Ambitie Lineage
 */
export const readValidAmbitieLineage = (
    lineageId: number,
    params?: ReadValidAmbitieLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/valid/ambities/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidAmbitieLineageQueryKey = (
    lineageId: number,
    params?: ReadValidAmbitieLineageParams
) => [`/v0.1/valid/ambities/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidAmbitieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidAmbitieLineage>>
>
export type ReadValidAmbitieLineageQueryError = HTTPValidationError

export const useReadValidAmbitieLineage = <
    TData = Awaited<ReturnType<typeof readValidAmbitieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidAmbitieLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidAmbitieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidAmbitieLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidAmbitieLineage>>
    > = ({ signal }) => readValidAmbitieLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidAmbitieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readAmbitieVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie>({
        url: `/v0.1/version/ambities/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadAmbitieVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/ambities/${objectUuid}`,
]

export type ReadAmbitieVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readAmbitieVersion>>
>
export type ReadAmbitieVersionQueryError = HTTPValidationError

export const useReadAmbitieVersion = <
    TData = Awaited<ReturnType<typeof readAmbitieVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readAmbitieVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadAmbitieVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readAmbitieVersion>>
    > = ({ signal }) => readAmbitieVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readAmbitieVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen lineages and shows the latests object for each
 * @summary Read Belangen
 */
export const readBelangen = (
    params?: ReadBelangenParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBelangenQueryKey = (params?: ReadBelangenParams) => [
    `/v0.1/belangen`,
    ...(params ? [params] : []),
]

export type ReadBelangenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBelangen>>
>
export type ReadBelangenQueryError = HTTPValidationError

export const useReadBelangen = <
    TData = Awaited<ReturnType<typeof readBelangen>>,
    TError = HTTPValidationError
>(
    params?: ReadBelangenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBelangen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadBelangenQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readBelangen>>> = ({
        signal,
    }) => readBelangen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBelangen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new belangen lineage
 * @summary Create Belang
 */
export const createBelang = (belangCreate: BelangCreate) => {
    return customInstance<Belang>({
        url: `/v0.1/belangen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: belangCreate,
    })
}

export type CreateBelangMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBelang>>
>
export type CreateBelangMutationBody = BelangCreate
export type CreateBelangMutationError = HTTPValidationError

export const useCreateBelang = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBelang>>,
        TError,
        { data: BelangCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBelang>>,
        { data: BelangCreate }
    > = props => {
        const { data } = props ?? {}

        return createBelang(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBelang>>,
        TError,
        { data: BelangCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the belangen versions by lineage
 * @summary Read Belang Lineage
 */
export const readBelangLineage = (lineageId: number, signal?: AbortSignal) => {
    return customInstance<Belang[]>({
        url: `/v0.1/belangen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBelangLineageQueryKey = (lineageId: number) => [
    `/v0.1/belangen/${lineageId}`,
]

export type ReadBelangLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBelangLineage>>
>
export type ReadBelangLineageQueryError = HTTPValidationError

export const useReadBelangLineage = <
    TData = Awaited<ReturnType<typeof readBelangLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBelangLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBelangLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBelangLineage>>
    > = ({ signal }) => readBelangLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBelangLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new belangen to a lineage
 * @summary Update Belang
 */
export const updateBelang = (lineageId: number, belangUpdate: BelangUpdate) => {
    return customInstance<Belang>({
        url: `/v0.1/belangen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: belangUpdate,
    })
}

export type UpdateBelangMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBelang>>
>
export type UpdateBelangMutationBody = BelangUpdate
export type UpdateBelangMutationError = HTTPValidationError

export const useUpdateBelang = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBelang>>,
        TError,
        { lineageId: number; data: BelangUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBelang>>,
        { lineageId: number; data: BelangUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBelang(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBelang>>,
        TError,
        { lineageId: number; data: BelangUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of belangen.
 * @summary Changes Belangen
 */
export const changesBelangen = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/belangen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBelangenQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/belangen/${oldUuid}/${newUuid}`]

export type ChangesBelangenQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBelangen>>
>
export type ChangesBelangenQueryError = HTTPValidationError

export const useChangesBelangen = <
    TData = Awaited<ReturnType<typeof changesBelangen>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBelangen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getChangesBelangenQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBelangen>>
    > = ({ signal }) => changesBelangen(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBelangen>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen lineages and shows the latests valid object for each.
 * @summary Read Valid Belangen
 */
export const readValidBelangen = (
    params?: ReadValidBelangenParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/valid/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBelangenQueryKey = (
    params?: ReadValidBelangenParams
) => [`/v0.1/valid/belangen`, ...(params ? [params] : [])]

export type ReadValidBelangenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBelangen>>
>
export type ReadValidBelangenQueryError = HTTPValidationError

export const useReadValidBelangen = <
    TData = Awaited<ReturnType<typeof readValidBelangen>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBelangenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBelangen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBelangenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBelangen>>
    > = ({ signal }) => readValidBelangen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBelangen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen in this lineage that are valid
 * @summary Read Valid Belang Lineage
 */
export const readValidBelangLineage = (
    lineageId: number,
    params?: ReadValidBelangLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/valid/belangen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBelangLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBelangLineageParams
) => [`/v0.1/valid/belangen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBelangLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBelangLineage>>
>
export type ReadValidBelangLineageQueryError = HTTPValidationError

export const useReadValidBelangLineage = <
    TData = Awaited<ReturnType<typeof readValidBelangLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBelangLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBelangLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBelangLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBelangLineage>>
    > = ({ signal }) => readValidBelangLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBelangLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBelangVersion = (objectUuid: string, signal?: AbortSignal) => {
    return customInstance<Belang>({
        url: `/v0.1/version/belangen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBelangVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/belangen/${objectUuid}`,
]

export type ReadBelangVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBelangVersion>>
>
export type ReadBelangVersionQueryError = HTTPValidationError

export const useReadBelangVersion = <
    TData = Awaited<ReturnType<typeof readBelangVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBelangVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBelangVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBelangVersion>>
    > = ({ signal }) => readBelangVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBelangVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes lineages and shows the latests object for each
 * @summary Read Beleidskeuzes
 */
export const readBeleidskeuzes = (
    params?: ReadBeleidskeuzesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeListable[]>({
        url: `/v0.1/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidskeuzesQueryKey = (
    params?: ReadBeleidskeuzesParams
) => [`/v0.1/beleidskeuzes`, ...(params ? [params] : [])]

export type ReadBeleidskeuzesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidskeuzes>>
>
export type ReadBeleidskeuzesQueryError = HTTPValidationError

export const useReadBeleidskeuzes = <
    TData = Awaited<ReturnType<typeof readBeleidskeuzes>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidskeuzes>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidskeuzes>>
    > = ({ signal }) => readBeleidskeuzes(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidskeuzes>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidskeuzes lineage
 * @summary Create Beleidskeuze
 */
export const createBeleidskeuze = (beleidskeuzeCreate: BeleidskeuzeCreate) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/beleidskeuzes`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeCreate,
    })
}

export type CreateBeleidskeuzeMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidskeuze>>
>
export type CreateBeleidskeuzeMutationBody = BeleidskeuzeCreate
export type CreateBeleidskeuzeMutationError = HTTPValidationError

export const useCreateBeleidskeuze = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidskeuze>>,
        TError,
        { data: BeleidskeuzeCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidskeuze>>,
        { data: BeleidskeuzeCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidskeuze(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidskeuze>>,
        TError,
        { data: BeleidskeuzeCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidskeuzes versions by lineage
 * @summary Read Beleidskeuze Lineage
 */
export const readBeleidskeuzeLineage = (
    lineageId: number,
    params?: ReadBeleidskeuzeLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze[]>({
        url: `/v0.1/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidskeuzeLineageQueryKey = (
    lineageId: number,
    params?: ReadBeleidskeuzeLineageParams
) => [`/v0.1/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export type ReadBeleidskeuzeLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidskeuzeLineage>>
>
export type ReadBeleidskeuzeLineageQueryError = HTTPValidationError

export const useReadBeleidskeuzeLineage = <
    TData = Awaited<ReturnType<typeof readBeleidskeuzeLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadBeleidskeuzeLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidskeuzeLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidskeuzeLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidskeuzeLineage>>
    > = ({ signal }) => readBeleidskeuzeLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidskeuzeLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Update latest beleidskeuze from a lineage
 * @summary Update Beleidskeuze
 */
export const updateBeleidskeuze = (
    lineageId: number,
    beleidskeuzeUpdate: BeleidskeuzeUpdate
) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/beleidskeuzes/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeUpdate,
    })
}

export type UpdateBeleidskeuzeMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidskeuze>>
>
export type UpdateBeleidskeuzeMutationBody = BeleidskeuzeUpdate
export type UpdateBeleidskeuzeMutationError = HTTPValidationError

export const useUpdateBeleidskeuze = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidskeuze>>,
        TError,
        { lineageId: number; data: BeleidskeuzeUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidskeuze>>,
        { lineageId: number; data: BeleidskeuzeUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidskeuze(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidskeuze>>,
        TError,
        { lineageId: number; data: BeleidskeuzeUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidskeuzes.
 * @summary Changes Beleidskeuzes
 */
export const changesBeleidskeuzes = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidskeuzes/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidskeuzesQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidskeuzes/${oldUuid}/${newUuid}`]

export type ChangesBeleidskeuzesQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidskeuzes>>
>
export type ChangesBeleidskeuzesQueryError = HTTPValidationError

export const useChangesBeleidskeuzes = <
    TData = Awaited<ReturnType<typeof changesBeleidskeuzes>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidskeuzes>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidskeuzesQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidskeuzes>>
    > = ({ signal }) => changesBeleidskeuzes(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidskeuzes>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidskeuzes
 */
export const readValidBeleidskeuzes = (
    params?: ReadValidBeleidskeuzesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeListable[]>({
        url: `/v0.1/valid/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidskeuzesQueryKey = (
    params?: ReadValidBeleidskeuzesParams
) => [`/v0.1/valid/beleidskeuzes`, ...(params ? [params] : [])]

export type ReadValidBeleidskeuzesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidskeuzes>>
>
export type ReadValidBeleidskeuzesQueryError = HTTPValidationError

export const useReadValidBeleidskeuzes = <
    TData = Awaited<ReturnType<typeof readValidBeleidskeuzes>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidskeuzes>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidskeuzes>>
    > = ({ signal }) => readValidBeleidskeuzes(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidskeuzes>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes in this lineage that are valid
 * @summary Read Valid Beleidskeuze Lineage
 */
export const readValidBeleidskeuzeLineage = (
    lineageId: number,
    params?: ReadValidBeleidskeuzeLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze[]>({
        url: `/v0.1/valid/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidskeuzeLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidskeuzeLineageParams
) => [`/v0.1/valid/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidskeuzeLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidskeuzeLineage>>
>
export type ReadValidBeleidskeuzeLineageQueryError = HTTPValidationError

export const useReadValidBeleidskeuzeLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidskeuzeLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidskeuzeLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidskeuzeLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidskeuzeLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidskeuzeLineage>>
    > = ({ signal }) => readValidBeleidskeuzeLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidskeuzeLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidskeuzeVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/version/beleidskeuzes/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidskeuzeVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidskeuzes/${objectUuid}`,
]

export type ReadBeleidskeuzeVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidskeuzeVersion>>
>
export type ReadBeleidskeuzeVersionQueryError = HTTPValidationError

export const useReadBeleidskeuzeVersion = <
    TData = Awaited<ReturnType<typeof readBeleidskeuzeVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidskeuzeVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidskeuzeVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidskeuzeVersion>>
    > = ({ signal }) => readBeleidskeuzeVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidskeuzeVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen lineages and shows the latests object for each
 * @summary Read Beleidsdoelen
 */
export const readBeleidsdoelen = (
    params?: ReadBeleidsdoelenParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsdoelenQueryKey = (
    params?: ReadBeleidsdoelenParams
) => [`/v0.1/beleidsdoelen`, ...(params ? [params] : [])]

export type ReadBeleidsdoelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsdoelen>>
>
export type ReadBeleidsdoelenQueryError = HTTPValidationError

export const useReadBeleidsdoelen = <
    TData = Awaited<ReturnType<typeof readBeleidsdoelen>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsdoelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsdoelen>>
    > = ({ signal }) => readBeleidsdoelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsdoelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsdoelen lineage
 * @summary Create Beleidsdoel
 */
export const createBeleidsdoel = (beleidsdoelCreate: BeleidsdoelCreate) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/beleidsdoelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelCreate,
    })
}

export type CreateBeleidsdoelMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsdoel>>
>
export type CreateBeleidsdoelMutationBody = BeleidsdoelCreate
export type CreateBeleidsdoelMutationError = HTTPValidationError

export const useCreateBeleidsdoel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsdoel>>,
        TError,
        { data: BeleidsdoelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsdoel>>,
        { data: BeleidsdoelCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsdoel(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsdoel>>,
        TError,
        { data: BeleidsdoelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsdoelen versions by lineage
 * @summary Read Beleidsdoel Lineage
 */
export const readBeleidsdoelLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/beleidsdoelen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsdoelLineageQueryKey = (lineageId: number) => [
    `/v0.1/beleidsdoelen/${lineageId}`,
]

export type ReadBeleidsdoelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsdoelLineage>>
>
export type ReadBeleidsdoelLineageQueryError = HTTPValidationError

export const useReadBeleidsdoelLineage = <
    TData = Awaited<ReturnType<typeof readBeleidsdoelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsdoelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsdoelLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsdoelLineage>>
    > = ({ signal }) => readBeleidsdoelLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsdoelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsdoelen to a lineage
 * @summary Update Beleidsdoel
 */
export const updateBeleidsdoel = (
    lineageId: number,
    beleidsdoelUpdate: BeleidsdoelUpdate
) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/beleidsdoelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelUpdate,
    })
}

export type UpdateBeleidsdoelMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidsdoel>>
>
export type UpdateBeleidsdoelMutationBody = BeleidsdoelUpdate
export type UpdateBeleidsdoelMutationError = HTTPValidationError

export const useUpdateBeleidsdoel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidsdoel>>,
        TError,
        { lineageId: number; data: BeleidsdoelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidsdoel>>,
        { lineageId: number; data: BeleidsdoelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsdoel(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidsdoel>>,
        TError,
        { lineageId: number; data: BeleidsdoelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsdoelen.
 * @summary Changes Beleidsdoelen
 */
export const changesBeleidsdoelen = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsdoelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsdoelenQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidsdoelen/${oldUuid}/${newUuid}`]

export type ChangesBeleidsdoelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidsdoelen>>
>
export type ChangesBeleidsdoelenQueryError = HTTPValidationError

export const useChangesBeleidsdoelen = <
    TData = Awaited<ReturnType<typeof changesBeleidsdoelen>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidsdoelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsdoelenQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidsdoelen>>
    > = ({ signal }) => changesBeleidsdoelen(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidsdoelen>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsdoelen
 */
export const readValidBeleidsdoelen = (
    params?: ReadValidBeleidsdoelenParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/valid/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsdoelenQueryKey = (
    params?: ReadValidBeleidsdoelenParams
) => [`/v0.1/valid/beleidsdoelen`, ...(params ? [params] : [])]

export type ReadValidBeleidsdoelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsdoelen>>
>
export type ReadValidBeleidsdoelenQueryError = HTTPValidationError

export const useReadValidBeleidsdoelen = <
    TData = Awaited<ReturnType<typeof readValidBeleidsdoelen>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsdoelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsdoelen>>
    > = ({ signal }) => readValidBeleidsdoelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsdoelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen in this lineage that are valid
 * @summary Read Valid Beleidsdoel Lineage
 */
export const readValidBeleidsdoelLineage = (
    lineageId: number,
    params?: ReadValidBeleidsdoelLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/valid/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsdoelLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidsdoelLineageParams
) => [`/v0.1/valid/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsdoelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsdoelLineage>>
>
export type ReadValidBeleidsdoelLineageQueryError = HTTPValidationError

export const useReadValidBeleidsdoelLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidsdoelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsdoelLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsdoelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsdoelLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsdoelLineage>>
    > = ({ signal }) => readValidBeleidsdoelLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsdoelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidsdoelVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/version/beleidsdoelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsdoelVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidsdoelen/${objectUuid}`,
]

export type ReadBeleidsdoelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsdoelVersion>>
>
export type ReadBeleidsdoelVersionQueryError = HTTPValidationError

export const useReadBeleidsdoelVersion = <
    TData = Awaited<ReturnType<typeof readBeleidsdoelVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsdoelVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsdoelVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsdoelVersion>>
    > = ({ signal }) => readBeleidsdoelVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsdoelVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsmodules lineages and shows the latests object for each
 * @summary Read Beleidsmodules
 */
export const readBeleidsmodules = (
    params?: ReadBeleidsmodulesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsmodulesQueryKey = (
    params?: ReadBeleidsmodulesParams
) => [`/v0.1/beleidsmodules`, ...(params ? [params] : [])]

export type ReadBeleidsmodulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsmodules>>
>
export type ReadBeleidsmodulesQueryError = HTTPValidationError

export const useReadBeleidsmodules = <
    TData = Awaited<ReturnType<typeof readBeleidsmodules>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsmodules>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsmodules>>
    > = ({ signal }) => readBeleidsmodules(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsmodules>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsmodules lineage
 * @summary Create Beleidsmodule
 */
export const createBeleidsmodule = (
    beleidsmoduleCreate: BeleidsmoduleCreate
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/beleidsmodules`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmoduleCreate,
    })
}

export type CreateBeleidsmoduleMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsmodule>>
>
export type CreateBeleidsmoduleMutationBody = BeleidsmoduleCreate
export type CreateBeleidsmoduleMutationError = HTTPValidationError

export const useCreateBeleidsmodule = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsmodule>>,
        TError,
        { data: BeleidsmoduleCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsmodule>>,
        { data: BeleidsmoduleCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsmodule(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsmodule>>,
        TError,
        { data: BeleidsmoduleCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsmodules versions by lineage
 * @summary Read Beleidsmodule Lineage
 */
export const readBeleidsmoduleLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/beleidsmodules/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsmoduleLineageQueryKey = (lineageId: number) => [
    `/v0.1/beleidsmodules/${lineageId}`,
]

export type ReadBeleidsmoduleLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsmoduleLineage>>
>
export type ReadBeleidsmoduleLineageQueryError = HTTPValidationError

export const useReadBeleidsmoduleLineage = <
    TData = Awaited<ReturnType<typeof readBeleidsmoduleLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsmoduleLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsmoduleLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsmoduleLineage>>
    > = ({ signal }) => readBeleidsmoduleLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsmoduleLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsmodules to a lineage
 * @summary Update Beleidsmodule
 */
export const updateBeleidsmodule = (
    lineageId: number,
    beleidsmoduleUpdate: BeleidsmoduleUpdate
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/beleidsmodules/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmoduleUpdate,
    })
}

export type UpdateBeleidsmoduleMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidsmodule>>
>
export type UpdateBeleidsmoduleMutationBody = BeleidsmoduleUpdate
export type UpdateBeleidsmoduleMutationError = HTTPValidationError

export const useUpdateBeleidsmodule = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidsmodule>>,
        TError,
        { lineageId: number; data: BeleidsmoduleUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidsmodule>>,
        { lineageId: number; data: BeleidsmoduleUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsmodule(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidsmodule>>,
        TError,
        { lineageId: number; data: BeleidsmoduleUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsmodules.
 * @summary Changes Beleidsmodules
 */
export const changesBeleidsmodules = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsmodules/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsmodulesQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidsmodules/${oldUuid}/${newUuid}`]

export type ChangesBeleidsmodulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidsmodules>>
>
export type ChangesBeleidsmodulesQueryError = HTTPValidationError

export const useChangesBeleidsmodules = <
    TData = Awaited<ReturnType<typeof changesBeleidsmodules>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidsmodules>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsmodulesQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidsmodules>>
    > = ({ signal }) => changesBeleidsmodules(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidsmodules>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsmodules lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsmodules
 */
export const readValidBeleidsmodules = (
    params?: ReadValidBeleidsmodulesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/valid/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsmodulesQueryKey = (
    params?: ReadValidBeleidsmodulesParams
) => [`/v0.1/valid/beleidsmodules`, ...(params ? [params] : [])]

export type ReadValidBeleidsmodulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsmodules>>
>
export type ReadValidBeleidsmodulesQueryError = HTTPValidationError

export const useReadValidBeleidsmodules = <
    TData = Awaited<ReturnType<typeof readValidBeleidsmodules>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsmodules>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsmodules>>
    > = ({ signal }) => readValidBeleidsmodules(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsmodules>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsmodules in this lineage that are valid
 * @summary Read Valid Beleidsmodule Lineage
 */
export const readValidBeleidsmoduleLineage = (
    lineageId: number,
    params?: ReadValidBeleidsmoduleLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/valid/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsmoduleLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidsmoduleLineageParams
) => [`/v0.1/valid/beleidsmodules/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsmoduleLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsmoduleLineage>>
>
export type ReadValidBeleidsmoduleLineageQueryError = HTTPValidationError

export const useReadValidBeleidsmoduleLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidsmoduleLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsmoduleLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsmoduleLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsmoduleLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsmoduleLineage>>
    > = ({ signal }) => readValidBeleidsmoduleLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsmoduleLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidsmoduleVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/version/beleidsmodules/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsmoduleVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidsmodules/${objectUuid}`,
]

export type ReadBeleidsmoduleVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsmoduleVersion>>
>
export type ReadBeleidsmoduleVersionQueryError = HTTPValidationError

export const useReadBeleidsmoduleVersion = <
    TData = Awaited<ReturnType<typeof readBeleidsmoduleVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsmoduleVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsmoduleVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsmoduleVersion>>
    > = ({ signal }) => readBeleidsmoduleVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsmoduleVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsprestaties lineages and shows the latests object for each
 * @summary Read Beleidsprestaties
 */
export const readBeleidsprestaties = (
    params?: ReadBeleidsprestatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsprestatiesQueryKey = (
    params?: ReadBeleidsprestatiesParams
) => [`/v0.1/beleidsprestaties`, ...(params ? [params] : [])]

export type ReadBeleidsprestatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsprestaties>>
>
export type ReadBeleidsprestatiesQueryError = HTTPValidationError

export const useReadBeleidsprestaties = <
    TData = Awaited<ReturnType<typeof readBeleidsprestaties>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsprestaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsprestaties>>
    > = ({ signal }) => readBeleidsprestaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsprestaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsprestaties lineage
 * @summary Create Beleidsprestatie
 */
export const createBeleidsprestatie = (
    beleidsprestatieCreate: BeleidsprestatieCreate
) => {
    return customInstance<Beleidsprestatie>({
        url: `/v0.1/beleidsprestaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatieCreate,
    })
}

export type CreateBeleidsprestatieMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsprestatie>>
>
export type CreateBeleidsprestatieMutationBody = BeleidsprestatieCreate
export type CreateBeleidsprestatieMutationError = HTTPValidationError

export const useCreateBeleidsprestatie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsprestatie>>,
        TError,
        { data: BeleidsprestatieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsprestatie>>,
        { data: BeleidsprestatieCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsprestatie(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsprestatie>>,
        TError,
        { data: BeleidsprestatieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsprestaties versions by lineage
 * @summary Read Beleidsprestatie Lineage
 */
export const readBeleidsprestatieLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/beleidsprestaties/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsprestatieLineageQueryKey = (lineageId: number) => [
    `/v0.1/beleidsprestaties/${lineageId}`,
]

export type ReadBeleidsprestatieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsprestatieLineage>>
>
export type ReadBeleidsprestatieLineageQueryError = HTTPValidationError

export const useReadBeleidsprestatieLineage = <
    TData = Awaited<ReturnType<typeof readBeleidsprestatieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsprestatieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsprestatieLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsprestatieLineage>>
    > = ({ signal }) => readBeleidsprestatieLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsprestatieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsprestaties to a lineage
 * @summary Update Beleidsprestatie
 */
export const updateBeleidsprestatie = (
    lineageId: number,
    beleidsprestatieUpdate: BeleidsprestatieUpdate
) => {
    return customInstance<Beleidsprestatie>({
        url: `/v0.1/beleidsprestaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatieUpdate,
    })
}

export type UpdateBeleidsprestatieMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidsprestatie>>
>
export type UpdateBeleidsprestatieMutationBody = BeleidsprestatieUpdate
export type UpdateBeleidsprestatieMutationError = HTTPValidationError

export const useUpdateBeleidsprestatie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidsprestatie>>,
        TError,
        { lineageId: number; data: BeleidsprestatieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidsprestatie>>,
        { lineageId: number; data: BeleidsprestatieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsprestatie(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidsprestatie>>,
        TError,
        { lineageId: number; data: BeleidsprestatieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsprestaties.
 * @summary Changes Beleidsprestaties
 */
export const changesBeleidsprestaties = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsprestaties/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsprestatiesQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidsprestaties/${oldUuid}/${newUuid}`]

export type ChangesBeleidsprestatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidsprestaties>>
>
export type ChangesBeleidsprestatiesQueryError = HTTPValidationError

export const useChangesBeleidsprestaties = <
    TData = Awaited<ReturnType<typeof changesBeleidsprestaties>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidsprestaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsprestatiesQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidsprestaties>>
    > = ({ signal }) => changesBeleidsprestaties(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidsprestaties>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsprestaties lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsprestaties
 */
export const readValidBeleidsprestaties = (
    params?: ReadValidBeleidsprestatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/valid/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsprestatiesQueryKey = (
    params?: ReadValidBeleidsprestatiesParams
) => [`/v0.1/valid/beleidsprestaties`, ...(params ? [params] : [])]

export type ReadValidBeleidsprestatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsprestaties>>
>
export type ReadValidBeleidsprestatiesQueryError = HTTPValidationError

export const useReadValidBeleidsprestaties = <
    TData = Awaited<ReturnType<typeof readValidBeleidsprestaties>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsprestaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsprestaties>>
    > = ({ signal }) => readValidBeleidsprestaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsprestaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsprestaties in this lineage that are valid
 * @summary Read Valid Beleidsprestatie Lineage
 */
export const readValidBeleidsprestatieLineage = (
    lineageId: number,
    params?: ReadValidBeleidsprestatieLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/valid/beleidsprestaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsprestatieLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidsprestatieLineageParams
) => [`/v0.1/valid/beleidsprestaties/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsprestatieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsprestatieLineage>>
>
export type ReadValidBeleidsprestatieLineageQueryError = HTTPValidationError

export const useReadValidBeleidsprestatieLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidsprestatieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsprestatieLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsprestatieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsprestatieLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsprestatieLineage>>
    > = ({ signal }) =>
        readValidBeleidsprestatieLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsprestatieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidsprestatieVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie>({
        url: `/v0.1/version/beleidsprestaties/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsprestatieVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidsprestaties/${objectUuid}`,
]

export type ReadBeleidsprestatieVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsprestatieVersion>>
>
export type ReadBeleidsprestatieVersionQueryError = HTTPValidationError

export const useReadBeleidsprestatieVersion = <
    TData = Awaited<ReturnType<typeof readBeleidsprestatieVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsprestatieVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsprestatieVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsprestatieVersion>>
    > = ({ signal }) => readBeleidsprestatieVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsprestatieVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsrelaties lineages and shows the latests object for each
 * @summary Read Beleidsrelaties
 */
export const readBeleidsrelaties = (
    params?: ReadBeleidsrelatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsrelatiesQueryKey = (
    params?: ReadBeleidsrelatiesParams
) => [`/v0.1/beleidsrelaties`, ...(params ? [params] : [])]

export type ReadBeleidsrelatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsrelaties>>
>
export type ReadBeleidsrelatiesQueryError = HTTPValidationError

export const useReadBeleidsrelaties = <
    TData = Awaited<ReturnType<typeof readBeleidsrelaties>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsrelaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsrelaties>>
    > = ({ signal }) => readBeleidsrelaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsrelaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsrelaties lineage
 * @summary Create Beleidsrelatie
 */
export const createBeleidsrelatie = (
    beleidsrelatieCreate: BeleidsrelatieCreate
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/beleidsrelaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatieCreate,
    })
}

export type CreateBeleidsrelatieMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsrelatie>>
>
export type CreateBeleidsrelatieMutationBody = BeleidsrelatieCreate
export type CreateBeleidsrelatieMutationError = HTTPValidationError

export const useCreateBeleidsrelatie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsrelatie>>,
        TError,
        { data: BeleidsrelatieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsrelatie>>,
        { data: BeleidsrelatieCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsrelatie(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsrelatie>>,
        TError,
        { data: BeleidsrelatieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsrelaties versions by lineage
 * @summary Read Beleidsrelatie Lineage
 */
export const readBeleidsrelatieLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/beleidsrelaties/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsrelatieLineageQueryKey = (lineageId: number) => [
    `/v0.1/beleidsrelaties/${lineageId}`,
]

export type ReadBeleidsrelatieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsrelatieLineage>>
>
export type ReadBeleidsrelatieLineageQueryError = HTTPValidationError

export const useReadBeleidsrelatieLineage = <
    TData = Awaited<ReturnType<typeof readBeleidsrelatieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsrelatieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsrelatieLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsrelatieLineage>>
    > = ({ signal }) => readBeleidsrelatieLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsrelatieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsrelaties to a lineage
 * @summary Update Beleidsrelatie
 */
export const updateBeleidsrelatie = (
    lineageId: number,
    beleidsrelatieUpdate: BeleidsrelatieUpdate
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/beleidsrelaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatieUpdate,
    })
}

export type UpdateBeleidsrelatieMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidsrelatie>>
>
export type UpdateBeleidsrelatieMutationBody = BeleidsrelatieUpdate
export type UpdateBeleidsrelatieMutationError = HTTPValidationError

export const useUpdateBeleidsrelatie = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidsrelatie>>,
        TError,
        { lineageId: number; data: BeleidsrelatieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidsrelatie>>,
        { lineageId: number; data: BeleidsrelatieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsrelatie(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidsrelatie>>,
        TError,
        { lineageId: number; data: BeleidsrelatieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsrelaties.
 * @summary Changes Beleidsrelaties
 */
export const changesBeleidsrelaties = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsrelaties/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsrelatiesQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidsrelaties/${oldUuid}/${newUuid}`]

export type ChangesBeleidsrelatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidsrelaties>>
>
export type ChangesBeleidsrelatiesQueryError = HTTPValidationError

export const useChangesBeleidsrelaties = <
    TData = Awaited<ReturnType<typeof changesBeleidsrelaties>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidsrelaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsrelatiesQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidsrelaties>>
    > = ({ signal }) => changesBeleidsrelaties(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidsrelaties>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsrelaties lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsrelaties
 */
export const readValidBeleidsrelaties = (
    params?: ReadValidBeleidsrelatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/valid/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsrelatiesQueryKey = (
    params?: ReadValidBeleidsrelatiesParams
) => [`/v0.1/valid/beleidsrelaties`, ...(params ? [params] : [])]

export type ReadValidBeleidsrelatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsrelaties>>
>
export type ReadValidBeleidsrelatiesQueryError = HTTPValidationError

export const useReadValidBeleidsrelaties = <
    TData = Awaited<ReturnType<typeof readValidBeleidsrelaties>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsrelaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsrelaties>>
    > = ({ signal }) => readValidBeleidsrelaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsrelaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsrelaties in this lineage that are valid
 * @summary Read Valid Beleidsrelatie Lineage
 */
export const readValidBeleidsrelatieLineage = (
    lineageId: number,
    params?: ReadValidBeleidsrelatieLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/valid/beleidsrelaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsrelatieLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidsrelatieLineageParams
) => [`/v0.1/valid/beleidsrelaties/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsrelatieLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsrelatieLineage>>
>
export type ReadValidBeleidsrelatieLineageQueryError = HTTPValidationError

export const useReadValidBeleidsrelatieLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidsrelatieLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsrelatieLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsrelatieLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsrelatieLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsrelatieLineage>>
    > = ({ signal }) =>
        readValidBeleidsrelatieLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsrelatieLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidsrelatieVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/version/beleidsrelaties/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsrelatieVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidsrelaties/${objectUuid}`,
]

export type ReadBeleidsrelatieVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsrelatieVersion>>
>
export type ReadBeleidsrelatieVersionQueryError = HTTPValidationError

export const useReadBeleidsrelatieVersion = <
    TData = Awaited<ReturnType<typeof readBeleidsrelatieVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsrelatieVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsrelatieVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsrelatieVersion>>
    > = ({ signal }) => readBeleidsrelatieVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsrelatieVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsregels lineages and shows the latests object for each
 * @summary Read Beleidsregels
 */
export const readBeleidsregels = (
    params?: ReadBeleidsregelsParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsregelsQueryKey = (
    params?: ReadBeleidsregelsParams
) => [`/v0.1/beleidsregels`, ...(params ? [params] : [])]

export type ReadBeleidsregelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsregels>>
>
export type ReadBeleidsregelsQueryError = HTTPValidationError

export const useReadBeleidsregels = <
    TData = Awaited<ReturnType<typeof readBeleidsregels>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsregels>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsregels>>
    > = ({ signal }) => readBeleidsregels(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsregels>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsregels lineage
 * @summary Create Beleidsregel
 */
export const createBeleidsregel = (beleidsregelCreate: BeleidsregelCreate) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/beleidsregels`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelCreate,
    })
}

export type CreateBeleidsregelMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsregel>>
>
export type CreateBeleidsregelMutationBody = BeleidsregelCreate
export type CreateBeleidsregelMutationError = HTTPValidationError

export const useCreateBeleidsregel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsregel>>,
        TError,
        { data: BeleidsregelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsregel>>,
        { data: BeleidsregelCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsregel(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsregel>>,
        TError,
        { data: BeleidsregelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsregels versions by lineage
 * @summary Read Beleidsregel Lineage
 */
export const readBeleidsregelLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/beleidsregels/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsregelLineageQueryKey = (lineageId: number) => [
    `/v0.1/beleidsregels/${lineageId}`,
]

export type ReadBeleidsregelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsregelLineage>>
>
export type ReadBeleidsregelLineageQueryError = HTTPValidationError

export const useReadBeleidsregelLineage = <
    TData = Awaited<ReturnType<typeof readBeleidsregelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsregelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsregelLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsregelLineage>>
    > = ({ signal }) => readBeleidsregelLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsregelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsregels to a lineage
 * @summary Update Beleidsregel
 */
export const updateBeleidsregel = (
    lineageId: number,
    beleidsregelUpdate: BeleidsregelUpdate
) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/beleidsregels/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelUpdate,
    })
}

export type UpdateBeleidsregelMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBeleidsregel>>
>
export type UpdateBeleidsregelMutationBody = BeleidsregelUpdate
export type UpdateBeleidsregelMutationError = HTTPValidationError

export const useUpdateBeleidsregel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBeleidsregel>>,
        TError,
        { lineageId: number; data: BeleidsregelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBeleidsregel>>,
        { lineageId: number; data: BeleidsregelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsregel(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBeleidsregel>>,
        TError,
        { lineageId: number; data: BeleidsregelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsregels.
 * @summary Changes Beleidsregels
 */
export const changesBeleidsregels = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsregels/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsregelsQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/beleidsregels/${oldUuid}/${newUuid}`]

export type ChangesBeleidsregelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesBeleidsregels>>
>
export type ChangesBeleidsregelsQueryError = HTTPValidationError

export const useChangesBeleidsregels = <
    TData = Awaited<ReturnType<typeof changesBeleidsregels>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesBeleidsregels>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsregelsQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesBeleidsregels>>
    > = ({ signal }) => changesBeleidsregels(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesBeleidsregels>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsregels lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsregels
 */
export const readValidBeleidsregels = (
    params?: ReadValidBeleidsregelsParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/valid/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsregelsQueryKey = (
    params?: ReadValidBeleidsregelsParams
) => [`/v0.1/valid/beleidsregels`, ...(params ? [params] : [])]

export type ReadValidBeleidsregelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsregels>>
>
export type ReadValidBeleidsregelsQueryError = HTTPValidationError

export const useReadValidBeleidsregels = <
    TData = Awaited<ReturnType<typeof readValidBeleidsregels>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsregels>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsregels>>
    > = ({ signal }) => readValidBeleidsregels(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsregels>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsregels in this lineage that are valid
 * @summary Read Valid Beleidsregel Lineage
 */
export const readValidBeleidsregelLineage = (
    lineageId: number,
    params?: ReadValidBeleidsregelLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/valid/beleidsregels/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsregelLineageQueryKey = (
    lineageId: number,
    params?: ReadValidBeleidsregelLineageParams
) => [`/v0.1/valid/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsregelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBeleidsregelLineage>>
>
export type ReadValidBeleidsregelLineageQueryError = HTTPValidationError

export const useReadValidBeleidsregelLineage = <
    TData = Awaited<ReturnType<typeof readValidBeleidsregelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsregelLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBeleidsregelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsregelLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBeleidsregelLineage>>
    > = ({ signal }) => readValidBeleidsregelLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBeleidsregelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readBeleidsregelVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/version/beleidsregels/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsregelVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/beleidsregels/${objectUuid}`,
]

export type ReadBeleidsregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsregelVersion>>
>
export type ReadBeleidsregelVersionQueryError = HTTPValidationError

export const useReadBeleidsregelVersion = <
    TData = Awaited<ReturnType<typeof readBeleidsregelVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsregelVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBeleidsregelVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsregelVersion>>
    > = ({ signal }) => readBeleidsregelVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsregelVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Get the latest edits for every lineage,
active for 'Beleidskeuzes' & 'Maatregelen'
 * @summary Edits
 */
export const edits = (signal?: AbortSignal) => {
    return customInstance<LatestVersionInline[]>({
        url: `/v0.1/edits`,
        method: 'get',
        signal,
    })
}

export const getEditsQueryKey = () => [`/v0.1/edits`]

export type EditsQueryResult = NonNullable<Awaited<ReturnType<typeof edits>>>
export type EditsQueryError = unknown

export const useEdits = <
    TData = Awaited<ReturnType<typeof edits>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof edits>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getEditsQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof edits>>> = ({
        signal,
    }) => edits(signal)

    const query = useQuery<Awaited<ReturnType<typeof edits>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Fetch graph representations on relationships of generic models
 * @summary Graph
 */
export const graph = (signal?: AbortSignal) => {
    return customInstance<GraphView>({
        url: `/v0.1/graph`,
        method: 'get',
        signal,
    })
}

export const getGraphQueryKey = () => [`/v0.1/graph`]

export type GraphQueryResult = NonNullable<Awaited<ReturnType<typeof graph>>>
export type GraphQueryError = unknown

export const useGraph = <
    TData = Awaited<ReturnType<typeof graph>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof graph>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGraphQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof graph>>> = ({
        signal,
    }) => graph(signal)

    const query = useQuery<Awaited<ReturnType<typeof graph>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * List the users of this application
 * @summary Gebruikers
 */
export const gebruikers = (signal?: AbortSignal) => {
    return customInstance<GebruikerInline[]>({
        url: `/v0.1/gebruikers`,
        method: 'get',
        signal,
    })
}

export const getGebruikersQueryKey = () => [`/v0.1/gebruikers`]

export type GebruikersQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebruikers>>
>
export type GebruikersQueryError = unknown

export const useGebruikers = <
    TData = Awaited<ReturnType<typeof gebruikers>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof gebruikers>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGebruikersQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gebruikers>>> = ({
        signal,
    }) => gebruikers(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof gebruikers>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the gebiedsprogrammas lineages and shows the latests object for each
 * @summary Read Gebiedsprogrammas
 */
export const readGebiedsprogrammas = (
    params?: ReadGebiedsprogrammasParams,
    signal?: AbortSignal
) => {
    return customInstance<Gebiedsprogramma[]>({
        url: `/v0.1/gebiedsprogrammas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadGebiedsprogrammasQueryKey = (
    params?: ReadGebiedsprogrammasParams
) => [`/v0.1/gebiedsprogrammas`, ...(params ? [params] : [])]

export type ReadGebiedsprogrammasQueryResult = NonNullable<
    Awaited<ReturnType<typeof readGebiedsprogrammas>>
>
export type ReadGebiedsprogrammasQueryError = HTTPValidationError

export const useReadGebiedsprogrammas = <
    TData = Awaited<ReturnType<typeof readGebiedsprogrammas>>,
    TError = HTTPValidationError
>(
    params?: ReadGebiedsprogrammasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readGebiedsprogrammas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadGebiedsprogrammasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readGebiedsprogrammas>>
    > = ({ signal }) => readGebiedsprogrammas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readGebiedsprogrammas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new gebiedsprogrammas lineage
 * @summary Create Gebiedsprogramma
 */
export const createGebiedsprogramma = (
    gebiedsprogrammaCreate: GebiedsprogrammaCreate
) => {
    return customInstance<Gebiedsprogramma>({
        url: `/v0.1/gebiedsprogrammas`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammaCreate,
    })
}

export type CreateGebiedsprogrammaMutationResult = NonNullable<
    Awaited<ReturnType<typeof createGebiedsprogramma>>
>
export type CreateGebiedsprogrammaMutationBody = GebiedsprogrammaCreate
export type CreateGebiedsprogrammaMutationError = HTTPValidationError

export const useCreateGebiedsprogramma = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createGebiedsprogramma>>,
        TError,
        { data: GebiedsprogrammaCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createGebiedsprogramma>>,
        { data: GebiedsprogrammaCreate }
    > = props => {
        const { data } = props ?? {}

        return createGebiedsprogramma(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createGebiedsprogramma>>,
        TError,
        { data: GebiedsprogrammaCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the gebiedsprogrammas versions by lineage
 * @summary Read Gebiedsprogramma Lineage
 */
export const readGebiedsprogrammaLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Gebiedsprogramma[]>({
        url: `/v0.1/gebiedsprogrammas/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadGebiedsprogrammaLineageQueryKey = (lineageId: number) => [
    `/v0.1/gebiedsprogrammas/${lineageId}`,
]

export type ReadGebiedsprogrammaLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readGebiedsprogrammaLineage>>
>
export type ReadGebiedsprogrammaLineageQueryError = HTTPValidationError

export const useReadGebiedsprogrammaLineage = <
    TData = Awaited<ReturnType<typeof readGebiedsprogrammaLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readGebiedsprogrammaLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadGebiedsprogrammaLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readGebiedsprogrammaLineage>>
    > = ({ signal }) => readGebiedsprogrammaLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readGebiedsprogrammaLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new gebiedsprogrammas to a lineage
 * @summary Update Gebiedsprogramma
 */
export const updateGebiedsprogramma = (
    lineageId: number,
    gebiedsprogrammaUpdate: GebiedsprogrammaUpdate
) => {
    return customInstance<Gebiedsprogramma>({
        url: `/v0.1/gebiedsprogrammas/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammaUpdate,
    })
}

export type UpdateGebiedsprogrammaMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateGebiedsprogramma>>
>
export type UpdateGebiedsprogrammaMutationBody = GebiedsprogrammaUpdate
export type UpdateGebiedsprogrammaMutationError = HTTPValidationError

export const useUpdateGebiedsprogramma = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateGebiedsprogramma>>,
        TError,
        { lineageId: number; data: GebiedsprogrammaUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateGebiedsprogramma>>,
        { lineageId: number; data: GebiedsprogrammaUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateGebiedsprogramma(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateGebiedsprogramma>>,
        TError,
        { lineageId: number; data: GebiedsprogrammaUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of gebiedsprogrammas.
 * @summary Changes Gebiedsprogrammas
 */
export const changesGebiedsprogrammas = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/gebiedsprogrammas/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesGebiedsprogrammasQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/gebiedsprogrammas/${oldUuid}/${newUuid}`]

export type ChangesGebiedsprogrammasQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesGebiedsprogrammas>>
>
export type ChangesGebiedsprogrammasQueryError = HTTPValidationError

export const useChangesGebiedsprogrammas = <
    TData = Awaited<ReturnType<typeof changesGebiedsprogrammas>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesGebiedsprogrammas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesGebiedsprogrammasQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesGebiedsprogrammas>>
    > = ({ signal }) => changesGebiedsprogrammas(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesGebiedsprogrammas>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the gebiedsprogrammas lineages and shows the latests valid object for each.
 * @summary Read Valid Gebiedsprogrammas
 */
export const readValidGebiedsprogrammas = (
    params?: ReadValidGebiedsprogrammasParams,
    signal?: AbortSignal
) => {
    return customInstance<Gebiedsprogramma[]>({
        url: `/v0.1/valid/gebiedsprogrammas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidGebiedsprogrammasQueryKey = (
    params?: ReadValidGebiedsprogrammasParams
) => [`/v0.1/valid/gebiedsprogrammas`, ...(params ? [params] : [])]

export type ReadValidGebiedsprogrammasQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidGebiedsprogrammas>>
>
export type ReadValidGebiedsprogrammasQueryError = HTTPValidationError

export const useReadValidGebiedsprogrammas = <
    TData = Awaited<ReturnType<typeof readValidGebiedsprogrammas>>,
    TError = HTTPValidationError
>(
    params?: ReadValidGebiedsprogrammasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidGebiedsprogrammas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidGebiedsprogrammasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidGebiedsprogrammas>>
    > = ({ signal }) => readValidGebiedsprogrammas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidGebiedsprogrammas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the gebiedsprogrammas in this lineage that are valid
 * @summary Read Valid Gebiedsprogramma Lineage
 */
export const readValidGebiedsprogrammaLineage = (
    lineageId: number,
    params?: ReadValidGebiedsprogrammaLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Gebiedsprogramma[]>({
        url: `/v0.1/valid/gebiedsprogrammas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidGebiedsprogrammaLineageQueryKey = (
    lineageId: number,
    params?: ReadValidGebiedsprogrammaLineageParams
) => [`/v0.1/valid/gebiedsprogrammas/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidGebiedsprogrammaLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidGebiedsprogrammaLineage>>
>
export type ReadValidGebiedsprogrammaLineageQueryError = HTTPValidationError

export const useReadValidGebiedsprogrammaLineage = <
    TData = Awaited<ReturnType<typeof readValidGebiedsprogrammaLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidGebiedsprogrammaLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidGebiedsprogrammaLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidGebiedsprogrammaLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidGebiedsprogrammaLineage>>
    > = ({ signal }) =>
        readValidGebiedsprogrammaLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidGebiedsprogrammaLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readGebiedsprogrammaVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Gebiedsprogramma>({
        url: `/v0.1/version/gebiedsprogrammas/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadGebiedsprogrammaVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/gebiedsprogrammas/${objectUuid}`,
]

export type ReadGebiedsprogrammaVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readGebiedsprogrammaVersion>>
>
export type ReadGebiedsprogrammaVersionQueryError = HTTPValidationError

export const useReadGebiedsprogrammaVersion = <
    TData = Awaited<ReturnType<typeof readGebiedsprogrammaVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readGebiedsprogrammaVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadGebiedsprogrammaVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readGebiedsprogrammaVersion>>
    > = ({ signal }) => readGebiedsprogrammaVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readGebiedsprogrammaVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Fetches items matching the search query parameters
 * @summary Search
 */
export const search = (params: SearchParams, signal?: AbortSignal) => {
    return customInstance<SearchResultWrapper>({
        url: `/v0.1/search`,
        method: 'get',
        params,
        signal,
    })
}

export const getSearchQueryKey = (params: SearchParams) => [
    `/v0.1/search`,
    ...(params ? [params] : []),
]

export type SearchQueryResult = NonNullable<Awaited<ReturnType<typeof search>>>
export type SearchQueryError = HTTPValidationError

export const useSearch = <
    TData = Awaited<ReturnType<typeof search>>,
    TError = HTTPValidationError
>(
    params: SearchParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof search>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof search>>> = ({
        signal,
    }) => search(params, signal)

    const query = useQuery<Awaited<ReturnType<typeof search>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Lookup geo-searchable entities related to a 'Werkingsgebied'
 * @summary Geo Search
 */
export const geoSearch = (params: GeoSearchParams, signal?: AbortSignal) => {
    return customInstance<SearchResultWrapper>({
        url: `/v0.1/geo-search`,
        method: 'get',
        params,
        signal,
    })
}

export const getGeoSearchQueryKey = (params: GeoSearchParams) => [
    `/v0.1/geo-search`,
    ...(params ? [params] : []),
]

export type GeoSearchQueryResult = NonNullable<
    Awaited<ReturnType<typeof geoSearch>>
>
export type GeoSearchQueryError = HTTPValidationError

export const useGeoSearch = <
    TData = Awaited<ReturnType<typeof geoSearch>>,
    TError = HTTPValidationError
>(
    params: GeoSearchParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof geoSearch>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGeoSearchQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geoSearch>>> = ({
        signal,
    }) => geoSearch(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof geoSearch>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas lineages and shows the latests object for each
 * @summary Read Themas
 */
export const readThemas = (params?: ReadThemasParams, signal?: AbortSignal) => {
    return customInstance<Thema[]>({
        url: `/v0.1/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadThemasQueryKey = (params?: ReadThemasParams) => [
    `/v0.1/themas`,
    ...(params ? [params] : []),
]

export type ReadThemasQueryResult = NonNullable<
    Awaited<ReturnType<typeof readThemas>>
>
export type ReadThemasQueryError = HTTPValidationError

export const useReadThemas = <
    TData = Awaited<ReturnType<typeof readThemas>>,
    TError = HTTPValidationError
>(
    params?: ReadThemasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readThemas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadThemasQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readThemas>>> = ({
        signal,
    }) => readThemas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readThemas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new themas lineage
 * @summary Create Thema
 */
export const createThema = (themaCreate: ThemaCreate) => {
    return customInstance<Thema>({
        url: `/v0.1/themas`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: themaCreate,
    })
}

export type CreateThemaMutationResult = NonNullable<
    Awaited<ReturnType<typeof createThema>>
>
export type CreateThemaMutationBody = ThemaCreate
export type CreateThemaMutationError = HTTPValidationError

export const useCreateThema = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createThema>>,
        TError,
        { data: ThemaCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createThema>>,
        { data: ThemaCreate }
    > = props => {
        const { data } = props ?? {}

        return createThema(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createThema>>,
        TError,
        { data: ThemaCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the themas versions by lineage
 * @summary Read Thema Lineage
 */
export const readThemaLineage = (lineageId: number, signal?: AbortSignal) => {
    return customInstance<Thema[]>({
        url: `/v0.1/themas/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadThemaLineageQueryKey = (lineageId: number) => [
    `/v0.1/themas/${lineageId}`,
]

export type ReadThemaLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readThemaLineage>>
>
export type ReadThemaLineageQueryError = HTTPValidationError

export const useReadThemaLineage = <
    TData = Awaited<ReturnType<typeof readThemaLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readThemaLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadThemaLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readThemaLineage>>
    > = ({ signal }) => readThemaLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readThemaLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new themas to a lineage
 * @summary Update Thema
 */
export const updateThema = (lineageId: number, themaUpdate: ThemaUpdate) => {
    return customInstance<Thema>({
        url: `/v0.1/themas/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: themaUpdate,
    })
}

export type UpdateThemaMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateThema>>
>
export type UpdateThemaMutationBody = ThemaUpdate
export type UpdateThemaMutationError = HTTPValidationError

export const useUpdateThema = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateThema>>,
        TError,
        { lineageId: number; data: ThemaUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateThema>>,
        { lineageId: number; data: ThemaUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateThema(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateThema>>,
        TError,
        { lineageId: number; data: ThemaUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of themas.
 * @summary Changes Themas
 */
export const changesThemas = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/themas/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesThemasQueryKey = (oldUuid: string, newUuid: string) => [
    `/v0.1/changes/themas/${oldUuid}/${newUuid}`,
]

export type ChangesThemasQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesThemas>>
>
export type ChangesThemasQueryError = HTTPValidationError

export const useChangesThemas = <
    TData = Awaited<ReturnType<typeof changesThemas>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesThemas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getChangesThemasQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof changesThemas>>> = ({
        signal,
    }) => changesThemas(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesThemas>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas lineages and shows the latests valid object for each.
 * @summary Read Valid Themas
 */
export const readValidThemas = (
    params?: ReadValidThemasParams,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/valid/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidThemasQueryKey = (params?: ReadValidThemasParams) => [
    `/v0.1/valid/themas`,
    ...(params ? [params] : []),
]

export type ReadValidThemasQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidThemas>>
>
export type ReadValidThemasQueryError = HTTPValidationError

export const useReadValidThemas = <
    TData = Awaited<ReturnType<typeof readValidThemas>>,
    TError = HTTPValidationError
>(
    params?: ReadValidThemasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidThemas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidThemasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidThemas>>
    > = ({ signal }) => readValidThemas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidThemas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas in this lineage that are valid
 * @summary Read Valid Thema Lineage
 */
export const readValidThemaLineage = (
    lineageId: number,
    params?: ReadValidThemaLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/valid/themas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidThemaLineageQueryKey = (
    lineageId: number,
    params?: ReadValidThemaLineageParams
) => [`/v0.1/valid/themas/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidThemaLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidThemaLineage>>
>
export type ReadValidThemaLineageQueryError = HTTPValidationError

export const useReadValidThemaLineage = <
    TData = Awaited<ReturnType<typeof readValidThemaLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidThemaLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidThemaLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidThemaLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidThemaLineage>>
    > = ({ signal }) => readValidThemaLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidThemaLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readThemaVersion = (objectUuid: string, signal?: AbortSignal) => {
    return customInstance<Thema>({
        url: `/v0.1/version/themas/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadThemaVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/themas/${objectUuid}`,
]

export type ReadThemaVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readThemaVersion>>
>
export type ReadThemaVersionQueryError = HTTPValidationError

export const useReadThemaVersion = <
    TData = Awaited<ReturnType<typeof readThemaVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readThemaVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadThemaVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readThemaVersion>>
    > = ({ signal }) => readThemaVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readThemaVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordening lineages and shows the latests object for each
 * @summary Read Verordening
 */
export const readVerordening = (
    params?: ReadVerordeningParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadVerordeningQueryKey = (params?: ReadVerordeningParams) => [
    `/v0.1/verordeningen`,
    ...(params ? [params] : []),
]

export type ReadVerordeningQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordening>>
>
export type ReadVerordeningQueryError = HTTPValidationError

export const useReadVerordening = <
    TData = Awaited<ReturnType<typeof readVerordening>>,
    TError = HTTPValidationError
>(
    params?: ReadVerordeningParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordening>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadVerordeningQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordening>>
    > = ({ signal }) => readVerordening(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordening>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new verordening lineage
 * @summary Create Verordening
 */
export const createVerordening = (verordeningCreate: VerordeningCreate) => {
    return customInstance<Verordening>({
        url: `/v0.1/verordeningen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningCreate,
    })
}

export type CreateVerordeningMutationResult = NonNullable<
    Awaited<ReturnType<typeof createVerordening>>
>
export type CreateVerordeningMutationBody = VerordeningCreate
export type CreateVerordeningMutationError = HTTPValidationError

export const useCreateVerordening = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createVerordening>>,
        TError,
        { data: VerordeningCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createVerordening>>,
        { data: VerordeningCreate }
    > = props => {
        const { data } = props ?? {}

        return createVerordening(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createVerordening>>,
        TError,
        { data: VerordeningCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the verordening versions by lineage
 * @summary Read Verordening Lineage
 */
export const readVerordeningLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/verordeningen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadVerordeningLineageQueryKey = (lineageId: number) => [
    `/v0.1/verordeningen/${lineageId}`,
]

export type ReadVerordeningLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningLineage>>
>
export type ReadVerordeningLineageQueryError = HTTPValidationError

export const useReadVerordeningLineage = <
    TData = Awaited<ReturnType<typeof readVerordeningLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadVerordeningLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningLineage>>
    > = ({ signal }) => readVerordeningLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new verordening to a lineage
 * @summary Update Verordening
 */
export const updateVerordening = (
    lineageId: number,
    verordeningUpdate: VerordeningUpdate
) => {
    return customInstance<Verordening>({
        url: `/v0.1/verordeningen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningUpdate,
    })
}

export type UpdateVerordeningMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateVerordening>>
>
export type UpdateVerordeningMutationBody = VerordeningUpdate
export type UpdateVerordeningMutationError = HTTPValidationError

export const useUpdateVerordening = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateVerordening>>,
        TError,
        { lineageId: number; data: VerordeningUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateVerordening>>,
        { lineageId: number; data: VerordeningUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateVerordening(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateVerordening>>,
        TError,
        { lineageId: number; data: VerordeningUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of verordening.
 * @summary Changes Verordening
 */
export const changesVerordening = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/verordeningen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesVerordeningQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/verordeningen/${oldUuid}/${newUuid}`]

export type ChangesVerordeningQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesVerordening>>
>
export type ChangesVerordeningQueryError = HTTPValidationError

export const useChangesVerordening = <
    TData = Awaited<ReturnType<typeof changesVerordening>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesVerordening>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesVerordeningQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesVerordening>>
    > = ({ signal }) => changesVerordening(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesVerordening>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordening lineages and shows the latests valid object for each.
 * @summary Read Valid Verordening
 */
export const readValidVerordening = (
    params?: ReadValidVerordeningParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/valid/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningQueryKey = (
    params?: ReadValidVerordeningParams
) => [`/v0.1/valid/verordeningen`, ...(params ? [params] : [])]

export type ReadValidVerordeningQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidVerordening>>
>
export type ReadValidVerordeningQueryError = HTTPValidationError

export const useReadValidVerordening = <
    TData = Awaited<ReturnType<typeof readValidVerordening>>,
    TError = HTTPValidationError
>(
    params?: ReadValidVerordeningParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidVerordening>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidVerordeningQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidVerordening>>
    > = ({ signal }) => readValidVerordening(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidVerordening>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordeningen in this lineage that are valid
 * @summary Read Valid Verordening Lineage
 */
export const readValidVerordeningLineage = (
    lineageId: number,
    params?: ReadValidVerordeningLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/valid/verordeningen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningLineageQueryKey = (
    lineageId: number,
    params?: ReadValidVerordeningLineageParams
) => [`/v0.1/valid/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidVerordeningLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidVerordeningLineage>>
>
export type ReadValidVerordeningLineageQueryError = HTTPValidationError

export const useReadValidVerordeningLineage = <
    TData = Awaited<ReturnType<typeof readValidVerordeningLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidVerordeningLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidVerordeningLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidVerordeningLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidVerordeningLineage>>
    > = ({ signal }) => readValidVerordeningLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidVerordeningLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readVerordeningVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Verordening>({
        url: `/v0.1/version/verordeningen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadVerordeningVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/verordeningen/${objectUuid}`,
]

export type ReadVerordeningVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningVersion>>
>
export type ReadVerordeningVersionQueryError = HTTPValidationError

export const useReadVerordeningVersion = <
    TData = Awaited<ReturnType<typeof readVerordeningVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadVerordeningVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningVersion>>
    > = ({ signal }) => readVerordeningVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordeningstructuren lineages and shows the latests object for each
 * @summary Read Verordeningstructuren
 */
export const readVerordeningstructuren = (
    params?: ReadVerordeningstructurenParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordeningstructuur[]>({
        url: `/v0.1/verordeningstructuren`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadVerordeningstructurenQueryKey = (
    params?: ReadVerordeningstructurenParams
) => [`/v0.1/verordeningstructuren`, ...(params ? [params] : [])]

export type ReadVerordeningstructurenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningstructuren>>
>
export type ReadVerordeningstructurenQueryError = HTTPValidationError

export const useReadVerordeningstructuren = <
    TData = Awaited<ReturnType<typeof readVerordeningstructuren>>,
    TError = HTTPValidationError
>(
    params?: ReadVerordeningstructurenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningstructuren>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadVerordeningstructurenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningstructuren>>
    > = ({ signal }) => readVerordeningstructuren(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningstructuren>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new verordeningstructuren lineage
 * @summary Create Verordeningstructuur
 */
export const createVerordeningstructuur = (
    verordeningstructuurCreate: VerordeningstructuurCreate
) => {
    return customInstance<Verordeningstructuur>({
        url: `/v0.1/verordeningstructuren`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningstructuurCreate,
    })
}

export type CreateVerordeningstructuurMutationResult = NonNullable<
    Awaited<ReturnType<typeof createVerordeningstructuur>>
>
export type CreateVerordeningstructuurMutationBody = VerordeningstructuurCreate
export type CreateVerordeningstructuurMutationError = HTTPValidationError

export const useCreateVerordeningstructuur = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createVerordeningstructuur>>,
        TError,
        { data: VerordeningstructuurCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createVerordeningstructuur>>,
        { data: VerordeningstructuurCreate }
    > = props => {
        const { data } = props ?? {}

        return createVerordeningstructuur(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createVerordeningstructuur>>,
        TError,
        { data: VerordeningstructuurCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the verordeningstructuren versions by lineage
 * @summary Read Verordeningstructuur Lineage
 */
export const readVerordeningstructuurLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Verordeningstructuur[]>({
        url: `/v0.1/verordeningstructuren/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadVerordeningstructuurLineageQueryKey = (
    lineageId: number
) => [`/v0.1/verordeningstructuren/${lineageId}`]

export type ReadVerordeningstructuurLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningstructuurLineage>>
>
export type ReadVerordeningstructuurLineageQueryError = HTTPValidationError

export const useReadVerordeningstructuurLineage = <
    TData = Awaited<ReturnType<typeof readVerordeningstructuurLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningstructuurLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadVerordeningstructuurLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningstructuurLineage>>
    > = ({ signal }) => readVerordeningstructuurLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningstructuurLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new verordeningstructuren to a lineage
 * @summary Update Verordeningstructuur
 */
export const updateVerordeningstructuur = (
    lineageId: number,
    verordeningstructuurUpdate: VerordeningstructuurUpdate
) => {
    return customInstance<Verordeningstructuur>({
        url: `/v0.1/verordeningstructuren/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningstructuurUpdate,
    })
}

export type UpdateVerordeningstructuurMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateVerordeningstructuur>>
>
export type UpdateVerordeningstructuurMutationBody = VerordeningstructuurUpdate
export type UpdateVerordeningstructuurMutationError = HTTPValidationError

export const useUpdateVerordeningstructuur = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateVerordeningstructuur>>,
        TError,
        { lineageId: number; data: VerordeningstructuurUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateVerordeningstructuur>>,
        { lineageId: number; data: VerordeningstructuurUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateVerordeningstructuur(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateVerordeningstructuur>>,
        TError,
        { lineageId: number; data: VerordeningstructuurUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of verordeningstructuren.
 * @summary Changes Verordeningstructuren
 */
export const changesVerordeningstructuren = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/verordeningstructuren/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesVerordeningstructurenQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/verordeningstructuren/${oldUuid}/${newUuid}`]

export type ChangesVerordeningstructurenQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesVerordeningstructuren>>
>
export type ChangesVerordeningstructurenQueryError = HTTPValidationError

export const useChangesVerordeningstructuren = <
    TData = Awaited<ReturnType<typeof changesVerordeningstructuren>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesVerordeningstructuren>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesVerordeningstructurenQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesVerordeningstructuren>>
    > = ({ signal }) => changesVerordeningstructuren(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesVerordeningstructuren>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordeningstructuren lineages and shows the latests valid object for each.
 * @summary Read Valid Verordeningstructuren
 */
export const readValidVerordeningstructuren = (
    params?: ReadValidVerordeningstructurenParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordeningstructuur[]>({
        url: `/v0.1/valid/verordeningstructuren`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningstructurenQueryKey = (
    params?: ReadValidVerordeningstructurenParams
) => [`/v0.1/valid/verordeningstructuren`, ...(params ? [params] : [])]

export type ReadValidVerordeningstructurenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidVerordeningstructuren>>
>
export type ReadValidVerordeningstructurenQueryError = HTTPValidationError

export const useReadValidVerordeningstructuren = <
    TData = Awaited<ReturnType<typeof readValidVerordeningstructuren>>,
    TError = HTTPValidationError
>(
    params?: ReadValidVerordeningstructurenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidVerordeningstructuren>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidVerordeningstructurenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidVerordeningstructuren>>
    > = ({ signal }) => readValidVerordeningstructuren(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidVerordeningstructuren>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordeningstructuren in this lineage that are valid
 * @summary Read Valid Verordeningstructuur Lineage
 */
export const readValidVerordeningstructuurLineage = (
    lineageId: number,
    params?: ReadValidVerordeningstructuurLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordeningstructuur[]>({
        url: `/v0.1/valid/verordeningstructuren/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningstructuurLineageQueryKey = (
    lineageId: number,
    params?: ReadValidVerordeningstructuurLineageParams
) => [
    `/v0.1/valid/verordeningstructuren/${lineageId}`,
    ...(params ? [params] : []),
]

export type ReadValidVerordeningstructuurLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidVerordeningstructuurLineage>>
>
export type ReadValidVerordeningstructuurLineageQueryError = HTTPValidationError

export const useReadValidVerordeningstructuurLineage = <
    TData = Awaited<ReturnType<typeof readValidVerordeningstructuurLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidVerordeningstructuurLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidVerordeningstructuurLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidVerordeningstructuurLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidVerordeningstructuurLineage>>
    > = ({ signal }) =>
        readValidVerordeningstructuurLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidVerordeningstructuurLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readVerordeningstructuurVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Verordeningstructuur>({
        url: `/v0.1/version/verordeningstructuren/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadVerordeningstructuurVersionQueryKey = (
    objectUuid: string
) => [`/v0.1/version/verordeningstructuren/${objectUuid}`]

export type ReadVerordeningstructuurVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningstructuurVersion>>
>
export type ReadVerordeningstructuurVersionQueryError = HTTPValidationError

export const useReadVerordeningstructuurVersion = <
    TData = Awaited<ReturnType<typeof readVerordeningstructuurVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningstructuurVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadVerordeningstructuurVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningstructuurVersion>>
    > = ({ signal }) => readVerordeningstructuurVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningstructuurVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen lineages and shows the latests object for each
 * @summary Read Maatregelen
 */
export const readMaatregelen = (
    params?: ReadMaatregelenParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelListable[]>({
        url: `/v0.1/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadMaatregelenQueryKey = (params?: ReadMaatregelenParams) => [
    `/v0.1/maatregelen`,
    ...(params ? [params] : []),
]

export type ReadMaatregelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readMaatregelen>>
>
export type ReadMaatregelenQueryError = HTTPValidationError

export const useReadMaatregelen = <
    TData = Awaited<ReturnType<typeof readMaatregelen>>,
    TError = HTTPValidationError
>(
    params?: ReadMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readMaatregelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadMaatregelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readMaatregelen>>
    > = ({ signal }) => readMaatregelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readMaatregelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new maatregelen lineage
 * @summary Create Maatregel
 */
export const createMaatregel = (maatregelCreate: MaatregelCreate) => {
    return customInstance<Maatregel>({
        url: `/v0.1/maatregelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelCreate,
    })
}

export type CreateMaatregelMutationResult = NonNullable<
    Awaited<ReturnType<typeof createMaatregel>>
>
export type CreateMaatregelMutationBody = MaatregelCreate
export type CreateMaatregelMutationError = HTTPValidationError

export const useCreateMaatregel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createMaatregel>>,
        TError,
        { data: MaatregelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createMaatregel>>,
        { data: MaatregelCreate }
    > = props => {
        const { data } = props ?? {}

        return createMaatregel(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createMaatregel>>,
        TError,
        { data: MaatregelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the maatregel versions by lineage
 * @summary Read Maatregel Lineage
 */
export const readMaatregelLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel[]>({
        url: `/v0.1/maatregelen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadMaatregelLineageQueryKey = (lineageId: number) => [
    `/v0.1/maatregelen/${lineageId}`,
]

export type ReadMaatregelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readMaatregelLineage>>
>
export type ReadMaatregelLineageQueryError = HTTPValidationError

export const useReadMaatregelLineage = <
    TData = Awaited<ReturnType<typeof readMaatregelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readMaatregelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadMaatregelLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readMaatregelLineage>>
    > = ({ signal }) => readMaatregelLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readMaatregelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new maatregelen to a lineage
 * @summary Update Maatregel
 */
export const updateMaatregel = (
    lineageId: number,
    maatregelUpdate: MaatregelUpdate
) => {
    return customInstance<Maatregel>({
        url: `/v0.1/maatregelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelUpdate,
    })
}

export type UpdateMaatregelMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateMaatregel>>
>
export type UpdateMaatregelMutationBody = MaatregelUpdate
export type UpdateMaatregelMutationError = HTTPValidationError

export const useUpdateMaatregel = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateMaatregel>>,
        TError,
        { lineageId: number; data: MaatregelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateMaatregel>>,
        { lineageId: number; data: MaatregelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateMaatregel(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateMaatregel>>,
        TError,
        { lineageId: number; data: MaatregelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of maatregelen.
 * @summary Changes Maatregelen
 */
export const changesMaatregelen = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/maatregelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesMaatregelenQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/maatregelen/${oldUuid}/${newUuid}`]

export type ChangesMaatregelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesMaatregelen>>
>
export type ChangesMaatregelenQueryError = HTTPValidationError

export const useChangesMaatregelen = <
    TData = Awaited<ReturnType<typeof changesMaatregelen>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesMaatregelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesMaatregelenQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesMaatregelen>>
    > = ({ signal }) => changesMaatregelen(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesMaatregelen>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen lineages and shows the latests valid object for each.
 * @summary Read Valid Maatregelen
 */
export const readValidMaatregelen = (
    params?: ReadValidMaatregelenParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelListable[]>({
        url: `/v0.1/valid/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidMaatregelenQueryKey = (
    params?: ReadValidMaatregelenParams
) => [`/v0.1/valid/maatregelen`, ...(params ? [params] : [])]

export type ReadValidMaatregelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidMaatregelen>>
>
export type ReadValidMaatregelenQueryError = HTTPValidationError

export const useReadValidMaatregelen = <
    TData = Awaited<ReturnType<typeof readValidMaatregelen>>,
    TError = HTTPValidationError
>(
    params?: ReadValidMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidMaatregelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidMaatregelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidMaatregelen>>
    > = ({ signal }) => readValidMaatregelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidMaatregelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen in this lineage that are valid
 * @summary Read Valid Maatregel Lineage
 */
export const readValidMaatregelLineage = (
    lineageId: number,
    params?: ReadValidMaatregelLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel[]>({
        url: `/v0.1/valid/maatregelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidMaatregelLineageQueryKey = (
    lineageId: number,
    params?: ReadValidMaatregelLineageParams
) => [`/v0.1/valid/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidMaatregelLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidMaatregelLineage>>
>
export type ReadValidMaatregelLineageQueryError = HTTPValidationError

export const useReadValidMaatregelLineage = <
    TData = Awaited<ReturnType<typeof readValidMaatregelLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidMaatregelLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidMaatregelLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidMaatregelLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidMaatregelLineage>>
    > = ({ signal }) => readValidMaatregelLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidMaatregelLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readMaatregelVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel>({
        url: `/v0.1/version/maatregelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadMaatregelVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/maatregelen/${objectUuid}`,
]

export type ReadMaatregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readMaatregelVersion>>
>
export type ReadMaatregelVersionQueryError = HTTPValidationError

export const useReadMaatregelVersion = <
    TData = Awaited<ReturnType<typeof readMaatregelVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readMaatregelVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadMaatregelVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readMaatregelVersion>>
    > = ({ signal }) => readMaatregelVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readMaatregelVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the werkingsgebied lineages and shows the latests object for each
 * @summary Read Werkingsgebied
 */
export const readWerkingsgebied = (
    params?: ReadWerkingsgebiedParams,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadWerkingsgebiedQueryKey = (
    params?: ReadWerkingsgebiedParams
) => [`/v0.1/werkingsgebieden`, ...(params ? [params] : [])]

export type ReadWerkingsgebiedQueryResult = NonNullable<
    Awaited<ReturnType<typeof readWerkingsgebied>>
>
export type ReadWerkingsgebiedQueryError = HTTPValidationError

export const useReadWerkingsgebied = <
    TData = Awaited<ReturnType<typeof readWerkingsgebied>>,
    TError = HTTPValidationError
>(
    params?: ReadWerkingsgebiedParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readWerkingsgebied>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadWerkingsgebiedQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readWerkingsgebied>>
    > = ({ signal }) => readWerkingsgebied(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readWerkingsgebied>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new werkingsgebied lineage
 * @summary Create Werkingsgebied
 */
export const createWerkingsgebied = (
    werkingsgebiedCreate: WerkingsgebiedCreate
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/werkingsgebieden`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedCreate,
    })
}

export type CreateWerkingsgebiedMutationResult = NonNullable<
    Awaited<ReturnType<typeof createWerkingsgebied>>
>
export type CreateWerkingsgebiedMutationBody = WerkingsgebiedCreate
export type CreateWerkingsgebiedMutationError = HTTPValidationError

export const useCreateWerkingsgebied = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createWerkingsgebied>>,
        TError,
        { data: WerkingsgebiedCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createWerkingsgebied>>,
        { data: WerkingsgebiedCreate }
    > = props => {
        const { data } = props ?? {}

        return createWerkingsgebied(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createWerkingsgebied>>,
        TError,
        { data: WerkingsgebiedCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the werkingsgebied versions by lineage
 * @summary Read Werkingsgebied Lineage
 */
export const readWerkingsgebiedLineage = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/werkingsgebieden/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadWerkingsgebiedLineageQueryKey = (lineageId: number) => [
    `/v0.1/werkingsgebieden/${lineageId}`,
]

export type ReadWerkingsgebiedLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readWerkingsgebiedLineage>>
>
export type ReadWerkingsgebiedLineageQueryError = HTTPValidationError

export const useReadWerkingsgebiedLineage = <
    TData = Awaited<ReturnType<typeof readWerkingsgebiedLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readWerkingsgebiedLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadWerkingsgebiedLineageQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readWerkingsgebiedLineage>>
    > = ({ signal }) => readWerkingsgebiedLineage(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readWerkingsgebiedLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new werkingsgebied to a lineage
 * @summary Update Werkingsgebied
 */
export const updateWerkingsgebied = (
    lineageId: number,
    werkingsgebiedUpdate: WerkingsgebiedUpdate
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/werkingsgebieden/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedUpdate,
    })
}

export type UpdateWerkingsgebiedMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateWerkingsgebied>>
>
export type UpdateWerkingsgebiedMutationBody = WerkingsgebiedUpdate
export type UpdateWerkingsgebiedMutationError = HTTPValidationError

export const useUpdateWerkingsgebied = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateWerkingsgebied>>,
        TError,
        { lineageId: number; data: WerkingsgebiedUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateWerkingsgebied>>,
        { lineageId: number; data: WerkingsgebiedUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateWerkingsgebied(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateWerkingsgebied>>,
        TError,
        { lineageId: number; data: WerkingsgebiedUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of werkingsgebied.
 * @summary Changes Werkingsgebied
 */
export const changesWerkingsgebied = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/werkingsgebieden/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesWerkingsgebiedQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/werkingsgebieden/${oldUuid}/${newUuid}`]

export type ChangesWerkingsgebiedQueryResult = NonNullable<
    Awaited<ReturnType<typeof changesWerkingsgebied>>
>
export type ChangesWerkingsgebiedQueryError = HTTPValidationError

export const useChangesWerkingsgebied = <
    TData = Awaited<ReturnType<typeof changesWerkingsgebied>>,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof changesWerkingsgebied>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesWerkingsgebiedQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof changesWerkingsgebied>>
    > = ({ signal }) => changesWerkingsgebied(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof changesWerkingsgebied>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the werkingsgebied lineages and shows the latests valid object for each.
 * @summary Read Valid Werkingsgebied
 */
export const readValidWerkingsgebied = (
    params?: ReadValidWerkingsgebiedParams,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/valid/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidWerkingsgebiedQueryKey = (
    params?: ReadValidWerkingsgebiedParams
) => [`/v0.1/valid/werkingsgebieden`, ...(params ? [params] : [])]

export type ReadValidWerkingsgebiedQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidWerkingsgebied>>
>
export type ReadValidWerkingsgebiedQueryError = HTTPValidationError

export const useReadValidWerkingsgebied = <
    TData = Awaited<ReturnType<typeof readValidWerkingsgebied>>,
    TError = HTTPValidationError
>(
    params?: ReadValidWerkingsgebiedParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidWerkingsgebied>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadValidWerkingsgebiedQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidWerkingsgebied>>
    > = ({ signal }) => readValidWerkingsgebied(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidWerkingsgebied>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the werkingsgebied in this lineage that are valid
 * @summary Read Valid Werkingsgebied Lineage
 */
export const readValidWerkingsgebiedLineage = (
    lineageId: number,
    params?: ReadValidWerkingsgebiedLineageParams,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/valid/werkingsgebieden/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidWerkingsgebiedLineageQueryKey = (
    lineageId: number,
    params?: ReadValidWerkingsgebiedLineageParams
) => [`/v0.1/valid/werkingsgebieden/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidWerkingsgebiedLineageQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidWerkingsgebiedLineage>>
>
export type ReadValidWerkingsgebiedLineageQueryError = HTTPValidationError

export const useReadValidWerkingsgebiedLineage = <
    TData = Awaited<ReturnType<typeof readValidWerkingsgebiedLineage>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidWerkingsgebiedLineageParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidWerkingsgebiedLineage>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidWerkingsgebiedLineageQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidWerkingsgebiedLineage>>
    > = ({ signal }) =>
        readValidWerkingsgebiedLineage(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidWerkingsgebiedLineage>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readWerkingsgebiedVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/version/werkingsgebieden/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadWerkingsgebiedVersionQueryKey = (objectUuid: string) => [
    `/v0.1/version/werkingsgebieden/${objectUuid}`,
]

export type ReadWerkingsgebiedVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof readWerkingsgebiedVersion>>
>
export type ReadWerkingsgebiedVersionQueryError = HTTPValidationError

export const useReadWerkingsgebiedVersion = <
    TData = Awaited<ReturnType<typeof readWerkingsgebiedVersion>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readWerkingsgebiedVersion>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadWerkingsgebiedVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readWerkingsgebiedVersion>>
    > = ({ signal }) => readWerkingsgebiedVersion(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readWerkingsgebiedVersion>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}
