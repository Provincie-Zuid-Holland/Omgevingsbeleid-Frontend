/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 3.0-alpha
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from '@tanstack/react-query'

import type {
    AmbitieGet,
    HTTPValidationError,
    AmbitiesValidGetParams,
    AmbitieBasic,
    AmbitiesValidLineageIdGetParams,
    RelationShort,
    ResponseOK,
    AmbitieStaticPostStatics,
    ModulesModuleIdObjectAmbitieLineageIdGetParams,
    AmbitieUUID,
    AmbitiePatch,
    BeleidsdoelGet,
    BeleidsdoelenValidGetParams,
    BeleidsdoelBasic,
    BeleidsdoelenValidLineageIdGetParams,
    BeleidsdoelStaticPatchStatics,
    ModulesModuleIdObjectBeleidsdoelLineageIdGetParams,
    BeleidsdoelUUID,
    BeleidsdoelPatch,
    BeleidskeuzeGet,
    BeleidskeuzesValidGetParams,
    BeleidskeuzeBasic,
    BeleidskeuzesValidLineageIdGetParams,
    BeleidskeuzeStaticPatchStatics,
    AcknowledgedRelation,
    BeleidskeuzeAcknowledgedRelationsLineageIdGetParams,
    RequestAcknowledgedRelation,
    EditAcknowledgedRelation,
    ModulesModuleIdObjectBeleidskeuzeLineageIdGetParams,
    BeleidskeuzeUUID,
    BeleidskeuzePatch,
    MaatregelGet,
    MaatregelenValidGetParams,
    MaatregelBasic,
    MaatregelenValidLineageIdGetParams,
    MaatregelStaticPatchStatics,
    ModulesModuleIdObjectMaatregelLineageIdGetParams,
    MaatregelUUID,
    MaatregelPatch,
    UserShort,
    Werkingsgebied,
    SearchResponse,
    SearchGetParams,
    GraphResponse,
    ObjectGraphGetParams,
    Module,
    ModulesGetParams,
    ModuleCreatedResponse,
    ModuleCreate,
    ModuleOverview,
    ModuleEdit,
    CompleteModule,
    ModuleStatus,
    ModulePatchStatus,
    NewObjectStaticResponse,
    ModuleAddNewObject,
    ModuleAddExistingObject,
    ModuleObjectContext,
    ModuleEditObjectContext,
    ModuleSnapshot,
    AuthToken,
    BodyFastapiHandlerLoginAccessTokenPost,
    PasswordResetPostParams,
} from './fetchers.schemas'
import { customInstance } from './instance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Get all the valid ambitie lineages and shows the latest object of each
 */
export const ambitiesValidGet = (
    params?: AmbitiesValidGetParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieGet[]>({
        url: `/ambities/valid`,
        method: 'get',
        params,
        signal,
    })
}

export const getAmbitiesValidGetQueryKey = (
    params?: AmbitiesValidGetParams
) => [`/ambities/valid`, ...(params ? [params] : [])]

export type AmbitiesValidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesValidGet>>
>
export type AmbitiesValidGetQueryError = HTTPValidationError

export const useAmbitiesValidGet = <
    TData = Awaited<ReturnType<typeof ambitiesValidGet>>,
    TError = HTTPValidationError
>(
    params?: AmbitiesValidGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof ambitiesValidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getAmbitiesValidGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitiesValidGet>>
    > = ({ signal }) => ambitiesValidGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof ambitiesValidGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid ambitie of a single lineage
 */
export const ambitiesValidLineageIdGet = (
    lineageId: number,
    params?: AmbitiesValidLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieBasic[]>({
        url: `/ambities/valid/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getAmbitiesValidLineageIdGetQueryKey = (
    lineageId: number,
    params?: AmbitiesValidLineageIdGetParams
) => [`/ambities/valid/${lineageId}`, ...(params ? [params] : [])]

export type AmbitiesValidLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesValidLineageIdGet>>
>
export type AmbitiesValidLineageIdGetQueryError = HTTPValidationError

export const useAmbitiesValidLineageIdGet = <
    TData = Awaited<ReturnType<typeof ambitiesValidLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: AmbitiesValidLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof ambitiesValidLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitiesValidLineageIdGetQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitiesValidLineageIdGet>>
    > = ({ signal }) => ambitiesValidLineageIdGet(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof ambitiesValidLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific ambitie by uuid
 */
export const ambitiesVersionObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieGet>({
        url: `/ambities/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getAmbitiesVersionObjectUuidGetQueryKey = (objectUuid: string) => [
    `/ambities/version/${objectUuid}`,
]

export type AmbitiesVersionObjectUuidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesVersionObjectUuidGet>>
>
export type AmbitiesVersionObjectUuidGetQueryError = HTTPValidationError

export const useAmbitiesVersionObjectUuidGet = <
    TData = Awaited<ReturnType<typeof ambitiesVersionObjectUuidGet>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof ambitiesVersionObjectUuidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitiesVersionObjectUuidGetQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitiesVersionObjectUuidGet>>
    > = ({ signal }) => ambitiesVersionObjectUuidGet(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof ambitiesVersionObjectUuidGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get latest lineage record for ambitie by their lineage id
 */
export const ambitiesLatestLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieGet>({
        url: `/ambities/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getAmbitiesLatestLineageIdGetQueryKey = (lineageId: number) => [
    `/ambities/latest/${lineageId}`,
]

export type AmbitiesLatestLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesLatestLineageIdGet>>
>
export type AmbitiesLatestLineageIdGetQueryError = HTTPValidationError

export const useAmbitiesLatestLineageIdGet = <
    TData = Awaited<ReturnType<typeof ambitiesLatestLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof ambitiesLatestLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitiesLatestLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitiesLatestLineageIdGet>>
    > = ({ signal }) => ambitiesLatestLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof ambitiesLatestLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all relation codes of the given ambitie lineage
 */
export const ambitiesRelationsLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<RelationShort[]>({
        url: `/ambities/relations/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getAmbitiesRelationsLineageIdGetQueryKey = (lineageId: number) => [
    `/ambities/relations/${lineageId}`,
]

export type AmbitiesRelationsLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesRelationsLineageIdGet>>
>
export type AmbitiesRelationsLineageIdGetQueryError = HTTPValidationError

export const useAmbitiesRelationsLineageIdGet = <
    TData = Awaited<ReturnType<typeof ambitiesRelationsLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof ambitiesRelationsLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitiesRelationsLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitiesRelationsLineageIdGet>>
    > = ({ signal }) => ambitiesRelationsLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof ambitiesRelationsLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given ambitie lineage
 */
export const ambitiesRelationsLineageIdPut = (
    lineageId: number,
    relationShort: RelationShort[]
) => {
    return customInstance<ResponseOK>({
        url: `/ambities/relations/${lineageId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: relationShort,
    })
}

export type AmbitiesRelationsLineageIdPutMutationResult = NonNullable<
    Awaited<ReturnType<typeof ambitiesRelationsLineageIdPut>>
>
export type AmbitiesRelationsLineageIdPutMutationBody = RelationShort[]
export type AmbitiesRelationsLineageIdPutMutationError = HTTPValidationError

export const useAmbitiesRelationsLineageIdPut = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitiesRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof ambitiesRelationsLineageIdPut>>,
        { lineageId: number; data: RelationShort[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return ambitiesRelationsLineageIdPut(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof ambitiesRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const ambitieStaticLineageIdPost = (
    lineageId: number,
    ambitieStaticPostStatics: AmbitieStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/ambitie/static/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieStaticPostStatics,
    })
}

export type AmbitieStaticLineageIdPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof ambitieStaticLineageIdPost>>
>
export type AmbitieStaticLineageIdPostMutationBody = AmbitieStaticPostStatics
export type AmbitieStaticLineageIdPostMutationError = HTTPValidationError

export const useAmbitieStaticLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitieStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: AmbitieStaticPostStatics },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof ambitieStaticLineageIdPost>>,
        { lineageId: number; data: AmbitieStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return ambitieStaticLineageIdPost(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof ambitieStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: AmbitieStaticPostStatics },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get all the ambitie of a single lineage in a module
 */
export const modulesModuleIdObjectAmbitieLineageIdGet = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectAmbitieLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieBasic[]>({
        url: `/modules/${moduleId}/object/ambitie/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getModulesModuleIdObjectAmbitieLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectAmbitieLineageIdGetParams
) => [
    `/modules/${moduleId}/object/ambitie/${lineageId}`,
    ...(params ? [params] : []),
]

export type ModulesModuleIdObjectAmbitieLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdGet>>
>
export type ModulesModuleIdObjectAmbitieLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectAmbitieLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectAmbitieLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectAmbitieLineageIdGetQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdGet>>
    > = ({ signal }) =>
        modulesModuleIdObjectAmbitieLineageIdGet(
            moduleId,
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Add a new version to the ambitie lineage in a module
 */
export const modulesModuleIdObjectAmbitieLineageIdPatch = (
    moduleId: number,
    lineageId: number,
    ambitiePatch: AmbitiePatch
) => {
    return customInstance<AmbitieUUID>({
        url: `/modules/${moduleId}/object/ambitie/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: ambitiePatch,
    })
}

export type ModulesModuleIdObjectAmbitieLineageIdPatchMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdPatch>>
    >
export type ModulesModuleIdObjectAmbitieLineageIdPatchMutationBody =
    AmbitiePatch
export type ModulesModuleIdObjectAmbitieLineageIdPatchMutationError =
    HTTPValidationError

export const useModulesModuleIdObjectAmbitieLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdPatch>>,
        TError,
        { moduleId: number; lineageId: number; data: AmbitiePatch },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdPatch>>,
        { moduleId: number; lineageId: number; data: AmbitiePatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return modulesModuleIdObjectAmbitieLineageIdPatch(
            moduleId,
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdObjectAmbitieLineageIdPatch>>,
        TError,
        { moduleId: number; lineageId: number; data: AmbitiePatch },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get latest lineage record for ambitie by their lineage id in a module
 */
export const modulesModuleIdObjectAmbitieLatestLineageIdGet = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieGet>({
        url: `/modules/${moduleId}/object/ambitie/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectAmbitieLatestLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number
) => [`/modules/${moduleId}/object/ambitie/latest/${lineageId}`]

export type ModulesModuleIdObjectAmbitieLatestLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieLatestLineageIdGet>
        >
    >
export type ModulesModuleIdObjectAmbitieLatestLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectAmbitieLatestLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectAmbitieLatestLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectAmbitieLatestLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectAmbitieLatestLineageIdGetQueryKey(
            moduleId,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieLatestLineageIdGet>
        >
    > = ({ signal }) =>
        modulesModuleIdObjectAmbitieLatestLineageIdGet(
            moduleId,
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieLatestLineageIdGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific ambitie by uuid in a module
 */
export const modulesModuleIdObjectAmbitieVersionObjectUuidGet = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieGet>({
        url: `/modules/${moduleId}/object/ambitie/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectAmbitieVersionObjectUuidGetQueryKey = (
    moduleId: number,
    objectUuid: string
) => [`/modules/${moduleId}/object/ambitie/version/${objectUuid}`]

export type ModulesModuleIdObjectAmbitieVersionObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieVersionObjectUuidGet>
        >
    >
export type ModulesModuleIdObjectAmbitieVersionObjectUuidGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectAmbitieVersionObjectUuidGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectAmbitieVersionObjectUuidGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectAmbitieVersionObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectAmbitieVersionObjectUuidGetQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieVersionObjectUuidGet>
        >
    > = ({ signal }) =>
        modulesModuleIdObjectAmbitieVersionObjectUuidGet(
            moduleId,
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectAmbitieVersionObjectUuidGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid beleidsdoel lineages and shows the latest object of each
 */
export const beleidsdoelenValidGet = (
    params?: BeleidsdoelenValidGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelGet[]>({
        url: `/beleidsdoelen/valid`,
        method: 'get',
        params,
        signal,
    })
}

export const getBeleidsdoelenValidGetQueryKey = (
    params?: BeleidsdoelenValidGetParams
) => [`/beleidsdoelen/valid`, ...(params ? [params] : [])]

export type BeleidsdoelenValidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenValidGet>>
>
export type BeleidsdoelenValidGetQueryError = HTTPValidationError

export const useBeleidsdoelenValidGet = <
    TData = Awaited<ReturnType<typeof beleidsdoelenValidGet>>,
    TError = HTTPValidationError
>(
    params?: BeleidsdoelenValidGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidsdoelenValidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getBeleidsdoelenValidGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelenValidGet>>
    > = ({ signal }) => beleidsdoelenValidGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidsdoelenValidGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid beleidsdoel of a single lineage
 */
export const beleidsdoelenValidLineageIdGet = (
    lineageId: number,
    params?: BeleidsdoelenValidLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelBasic[]>({
        url: `/beleidsdoelen/valid/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getBeleidsdoelenValidLineageIdGetQueryKey = (
    lineageId: number,
    params?: BeleidsdoelenValidLineageIdGetParams
) => [`/beleidsdoelen/valid/${lineageId}`, ...(params ? [params] : [])]

export type BeleidsdoelenValidLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenValidLineageIdGet>>
>
export type BeleidsdoelenValidLineageIdGetQueryError = HTTPValidationError

export const useBeleidsdoelenValidLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidsdoelenValidLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: BeleidsdoelenValidLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidsdoelenValidLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelenValidLineageIdGetQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelenValidLineageIdGet>>
    > = ({ signal }) =>
        beleidsdoelenValidLineageIdGet(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidsdoelenValidLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific beleidsdoel by uuid
 */
export const beleidsdoelenVersionObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelGet>({
        url: `/beleidsdoelen/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getBeleidsdoelenVersionObjectUuidGetQueryKey = (
    objectUuid: string
) => [`/beleidsdoelen/version/${objectUuid}`]

export type BeleidsdoelenVersionObjectUuidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenVersionObjectUuidGet>>
>
export type BeleidsdoelenVersionObjectUuidGetQueryError = HTTPValidationError

export const useBeleidsdoelenVersionObjectUuidGet = <
    TData = Awaited<ReturnType<typeof beleidsdoelenVersionObjectUuidGet>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidsdoelenVersionObjectUuidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelenVersionObjectUuidGetQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelenVersionObjectUuidGet>>
    > = ({ signal }) => beleidsdoelenVersionObjectUuidGet(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidsdoelenVersionObjectUuidGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id
 */
export const beleidsdoelenLatestLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelGet>({
        url: `/beleidsdoelen/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getBeleidsdoelenLatestLineageIdGetQueryKey = (
    lineageId: number
) => [`/beleidsdoelen/latest/${lineageId}`]

export type BeleidsdoelenLatestLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenLatestLineageIdGet>>
>
export type BeleidsdoelenLatestLineageIdGetQueryError = HTTPValidationError

export const useBeleidsdoelenLatestLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidsdoelenLatestLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidsdoelenLatestLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelenLatestLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelenLatestLineageIdGet>>
    > = ({ signal }) => beleidsdoelenLatestLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidsdoelenLatestLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all relation codes of the given beleidsdoel lineage
 */
export const beleidsdoelenRelationsLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<RelationShort[]>({
        url: `/beleidsdoelen/relations/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getBeleidsdoelenRelationsLineageIdGetQueryKey = (
    lineageId: number
) => [`/beleidsdoelen/relations/${lineageId}`]

export type BeleidsdoelenRelationsLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdGet>>
>
export type BeleidsdoelenRelationsLineageIdGetQueryError = HTTPValidationError

export const useBeleidsdoelenRelationsLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelenRelationsLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdGet>>
    > = ({ signal }) => beleidsdoelenRelationsLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given beleidsdoel lineage
 */
export const beleidsdoelenRelationsLineageIdPut = (
    lineageId: number,
    relationShort: RelationShort[]
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsdoelen/relations/${lineageId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: relationShort,
    })
}

export type BeleidsdoelenRelationsLineageIdPutMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdPut>>
>
export type BeleidsdoelenRelationsLineageIdPutMutationBody = RelationShort[]
export type BeleidsdoelenRelationsLineageIdPutMutationError =
    HTTPValidationError

export const useBeleidsdoelenRelationsLineageIdPut = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdPut>>,
        { lineageId: number; data: RelationShort[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsdoelenRelationsLineageIdPut(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof beleidsdoelenRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const beleidsdoelStaticLineageIdPost = (
    lineageId: number,
    beleidsdoelStaticPatchStatics: BeleidsdoelStaticPatchStatics
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsdoel/static/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelStaticPatchStatics,
    })
}

export type BeleidsdoelStaticLineageIdPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelStaticLineageIdPost>>
>
export type BeleidsdoelStaticLineageIdPostMutationBody =
    BeleidsdoelStaticPatchStatics
export type BeleidsdoelStaticLineageIdPostMutationError = HTTPValidationError

export const useBeleidsdoelStaticLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: BeleidsdoelStaticPatchStatics },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsdoelStaticLineageIdPost>>,
        { lineageId: number; data: BeleidsdoelStaticPatchStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsdoelStaticLineageIdPost(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof beleidsdoelStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: BeleidsdoelStaticPatchStatics },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get all the beleidsdoel of a single lineage in a module
 */
export const modulesModuleIdObjectBeleidsdoelLineageIdGet = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidsdoelLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelBasic[]>({
        url: `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getModulesModuleIdObjectBeleidsdoelLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidsdoelLineageIdGetParams
) => [
    `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
    ...(params ? [params] : []),
]

export type ModulesModuleIdObjectBeleidsdoelLineageIdGetQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdGet>>
    >
export type ModulesModuleIdObjectBeleidsdoelLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidsdoelLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidsdoelLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidsdoelLineageIdGetQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdGet>>
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidsdoelLineageIdGet(
            moduleId,
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Add a new version to the beleidsdoel lineage in a module
 */
export const modulesModuleIdObjectBeleidsdoelLineageIdPatch = (
    moduleId: number,
    lineageId: number,
    beleidsdoelPatch: BeleidsdoelPatch
) => {
    return customInstance<BeleidsdoelUUID>({
        url: `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelPatch,
    })
}

export type ModulesModuleIdObjectBeleidsdoelLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdPatch>
        >
    >
export type ModulesModuleIdObjectBeleidsdoelLineageIdPatchMutationBody =
    BeleidsdoelPatch
export type ModulesModuleIdObjectBeleidsdoelLineageIdPatchMutationError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidsdoelLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdPatch>
        >,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return modulesModuleIdObjectBeleidsdoelLineageIdPatch(
            moduleId,
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidsdoelLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id in a module
 */
export const modulesModuleIdObjectBeleidsdoelLatestLineageIdGet = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelGet>({
        url: `/modules/${moduleId}/object/beleidsdoel/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number
) => [`/modules/${moduleId}/object/beleidsdoel/latest/${lineageId}`]

export type ModulesModuleIdObjectBeleidsdoelLatestLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelLatestLineageIdGet
            >
        >
    >
export type ModulesModuleIdObjectBeleidsdoelLatestLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidsdoelLatestLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidsdoelLatestLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectBeleidsdoelLatestLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidsdoelLatestLineageIdGetQueryKey(
            moduleId,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelLatestLineageIdGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidsdoelLatestLineageIdGet(
            moduleId,
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelLatestLineageIdGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific beleidsdoel by uuid in a module
 */
export const modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelGet>({
        url: `/modules/${moduleId}/object/beleidsdoel/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetQueryKey = (
    moduleId: number,
    objectUuid: string
) => [`/modules/${moduleId}/object/beleidsdoel/version/${objectUuid}`]

export type ModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet
            >
        >
    >
export type ModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidsdoelVersionObjectUuidGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidsdoelVersionObjectUuidGetQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet(
            moduleId,
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidsdoelVersionObjectUuidGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid beleidskeuze lineages and shows the latest object of each
 */
export const beleidskeuzesValidGet = (
    params?: BeleidskeuzesValidGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeGet[]>({
        url: `/beleidskeuzes/valid`,
        method: 'get',
        params,
        signal,
    })
}

export const getBeleidskeuzesValidGetQueryKey = (
    params?: BeleidskeuzesValidGetParams
) => [`/beleidskeuzes/valid`, ...(params ? [params] : [])]

export type BeleidskeuzesValidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesValidGet>>
>
export type BeleidskeuzesValidGetQueryError = HTTPValidationError

export const useBeleidskeuzesValidGet = <
    TData = Awaited<ReturnType<typeof beleidskeuzesValidGet>>,
    TError = HTTPValidationError
>(
    params?: BeleidskeuzesValidGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidskeuzesValidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getBeleidskeuzesValidGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzesValidGet>>
    > = ({ signal }) => beleidskeuzesValidGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidskeuzesValidGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid beleidskeuze of a single lineage
 */
export const beleidskeuzesValidLineageIdGet = (
    lineageId: number,
    params?: BeleidskeuzesValidLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeBasic[]>({
        url: `/beleidskeuzes/valid/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getBeleidskeuzesValidLineageIdGetQueryKey = (
    lineageId: number,
    params?: BeleidskeuzesValidLineageIdGetParams
) => [`/beleidskeuzes/valid/${lineageId}`, ...(params ? [params] : [])]

export type BeleidskeuzesValidLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesValidLineageIdGet>>
>
export type BeleidskeuzesValidLineageIdGetQueryError = HTTPValidationError

export const useBeleidskeuzesValidLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidskeuzesValidLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: BeleidskeuzesValidLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidskeuzesValidLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzesValidLineageIdGetQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzesValidLineageIdGet>>
    > = ({ signal }) =>
        beleidskeuzesValidLineageIdGet(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidskeuzesValidLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific beleidskeuze by uuid
 */
export const beleidskeuzesVersionObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeGet>({
        url: `/beleidskeuzes/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getBeleidskeuzesVersionObjectUuidGetQueryKey = (
    objectUuid: string
) => [`/beleidskeuzes/version/${objectUuid}`]

export type BeleidskeuzesVersionObjectUuidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesVersionObjectUuidGet>>
>
export type BeleidskeuzesVersionObjectUuidGetQueryError = HTTPValidationError

export const useBeleidskeuzesVersionObjectUuidGet = <
    TData = Awaited<ReturnType<typeof beleidskeuzesVersionObjectUuidGet>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidskeuzesVersionObjectUuidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzesVersionObjectUuidGetQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzesVersionObjectUuidGet>>
    > = ({ signal }) => beleidskeuzesVersionObjectUuidGet(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidskeuzesVersionObjectUuidGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id
 */
export const beleidskeuzesLatestLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeGet>({
        url: `/beleidskeuzes/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getBeleidskeuzesLatestLineageIdGetQueryKey = (
    lineageId: number
) => [`/beleidskeuzes/latest/${lineageId}`]

export type BeleidskeuzesLatestLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesLatestLineageIdGet>>
>
export type BeleidskeuzesLatestLineageIdGetQueryError = HTTPValidationError

export const useBeleidskeuzesLatestLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidskeuzesLatestLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidskeuzesLatestLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzesLatestLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzesLatestLineageIdGet>>
    > = ({ signal }) => beleidskeuzesLatestLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidskeuzesLatestLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all relation codes of the given beleidskeuze lineage
 */
export const beleidskeuzesRelationsLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<RelationShort[]>({
        url: `/beleidskeuzes/relations/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getBeleidskeuzesRelationsLineageIdGetQueryKey = (
    lineageId: number
) => [`/beleidskeuzes/relations/${lineageId}`]

export type BeleidskeuzesRelationsLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdGet>>
>
export type BeleidskeuzesRelationsLineageIdGetQueryError = HTTPValidationError

export const useBeleidskeuzesRelationsLineageIdGet = <
    TData = Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzesRelationsLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdGet>>
    > = ({ signal }) => beleidskeuzesRelationsLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given beleidskeuze lineage
 */
export const beleidskeuzesRelationsLineageIdPut = (
    lineageId: number,
    relationShort: RelationShort[]
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuzes/relations/${lineageId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: relationShort,
    })
}

export type BeleidskeuzesRelationsLineageIdPutMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdPut>>
>
export type BeleidskeuzesRelationsLineageIdPutMutationBody = RelationShort[]
export type BeleidskeuzesRelationsLineageIdPutMutationError =
    HTTPValidationError

export const useBeleidskeuzesRelationsLineageIdPut = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdPut>>,
        { lineageId: number; data: RelationShort[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzesRelationsLineageIdPut(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof beleidskeuzesRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const beleidskeuzeStaticLineageIdPost = (
    lineageId: number,
    beleidskeuzeStaticPatchStatics: BeleidskeuzeStaticPatchStatics
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/static/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeStaticPatchStatics,
    })
}

export type BeleidskeuzeStaticLineageIdPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeStaticLineageIdPost>>
>
export type BeleidskeuzeStaticLineageIdPostMutationBody =
    BeleidskeuzeStaticPatchStatics
export type BeleidskeuzeStaticLineageIdPostMutationError = HTTPValidationError

export const useBeleidskeuzeStaticLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzeStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: BeleidskeuzeStaticPatchStatics },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzeStaticLineageIdPost>>,
        { lineageId: number; data: BeleidskeuzeStaticPatchStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzeStaticLineageIdPost(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof beleidskeuzeStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: BeleidskeuzeStaticPatchStatics },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get all acknowledged relations of the given beleidskeuze lineage
 */
export const beleidskeuzeAcknowledgedRelationsLineageIdGet = (
    lineageId: number,
    params?: BeleidskeuzeAcknowledgedRelationsLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<AcknowledgedRelation[]>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getBeleidskeuzeAcknowledgedRelationsLineageIdGetQueryKey = (
    lineageId: number,
    params?: BeleidskeuzeAcknowledgedRelationsLineageIdGetParams
) => [
    `/beleidskeuze/acknowledged-relations/${lineageId}`,
    ...(params ? [params] : []),
]

export type BeleidskeuzeAcknowledgedRelationsLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdGet>
        >
    >
export type BeleidskeuzeAcknowledgedRelationsLineageIdGetQueryError =
    HTTPValidationError

export const useBeleidskeuzeAcknowledgedRelationsLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: BeleidskeuzeAcknowledgedRelationsLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeAcknowledgedRelationsLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdGet>
        >
    > = ({ signal }) =>
        beleidskeuzeAcknowledgedRelationsLineageIdGet(lineageId, params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Request an acknowledged relation to another object
 */
export const beleidskeuzeAcknowledgedRelationsLineageIdPost = (
    lineageId: number,
    requestAcknowledgedRelation: RequestAcknowledgedRelation
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: requestAcknowledgedRelation,
    })
}

export type BeleidskeuzeAcknowledgedRelationsLineageIdPostMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdPost>
        >
    >
export type BeleidskeuzeAcknowledgedRelationsLineageIdPostMutationBody =
    RequestAcknowledgedRelation
export type BeleidskeuzeAcknowledgedRelationsLineageIdPostMutationError =
    HTTPValidationError

export const useBeleidskeuzeAcknowledgedRelationsLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdPost>
        >,
        TError,
        { lineageId: number; data: RequestAcknowledgedRelation },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdPost>
        >,
        { lineageId: number; data: RequestAcknowledgedRelation }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzeAcknowledgedRelationsLineageIdPost(lineageId, data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof beleidskeuzeAcknowledgedRelationsLineageIdPost>
        >,
        TError,
        { lineageId: number; data: RequestAcknowledgedRelation },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Edit an acknowledged relation
 */
export const beleidskeuzeAcknowledgedRelationsLineageIdEditPost = (
    lineageId: number,
    editAcknowledgedRelation: EditAcknowledgedRelation
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}/edit`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: editAcknowledgedRelation,
    })
}

export type BeleidskeuzeAcknowledgedRelationsLineageIdEditPostMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof beleidskeuzeAcknowledgedRelationsLineageIdEditPost
            >
        >
    >
export type BeleidskeuzeAcknowledgedRelationsLineageIdEditPostMutationBody =
    EditAcknowledgedRelation
export type BeleidskeuzeAcknowledgedRelationsLineageIdEditPostMutationError =
    HTTPValidationError

export const useBeleidskeuzeAcknowledgedRelationsLineageIdEditPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof beleidskeuzeAcknowledgedRelationsLineageIdEditPost
            >
        >,
        TError,
        { lineageId: number; data: EditAcknowledgedRelation },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof beleidskeuzeAcknowledgedRelationsLineageIdEditPost
            >
        >,
        { lineageId: number; data: EditAcknowledgedRelation }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzeAcknowledgedRelationsLineageIdEditPost(
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof beleidskeuzeAcknowledgedRelationsLineageIdEditPost
            >
        >,
        TError,
        { lineageId: number; data: EditAcknowledgedRelation },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get all the beleidskeuze of a single lineage in a module
 */
export const modulesModuleIdObjectBeleidskeuzeLineageIdGet = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidskeuzeLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeBasic[]>({
        url: `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getModulesModuleIdObjectBeleidskeuzeLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidskeuzeLineageIdGetParams
) => [
    `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
    ...(params ? [params] : []),
]

export type ModulesModuleIdObjectBeleidskeuzeLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdGet>
        >
    >
export type ModulesModuleIdObjectBeleidskeuzeLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidskeuzeLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectBeleidskeuzeLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidskeuzeLineageIdGetQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdGet>
        >
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidskeuzeLineageIdGet(
            moduleId,
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Add a new version to the beleidskeuze lineage in a module
 */
export const modulesModuleIdObjectBeleidskeuzeLineageIdPatch = (
    moduleId: number,
    lineageId: number,
    beleidskeuzePatch: BeleidskeuzePatch
) => {
    return customInstance<BeleidskeuzeUUID>({
        url: `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzePatch,
    })
}

export type ModulesModuleIdObjectBeleidskeuzeLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdPatch>
        >
    >
export type ModulesModuleIdObjectBeleidskeuzeLineageIdPatchMutationBody =
    BeleidskeuzePatch
export type ModulesModuleIdObjectBeleidskeuzeLineageIdPatchMutationError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidskeuzeLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdPatch>
        >,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return modulesModuleIdObjectBeleidskeuzeLineageIdPatch(
            moduleId,
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id in a module
 */
export const modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeGet>({
        url: `/modules/${moduleId}/object/beleidskeuze/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number
) => [`/modules/${moduleId}/object/beleidskeuze/latest/${lineageId}`]

export type ModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet
            >
        >
    >
export type ModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidskeuzeLatestLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidskeuzeLatestLineageIdGetQueryKey(
            moduleId,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet(
            moduleId,
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeLatestLineageIdGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific beleidskeuze by uuid in a module
 */
export const modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeGet>({
        url: `/modules/${moduleId}/object/beleidskeuze/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetQueryKey =
    (moduleId: number, objectUuid: string) => [
        `/modules/${moduleId}/object/beleidskeuze/version/${objectUuid}`,
    ]

export type ModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet
            >
        >
    >
export type ModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectBeleidskeuzeVersionObjectUuidGetQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet(
            moduleId,
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectBeleidskeuzeVersionObjectUuidGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid maatregel lineages and shows the latest object of each
 */
export const maatregelenValidGet = (
    params?: MaatregelenValidGetParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelGet[]>({
        url: `/maatregelen/valid`,
        method: 'get',
        params,
        signal,
    })
}

export const getMaatregelenValidGetQueryKey = (
    params?: MaatregelenValidGetParams
) => [`/maatregelen/valid`, ...(params ? [params] : [])]

export type MaatregelenValidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenValidGet>>
>
export type MaatregelenValidGetQueryError = HTTPValidationError

export const useMaatregelenValidGet = <
    TData = Awaited<ReturnType<typeof maatregelenValidGet>>,
    TError = HTTPValidationError
>(
    params?: MaatregelenValidGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof maatregelenValidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getMaatregelenValidGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelenValidGet>>
    > = ({ signal }) => maatregelenValidGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof maatregelenValidGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all the valid maatregel of a single lineage
 */
export const maatregelenValidLineageIdGet = (
    lineageId: number,
    params?: MaatregelenValidLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelBasic[]>({
        url: `/maatregelen/valid/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getMaatregelenValidLineageIdGetQueryKey = (
    lineageId: number,
    params?: MaatregelenValidLineageIdGetParams
) => [`/maatregelen/valid/${lineageId}`, ...(params ? [params] : [])]

export type MaatregelenValidLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenValidLineageIdGet>>
>
export type MaatregelenValidLineageIdGetQueryError = HTTPValidationError

export const useMaatregelenValidLineageIdGet = <
    TData = Awaited<ReturnType<typeof maatregelenValidLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: MaatregelenValidLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof maatregelenValidLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelenValidLineageIdGetQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelenValidLineageIdGet>>
    > = ({ signal }) => maatregelenValidLineageIdGet(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof maatregelenValidLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific maatregel by uuid
 */
export const maatregelenVersionObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelGet>({
        url: `/maatregelen/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getMaatregelenVersionObjectUuidGetQueryKey = (
    objectUuid: string
) => [`/maatregelen/version/${objectUuid}`]

export type MaatregelenVersionObjectUuidGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenVersionObjectUuidGet>>
>
export type MaatregelenVersionObjectUuidGetQueryError = HTTPValidationError

export const useMaatregelenVersionObjectUuidGet = <
    TData = Awaited<ReturnType<typeof maatregelenVersionObjectUuidGet>>,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof maatregelenVersionObjectUuidGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelenVersionObjectUuidGetQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelenVersionObjectUuidGet>>
    > = ({ signal }) => maatregelenVersionObjectUuidGet(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof maatregelenVersionObjectUuidGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get latest lineage record for maatregel by their lineage id
 */
export const maatregelenLatestLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelGet>({
        url: `/maatregelen/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getMaatregelenLatestLineageIdGetQueryKey = (lineageId: number) => [
    `/maatregelen/latest/${lineageId}`,
]

export type MaatregelenLatestLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenLatestLineageIdGet>>
>
export type MaatregelenLatestLineageIdGetQueryError = HTTPValidationError

export const useMaatregelenLatestLineageIdGet = <
    TData = Awaited<ReturnType<typeof maatregelenLatestLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof maatregelenLatestLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelenLatestLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelenLatestLineageIdGet>>
    > = ({ signal }) => maatregelenLatestLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof maatregelenLatestLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get all relation codes of the given maatregel lineage
 */
export const maatregelenRelationsLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<RelationShort[]>({
        url: `/maatregelen/relations/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getMaatregelenRelationsLineageIdGetQueryKey = (
    lineageId: number
) => [`/maatregelen/relations/${lineageId}`]

export type MaatregelenRelationsLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenRelationsLineageIdGet>>
>
export type MaatregelenRelationsLineageIdGetQueryError = HTTPValidationError

export const useMaatregelenRelationsLineageIdGet = <
    TData = Awaited<ReturnType<typeof maatregelenRelationsLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof maatregelenRelationsLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelenRelationsLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelenRelationsLineageIdGet>>
    > = ({ signal }) => maatregelenRelationsLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof maatregelenRelationsLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given maatregel lineage
 */
export const maatregelenRelationsLineageIdPut = (
    lineageId: number,
    relationShort: RelationShort[]
) => {
    return customInstance<ResponseOK>({
        url: `/maatregelen/relations/${lineageId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: relationShort,
    })
}

export type MaatregelenRelationsLineageIdPutMutationResult = NonNullable<
    Awaited<ReturnType<typeof maatregelenRelationsLineageIdPut>>
>
export type MaatregelenRelationsLineageIdPutMutationBody = RelationShort[]
export type MaatregelenRelationsLineageIdPutMutationError = HTTPValidationError

export const useMaatregelenRelationsLineageIdPut = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelenRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof maatregelenRelationsLineageIdPut>>,
        { lineageId: number; data: RelationShort[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return maatregelenRelationsLineageIdPut(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof maatregelenRelationsLineageIdPut>>,
        TError,
        { lineageId: number; data: RelationShort[] },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const maatregelStaticLineageIdPost = (
    lineageId: number,
    maatregelStaticPatchStatics: MaatregelStaticPatchStatics
) => {
    return customInstance<ResponseOK>({
        url: `/maatregel/static/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelStaticPatchStatics,
    })
}

export type MaatregelStaticLineageIdPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof maatregelStaticLineageIdPost>>
>
export type MaatregelStaticLineageIdPostMutationBody =
    MaatregelStaticPatchStatics
export type MaatregelStaticLineageIdPostMutationError = HTTPValidationError

export const useMaatregelStaticLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: MaatregelStaticPatchStatics },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof maatregelStaticLineageIdPost>>,
        { lineageId: number; data: MaatregelStaticPatchStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return maatregelStaticLineageIdPost(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof maatregelStaticLineageIdPost>>,
        TError,
        { lineageId: number; data: MaatregelStaticPatchStatics },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get all the maatregel of a single lineage in a module
 */
export const modulesModuleIdObjectMaatregelLineageIdGet = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectMaatregelLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelBasic[]>({
        url: `/modules/${moduleId}/object/maatregel/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getModulesModuleIdObjectMaatregelLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectMaatregelLineageIdGetParams
) => [
    `/modules/${moduleId}/object/maatregel/${lineageId}`,
    ...(params ? [params] : []),
]

export type ModulesModuleIdObjectMaatregelLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdGet>>
>
export type ModulesModuleIdObjectMaatregelLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectMaatregelLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    params?: ModulesModuleIdObjectMaatregelLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectMaatregelLineageIdGetQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdGet>>
    > = ({ signal }) =>
        modulesModuleIdObjectMaatregelLineageIdGet(
            moduleId,
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Add a new version to the maatregel lineage in a module
 */
export const modulesModuleIdObjectMaatregelLineageIdPatch = (
    moduleId: number,
    lineageId: number,
    maatregelPatch: MaatregelPatch
) => {
    return customInstance<MaatregelUUID>({
        url: `/modules/${moduleId}/object/maatregel/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelPatch,
    })
}

export type ModulesModuleIdObjectMaatregelLineageIdPatchMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdPatch>>
    >
export type ModulesModuleIdObjectMaatregelLineageIdPatchMutationBody =
    MaatregelPatch
export type ModulesModuleIdObjectMaatregelLineageIdPatchMutationError =
    HTTPValidationError

export const useModulesModuleIdObjectMaatregelLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: MaatregelPatch },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdPatch>
        >,
        { moduleId: number; lineageId: number; data: MaatregelPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return modulesModuleIdObjectMaatregelLineageIdPatch(
            moduleId,
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLineageIdPatch>
        >,
        TError,
        { moduleId: number; lineageId: number; data: MaatregelPatch },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get latest lineage record for maatregel by their lineage id in a module
 */
export const modulesModuleIdObjectMaatregelLatestLineageIdGet = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelGet>({
        url: `/modules/${moduleId}/object/maatregel/latest/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectMaatregelLatestLineageIdGetQueryKey = (
    moduleId: number,
    lineageId: number
) => [`/modules/${moduleId}/object/maatregel/latest/${lineageId}`]

export type ModulesModuleIdObjectMaatregelLatestLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLatestLineageIdGet>
        >
    >
export type ModulesModuleIdObjectMaatregelLatestLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectMaatregelLatestLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectMaatregelLatestLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectMaatregelLatestLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectMaatregelLatestLineageIdGetQueryKey(
            moduleId,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLatestLineageIdGet>
        >
    > = ({ signal }) =>
        modulesModuleIdObjectMaatregelLatestLineageIdGet(
            moduleId,
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof modulesModuleIdObjectMaatregelLatestLineageIdGet>
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get specific maatregel by uuid in a module
 */
export const modulesModuleIdObjectMaatregelVersionObjectUuidGet = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelGet>({
        url: `/modules/${moduleId}/object/maatregel/version/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectMaatregelVersionObjectUuidGetQueryKey = (
    moduleId: number,
    objectUuid: string
) => [`/modules/${moduleId}/object/maatregel/version/${objectUuid}`]

export type ModulesModuleIdObjectMaatregelVersionObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectMaatregelVersionObjectUuidGet
            >
        >
    >
export type ModulesModuleIdObjectMaatregelVersionObjectUuidGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectMaatregelVersionObjectUuidGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectMaatregelVersionObjectUuidGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectMaatregelVersionObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectMaatregelVersionObjectUuidGetQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectMaatregelVersionObjectUuidGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectMaatregelVersionObjectUuidGet(
            moduleId,
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectMaatregelVersionObjectUuidGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary List the users
 */
export const usersGet = (signal?: AbortSignal) => {
    return customInstance<UserShort[]>({ url: `/users`, method: 'get', signal })
}

export const getUsersGetQueryKey = () => [`/users`]

export type UsersGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof usersGet>>
>
export type UsersGetQueryError = unknown

export const useUsersGet = <
    TData = Awaited<ReturnType<typeof usersGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getUsersGetQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGet>>> = ({
        signal,
    }) => usersGet(signal)

    const query = useQuery<Awaited<ReturnType<typeof usersGet>>, TError, TData>(
        { queryKey, queryFn, ...queryOptions }
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary List the werkingsgebieden
 */
export const werkingsgebiedenGet = (signal?: AbortSignal) => {
    return customInstance<Werkingsgebied[]>({
        url: `/werkingsgebieden`,
        method: 'get',
        signal,
    })
}

export const getWerkingsgebiedenGetQueryKey = () => [`/werkingsgebieden`]

export type WerkingsgebiedenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedenGet>>
>
export type WerkingsgebiedenGetQueryError = unknown

export const useWerkingsgebiedenGet = <
    TData = Awaited<ReturnType<typeof werkingsgebiedenGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedenGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getWerkingsgebiedenGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedenGet>>
    > = ({ signal }) => werkingsgebiedenGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof werkingsgebiedenGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Search for objects
 */
export const searchGet = (params: SearchGetParams, signal?: AbortSignal) => {
    return customInstance<SearchResponse>({
        url: `/search`,
        method: 'get',
        params,
        signal,
    })
}

export const getSearchGetQueryKey = (params: SearchGetParams) => [
    `/search`,
    ...(params ? [params] : []),
]

export type SearchGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchGet>>
>
export type SearchGetQueryError = HTTPValidationError

export const useSearchGet = <
    TData = Awaited<ReturnType<typeof searchGet>>,
    TError = HTTPValidationError
>(
    params: SearchGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof searchGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchGetQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGet>>> = ({
        signal,
    }) => searchGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof searchGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary A graph representation
 */
export const fullGraphGet = (signal?: AbortSignal) => {
    return customInstance<GraphResponse>({
        url: `/full-graph`,
        method: 'get',
        signal,
    })
}

export const getFullGraphGetQueryKey = () => [`/full-graph`]

export type FullGraphGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof fullGraphGet>>
>
export type FullGraphGetQueryError = unknown

export const useFullGraphGet = <
    TData = Awaited<ReturnType<typeof fullGraphGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof fullGraphGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFullGraphGetQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fullGraphGet>>> = ({
        signal,
    }) => fullGraphGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof fullGraphGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary A graph representation of an object
 */
export const objectGraphGet = (
    params: ObjectGraphGetParams,
    signal?: AbortSignal
) => {
    return customInstance<GraphResponse>({
        url: `/object-graph`,
        method: 'get',
        params,
        signal,
    })
}

export const getObjectGraphGetQueryKey = (params: ObjectGraphGetParams) => [
    `/object-graph`,
    ...(params ? [params] : []),
]

export type ObjectGraphGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof objectGraphGet>>
>
export type ObjectGraphGetQueryError = HTTPValidationError

export const useObjectGraphGet = <
    TData = Awaited<ReturnType<typeof objectGraphGet>>,
    TError = HTTPValidationError
>(
    params: ObjectGraphGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof objectGraphGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getObjectGraphGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof objectGraphGet>>
    > = ({ signal }) => objectGraphGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof objectGraphGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary List the modules
 */
export const modulesGet = (params?: ModulesGetParams, signal?: AbortSignal) => {
    return customInstance<Module[]>({
        url: `/modules`,
        method: 'get',
        params,
        signal,
    })
}

export const getModulesGetQueryKey = (params?: ModulesGetParams) => [
    `/modules`,
    ...(params ? [params] : []),
]

export type ModulesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesGet>>
>
export type ModulesGetQueryError = HTTPValidationError

export const useModulesGet = <
    TData = Awaited<ReturnType<typeof modulesGet>>,
    TError = HTTPValidationError
>(
    params?: ModulesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof modulesGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getModulesGetQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modulesGet>>> = ({
        signal,
    }) => modulesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof modulesGet>>,
        TError,
        TData
    >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<
        TData,
        TError
    > & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Create new module
 */
export const modulesPost = (moduleCreate: ModuleCreate) => {
    return customInstance<ModuleCreatedResponse>({
        url: `/modules`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: moduleCreate,
    })
}

export type ModulesPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPost>>
>
export type ModulesPostMutationBody = ModuleCreate
export type ModulesPostMutationError = HTTPValidationError

export const useModulesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPost>>,
        TError,
        { data: ModuleCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPost>>,
        { data: ModuleCreate }
    > = props => {
        const { data } = props ?? {}

        return modulesPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesPost>>,
        TError,
        { data: ModuleCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get overview of a module
 */
export const modulesModuleIdGet = (moduleId: number, signal?: AbortSignal) => {
    return customInstance<ModuleOverview>({
        url: `/modules/${moduleId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdGetQueryKey = (moduleId: number) => [
    `/modules/${moduleId}`,
]

export type ModulesModuleIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdGet>>
>
export type ModulesModuleIdGetQueryError = HTTPValidationError

export const useModulesModuleIdGet = <
    TData = Awaited<ReturnType<typeof modulesModuleIdGet>>,
    TError = HTTPValidationError
>(
    moduleId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof modulesModuleIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getModulesModuleIdGetQueryKey(moduleId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdGet>>
    > = ({ signal }) => modulesModuleIdGet(moduleId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof modulesModuleIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!moduleId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Edit module
 */
export const modulesModuleIdPost = (
    moduleId: number,
    moduleEdit: ModuleEdit
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: moduleEdit,
    })
}

export type ModulesModuleIdPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdPost>>
>
export type ModulesModuleIdPostMutationBody = ModuleEdit
export type ModulesModuleIdPostMutationError = HTTPValidationError

export const useModulesModuleIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdPost>>,
        TError,
        { moduleId: number; data: ModuleEdit },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdPost>>,
        { moduleId: number; data: ModuleEdit }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesModuleIdPost(moduleId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdPost>>,
        TError,
        { moduleId: number; data: ModuleEdit },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Activate a module
 */
export const modulesModuleIdActivatePost = (moduleId: number) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/activate`,
        method: 'post',
    })
}

export type ModulesModuleIdActivatePostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdActivatePost>>
>

export type ModulesModuleIdActivatePostMutationError = HTTPValidationError

export const useModulesModuleIdActivatePost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdActivatePost>>,
        TError,
        { moduleId: number },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdActivatePost>>,
        { moduleId: number }
    > = props => {
        const { moduleId } = props ?? {}

        return modulesModuleIdActivatePost(moduleId)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdActivatePost>>,
        TError,
        { moduleId: number },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Complete a module (Successful)
 */
export const modulesModuleIdCompletePost = (
    moduleId: number,
    completeModule: CompleteModule
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/complete`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: completeModule,
    })
}

export type ModulesModuleIdCompletePostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdCompletePost>>
>
export type ModulesModuleIdCompletePostMutationBody = CompleteModule
export type ModulesModuleIdCompletePostMutationError = HTTPValidationError

export const useModulesModuleIdCompletePost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdCompletePost>>,
        TError,
        { moduleId: number; data: CompleteModule },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdCompletePost>>,
        { moduleId: number; data: CompleteModule }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesModuleIdCompletePost(moduleId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdCompletePost>>,
        TError,
        { moduleId: number; data: CompleteModule },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Close a module (Unsuccessful)
 */
export const modulesModuleIdClosePost = (moduleId: number) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/close`,
        method: 'post',
    })
}

export type ModulesModuleIdClosePostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdClosePost>>
>

export type ModulesModuleIdClosePostMutationError = HTTPValidationError

export const useModulesModuleIdClosePost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdClosePost>>,
        TError,
        { moduleId: number },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdClosePost>>,
        { moduleId: number }
    > = props => {
        const { moduleId } = props ?? {}

        return modulesModuleIdClosePost(moduleId)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdClosePost>>,
        TError,
        { moduleId: number },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get status history of the module
 */
export const modulesModuleIdStatusGet = (
    moduleId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleStatus[]>({
        url: `/modules/${moduleId}/status`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdStatusGetQueryKey = (moduleId: number) => [
    `/modules/${moduleId}/status`,
]

export type ModulesModuleIdStatusGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdStatusGet>>
>
export type ModulesModuleIdStatusGetQueryError = HTTPValidationError

export const useModulesModuleIdStatusGet = <
    TData = Awaited<ReturnType<typeof modulesModuleIdStatusGet>>,
    TError = HTTPValidationError
>(
    moduleId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof modulesModuleIdStatusGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getModulesModuleIdStatusGetQueryKey(moduleId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdStatusGet>>
    > = ({ signal }) => modulesModuleIdStatusGet(moduleId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof modulesModuleIdStatusGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!moduleId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Patch the status of the module
 */
export const modulesModuleIdStatusPatch = (
    moduleId: number,
    modulePatchStatus: ModulePatchStatus
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/status`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: modulePatchStatus,
    })
}

export type ModulesModuleIdStatusPatchMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdStatusPatch>>
>
export type ModulesModuleIdStatusPatchMutationBody = ModulePatchStatus
export type ModulesModuleIdStatusPatchMutationError = HTTPValidationError

export const useModulesModuleIdStatusPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdStatusPatch>>,
        TError,
        { moduleId: number; data: ModulePatchStatus },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdStatusPatch>>,
        { moduleId: number; data: ModulePatchStatus }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesModuleIdStatusPatch(moduleId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdStatusPatch>>,
        TError,
        { moduleId: number; data: ModulePatchStatus },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Add new object to the module
 */
export const modulesModuleIdAddNewObjectPost = (
    moduleId: number,
    moduleAddNewObject: ModuleAddNewObject
) => {
    return customInstance<NewObjectStaticResponse>({
        url: `/modules/${moduleId}/add-new-object`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: moduleAddNewObject,
    })
}

export type ModulesModuleIdAddNewObjectPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdAddNewObjectPost>>
>
export type ModulesModuleIdAddNewObjectPostMutationBody = ModuleAddNewObject
export type ModulesModuleIdAddNewObjectPostMutationError = HTTPValidationError

export const useModulesModuleIdAddNewObjectPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdAddNewObjectPost>>,
        TError,
        { moduleId: number; data: ModuleAddNewObject },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdAddNewObjectPost>>,
        { moduleId: number; data: ModuleAddNewObject }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesModuleIdAddNewObjectPost(moduleId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdAddNewObjectPost>>,
        TError,
        { moduleId: number; data: ModuleAddNewObject },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Add existing object to the module
 */
export const modulesModuleIdAddExistingObjectPost = (
    moduleId: number,
    moduleAddExistingObject: ModuleAddExistingObject
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/add-existing-object`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: moduleAddExistingObject,
    })
}

export type ModulesModuleIdAddExistingObjectPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdAddExistingObjectPost>>
>
export type ModulesModuleIdAddExistingObjectPostMutationBody =
    ModuleAddExistingObject
export type ModulesModuleIdAddExistingObjectPostMutationError =
    HTTPValidationError

export const useModulesModuleIdAddExistingObjectPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesModuleIdAddExistingObjectPost>>,
        TError,
        { moduleId: number; data: ModuleAddExistingObject },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesModuleIdAddExistingObjectPost>>,
        { moduleId: number; data: ModuleAddExistingObject }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesModuleIdAddExistingObjectPost(moduleId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof modulesModuleIdAddExistingObjectPost>>,
        TError,
        { moduleId: number; data: ModuleAddExistingObject },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get context of object in the module
 */
export const modulesModuleIdObjectContextObjectTypeLineageIdGet = (
    moduleId: number,
    objectType: string,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleObjectContext>({
        url: `/modules/${moduleId}/object-context/${objectType}/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdObjectContextObjectTypeLineageIdGetQueryKey = (
    moduleId: number,
    objectType: string,
    lineageId: number
) => [`/modules/${moduleId}/object-context/${objectType}/${lineageId}`]

export type ModulesModuleIdObjectContextObjectTypeLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdGet
            >
        >
    >
export type ModulesModuleIdObjectContextObjectTypeLineageIdGetQueryError =
    HTTPValidationError

export const useModulesModuleIdObjectContextObjectTypeLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof modulesModuleIdObjectContextObjectTypeLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    moduleId: number,
    objectType: string,
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof modulesModuleIdObjectContextObjectTypeLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdObjectContextObjectTypeLineageIdGetQueryKey(
            moduleId,
            objectType,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdGet
            >
        >
    > = ({ signal }) =>
        modulesModuleIdObjectContextObjectTypeLineageIdGet(
            moduleId,
            objectType,
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdGet
            >
        >,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectType && lineageId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Edit context of object in the module
 */
export const modulesModuleIdObjectContextObjectTypeLineageIdPost = (
    moduleId: number,
    objectType: string,
    lineageId: number,
    moduleEditObjectContext: ModuleEditObjectContext
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/object-context/${objectType}/${lineageId}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: moduleEditObjectContext,
    })
}

export type ModulesModuleIdObjectContextObjectTypeLineageIdPostMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdPost
            >
        >
    >
export type ModulesModuleIdObjectContextObjectTypeLineageIdPostMutationBody =
    ModuleEditObjectContext
export type ModulesModuleIdObjectContextObjectTypeLineageIdPostMutationError =
    HTTPValidationError

export const useModulesModuleIdObjectContextObjectTypeLineageIdPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdPost
            >
        >,
        TError,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdPost
            >
        >,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        }
    > = props => {
        const { moduleId, objectType, lineageId, data } = props ?? {}

        return modulesModuleIdObjectContextObjectTypeLineageIdPost(
            moduleId,
            objectType,
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof modulesModuleIdObjectContextObjectTypeLineageIdPost
            >
        >,
        TError,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Remove object from the module
 */
export const modulesModuleIdRemoveObjectTypeLineageIdDelete = (
    moduleId: number,
    objectType: string,
    lineageId: number
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/remove/${objectType}/${lineageId}`,
        method: 'delete',
    })
}

export type ModulesModuleIdRemoveObjectTypeLineageIdDeleteMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof modulesModuleIdRemoveObjectTypeLineageIdDelete>
        >
    >

export type ModulesModuleIdRemoveObjectTypeLineageIdDeleteMutationError =
    HTTPValidationError

export const useModulesModuleIdRemoveObjectTypeLineageIdDelete = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof modulesModuleIdRemoveObjectTypeLineageIdDelete>
        >,
        TError,
        { moduleId: number; objectType: string; lineageId: number },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof modulesModuleIdRemoveObjectTypeLineageIdDelete>
        >,
        { moduleId: number; objectType: string; lineageId: number }
    > = props => {
        const { moduleId, objectType, lineageId } = props ?? {}

        return modulesModuleIdRemoveObjectTypeLineageIdDelete(
            moduleId,
            objectType,
            lineageId
        )
    }

    return useMutation<
        Awaited<
            ReturnType<typeof modulesModuleIdRemoveObjectTypeLineageIdDelete>
        >,
        TError,
        { moduleId: number; objectType: string; lineageId: number },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get snapshot of a module by status id
 */
export const modulesModuleIdSnapshotStatusIdGet = (
    moduleId: number,
    statusId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleSnapshot>({
        url: `/modules/${moduleId}/snapshot/${statusId}`,
        method: 'get',
        signal,
    })
}

export const getModulesModuleIdSnapshotStatusIdGetQueryKey = (
    moduleId: number,
    statusId: number
) => [`/modules/${moduleId}/snapshot/${statusId}`]

export type ModulesModuleIdSnapshotStatusIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesModuleIdSnapshotStatusIdGet>>
>
export type ModulesModuleIdSnapshotStatusIdGetQueryError = HTTPValidationError

export const useModulesModuleIdSnapshotStatusIdGet = <
    TData = Awaited<ReturnType<typeof modulesModuleIdSnapshotStatusIdGet>>,
    TError = HTTPValidationError
>(
    moduleId: number,
    statusId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof modulesModuleIdSnapshotStatusIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesModuleIdSnapshotStatusIdGetQueryKey(moduleId, statusId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesModuleIdSnapshotStatusIdGet>>
    > = ({ signal }) =>
        modulesModuleIdSnapshotStatusIdGet(moduleId, statusId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof modulesModuleIdSnapshotStatusIdGet>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!(moduleId && statusId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Login an user and receive a JWT token
 */
export const loginAccessTokenPost = (
    bodyFastapiHandlerLoginAccessTokenPost: BodyFastapiHandlerLoginAccessTokenPost
) => {
    const formUrlEncoded = new URLSearchParams()
    if (bodyFastapiHandlerLoginAccessTokenPost.grant_type !== undefined) {
        formUrlEncoded.append(
            'grant_type',
            bodyFastapiHandlerLoginAccessTokenPost.grant_type
        )
    }
    formUrlEncoded.append(
        'username',
        bodyFastapiHandlerLoginAccessTokenPost.username
    )
    formUrlEncoded.append(
        'password',
        bodyFastapiHandlerLoginAccessTokenPost.password
    )
    if (bodyFastapiHandlerLoginAccessTokenPost.scope !== undefined) {
        formUrlEncoded.append(
            'scope',
            bodyFastapiHandlerLoginAccessTokenPost.scope
        )
    }
    if (bodyFastapiHandlerLoginAccessTokenPost.client_id !== undefined) {
        formUrlEncoded.append(
            'client_id',
            bodyFastapiHandlerLoginAccessTokenPost.client_id
        )
    }
    if (bodyFastapiHandlerLoginAccessTokenPost.client_secret !== undefined) {
        formUrlEncoded.append(
            'client_secret',
            bodyFastapiHandlerLoginAccessTokenPost.client_secret
        )
    }

    return customInstance<AuthToken>({
        url: `/login/access-token`,
        method: 'post',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded,
    })
}

export type LoginAccessTokenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof loginAccessTokenPost>>
>
export type LoginAccessTokenPostMutationBody =
    BodyFastapiHandlerLoginAccessTokenPost
export type LoginAccessTokenPostMutationError = HTTPValidationError

export const useLoginAccessTokenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof loginAccessTokenPost>>,
        TError,
        { data: BodyFastapiHandlerLoginAccessTokenPost },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof loginAccessTokenPost>>,
        { data: BodyFastapiHandlerLoginAccessTokenPost }
    > = props => {
        const { data } = props ?? {}

        return loginAccessTokenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof loginAccessTokenPost>>,
        TError,
        { data: BodyFastapiHandlerLoginAccessTokenPost },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Changes password for a user
 */
export const passwordResetPost = (params: PasswordResetPostParams) => {
    return customInstance<ResponseOK>({
        url: `/password-reset`,
        method: 'post',
        params,
    })
}

export type PasswordResetPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof passwordResetPost>>
>

export type PasswordResetPostMutationError = HTTPValidationError

export const usePasswordResetPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof passwordResetPost>>,
        TError,
        { params: PasswordResetPostParams },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof passwordResetPost>>,
        { params: PasswordResetPostParams }
    > = props => {
        const { params } = props ?? {}

        return passwordResetPost(params)
    }

    return useMutation<
        Awaited<ReturnType<typeof passwordResetPost>>,
        TError,
        { params: PasswordResetPostParams },
        TContext
    >(mutationFn, mutationOptions)
}
