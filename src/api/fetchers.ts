/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * This API serves all the object that make up the policies of a provincial government
 * OpenAPI spec version: 0.0.2
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from '@tanstack/react-query'

import type {
    AmbitiesRead,
    GetAmbities400,
    GetAmbitiesParams,
    PostAmbities400,
    PostAmbities403,
    PostAmbities500,
    AmbitiesWrite,
    GetAmbitiesLineageId404,
    GetAmbitiesLineageIdParams,
    PatchAmbitiesLineageId400,
    PatchAmbitiesLineageId403,
    PatchAmbitiesLineageId500,
    BelangenRead,
    GetBelangen400,
    GetBelangenParams,
    PostBelangen400,
    PostBelangen403,
    PostBelangen500,
    BelangenWrite,
    GetBelangenLineageId404,
    GetBelangenLineageIdParams,
    PatchBelangenLineageId400,
    PatchBelangenLineageId403,
    PatchBelangenLineageId500,
    BeleidsdoelenRead,
    GetBeleidsdoelen400,
    GetBeleidsdoelenParams,
    PostBeleidsdoelen400,
    PostBeleidsdoelen403,
    PostBeleidsdoelen500,
    BeleidsdoelenWrite,
    GetBeleidsdoelenLineageId404,
    GetBeleidsdoelenLineageIdParams,
    PatchBeleidsdoelenLineageId400,
    PatchBeleidsdoelenLineageId403,
    PatchBeleidsdoelenLineageId500,
    BeleidskeuzesRead,
    GetBeleidskeuzes400,
    GetBeleidskeuzesParams,
    PostBeleidskeuzes400,
    PostBeleidskeuzes403,
    PostBeleidskeuzes500,
    BeleidskeuzesWrite,
    GetBeleidskeuzesLineageId404,
    GetBeleidskeuzesLineageIdParams,
    PatchBeleidskeuzesLineageId400,
    PatchBeleidskeuzesLineageId403,
    PatchBeleidskeuzesLineageId500,
    BeleidsmodulesRead,
    GetBeleidsmodules400,
    GetBeleidsmodulesParams,
    PostBeleidsmodules400,
    PostBeleidsmodules403,
    PostBeleidsmodules500,
    BeleidsmodulesWrite,
    GetBeleidsmodulesLineageId404,
    GetBeleidsmodulesLineageIdParams,
    PatchBeleidsmodulesLineageId400,
    PatchBeleidsmodulesLineageId403,
    PatchBeleidsmodulesLineageId500,
    BeleidsprestatiesRead,
    GetBeleidsprestaties400,
    GetBeleidsprestatiesParams,
    PostBeleidsprestaties400,
    PostBeleidsprestaties403,
    PostBeleidsprestaties500,
    BeleidsprestatiesWrite,
    GetBeleidsprestatiesLineageId404,
    GetBeleidsprestatiesLineageIdParams,
    PatchBeleidsprestatiesLineageId400,
    PatchBeleidsprestatiesLineageId403,
    PatchBeleidsprestatiesLineageId500,
    BeleidsregelsRead,
    GetBeleidsregels400,
    GetBeleidsregelsParams,
    PostBeleidsregels400,
    PostBeleidsregels403,
    PostBeleidsregels500,
    BeleidsregelsWrite,
    GetBeleidsregelsLineageId404,
    GetBeleidsregelsLineageIdParams,
    PatchBeleidsregelsLineageId400,
    PatchBeleidsregelsLineageId403,
    PatchBeleidsregelsLineageId500,
    BeleidsrelatiesRead,
    GetBeleidsrelaties400,
    GetBeleidsrelatiesParams,
    PostBeleidsrelaties400,
    PostBeleidsrelaties403,
    PostBeleidsrelaties500,
    BeleidsrelatiesWrite,
    GetBeleidsrelatiesLineageId404,
    GetBeleidsrelatiesLineageIdParams,
    PatchBeleidsrelatiesLineageId400,
    PatchBeleidsrelatiesLineageId403,
    PatchBeleidsrelatiesLineageId500,
    GetChangesAmbitiesOldUuidNewUuid200,
    GetChangesAmbitiesOldUuidNewUuid404,
    GetChangesAmbitiesOldUuidNewUuid500,
    GetChangesBelangenOldUuidNewUuid200,
    GetChangesBelangenOldUuidNewUuid404,
    GetChangesBelangenOldUuidNewUuid500,
    GetChangesBeleidsdoelenOldUuidNewUuid200,
    GetChangesBeleidsdoelenOldUuidNewUuid404,
    GetChangesBeleidsdoelenOldUuidNewUuid500,
    GetChangesBeleidskeuzesOldUuidNewUuid200,
    GetChangesBeleidskeuzesOldUuidNewUuid404,
    GetChangesBeleidskeuzesOldUuidNewUuid500,
    GetChangesBeleidsmodulesOldUuidNewUuid200,
    GetChangesBeleidsmodulesOldUuidNewUuid404,
    GetChangesBeleidsmodulesOldUuidNewUuid500,
    GetChangesBeleidsprestatiesOldUuidNewUuid200,
    GetChangesBeleidsprestatiesOldUuidNewUuid404,
    GetChangesBeleidsprestatiesOldUuidNewUuid500,
    GetChangesBeleidsregelsOldUuidNewUuid200,
    GetChangesBeleidsregelsOldUuidNewUuid404,
    GetChangesBeleidsregelsOldUuidNewUuid500,
    GetChangesBeleidsrelatiesOldUuidNewUuid200,
    GetChangesBeleidsrelatiesOldUuidNewUuid404,
    GetChangesBeleidsrelatiesOldUuidNewUuid500,
    GetChangesGebiedsprogrammasOldUuidNewUuid200,
    GetChangesGebiedsprogrammasOldUuidNewUuid404,
    GetChangesGebiedsprogrammasOldUuidNewUuid500,
    GetChangesMaatregelenOldUuidNewUuid200,
    GetChangesMaatregelenOldUuidNewUuid404,
    GetChangesMaatregelenOldUuidNewUuid500,
    GetChangesThemasOldUuidNewUuid200,
    GetChangesThemasOldUuidNewUuid404,
    GetChangesThemasOldUuidNewUuid500,
    GetChangesVerordeningenOldUuidNewUuid200,
    GetChangesVerordeningenOldUuidNewUuid404,
    GetChangesVerordeningenOldUuidNewUuid500,
    GetChangesWerkingsgebiedenOldUuidNewUuid200,
    GetChangesWerkingsgebiedenOldUuidNewUuid404,
    GetChangesWerkingsgebiedenOldUuidNewUuid500,
    GetEdits200Item,
    GebiedsprogrammasRead,
    GetGebiedsprogrammas400,
    GetGebiedsprogrammasParams,
    PostGebiedsprogrammas400,
    PostGebiedsprogrammas403,
    PostGebiedsprogrammas500,
    GebiedsprogrammasWrite,
    GetGebiedsprogrammasLineageId404,
    GetGebiedsprogrammasLineageIdParams,
    PatchGebiedsprogrammasLineageId400,
    PatchGebiedsprogrammasLineageId403,
    PatchGebiedsprogrammasLineageId500,
    GebruikersRead,
    GetGraph200,
    PostLogin200,
    PostLogin400,
    PostLogin401,
    PostLoginBody,
    MaatregelenRead,
    GetMaatregelen400,
    GetMaatregelenParams,
    PostMaatregelen400,
    PostMaatregelen403,
    PostMaatregelen500,
    MaatregelenWrite,
    GetMaatregelenLineageId404,
    GetMaatregelenLineageIdParams,
    PatchMaatregelenLineageId400,
    PatchMaatregelenLineageId403,
    PatchMaatregelenLineageId500,
    PostPasswordReset200,
    PostPasswordReset400,
    PostPasswordReset401,
    PostPasswordResetBody,
    GetSearch200,
    GetSearch400,
    GetSearch403,
    GetSearchParams,
    GetSearchGeo200,
    GetSearchGeo400,
    GetSearchGeo403,
    GetSearchGeoParams,
    PostSearchGeo200,
    PostSearchGeo400,
    PostSearchGeo403,
    PostSearchGeoBody,
    ThemasRead,
    GetThemas400,
    GetThemasParams,
    PostThemas400,
    PostThemas403,
    PostThemas500,
    ThemasWrite,
    GetThemasLineageId404,
    GetThemasLineageIdParams,
    PatchThemasLineageId400,
    PatchThemasLineageId403,
    PatchThemasLineageId500,
    GetTokeninfo200,
    GetValidAmbities404,
    GetValidAmbitiesParams,
    GetValidAmbitiesLineageId404,
    GetValidAmbitiesLineageIdParams,
    GetValidBelangen404,
    GetValidBelangenParams,
    GetValidBelangenLineageId404,
    GetValidBelangenLineageIdParams,
    GetValidBeleidsdoelen404,
    GetValidBeleidsdoelenParams,
    GetValidBeleidsdoelenLineageId404,
    GetValidBeleidsdoelenLineageIdParams,
    GetValidBeleidskeuzes404,
    GetValidBeleidskeuzesParams,
    GetValidBeleidskeuzesLineageId404,
    GetValidBeleidskeuzesLineageIdParams,
    GetValidBeleidsmodules404,
    GetValidBeleidsmodulesParams,
    GetValidBeleidsmodulesLineageId404,
    GetValidBeleidsmodulesLineageIdParams,
    GetValidBeleidsprestaties404,
    GetValidBeleidsprestatiesParams,
    GetValidBeleidsprestatiesLineageId404,
    GetValidBeleidsprestatiesLineageIdParams,
    GetValidBeleidsregels404,
    GetValidBeleidsregelsParams,
    GetValidBeleidsregelsLineageId404,
    GetValidBeleidsregelsLineageIdParams,
    GetValidBeleidsrelaties404,
    GetValidBeleidsrelatiesParams,
    GetValidBeleidsrelatiesLineageId404,
    GetValidBeleidsrelatiesLineageIdParams,
    GetValidGebiedsprogrammas404,
    GetValidGebiedsprogrammasParams,
    GetValidGebiedsprogrammasLineageId404,
    GetValidGebiedsprogrammasLineageIdParams,
    GetValidMaatregelen404,
    GetValidMaatregelenParams,
    GetValidMaatregelenLineageId404,
    GetValidMaatregelenLineageIdParams,
    GetValidThemas404,
    GetValidThemasParams,
    GetValidThemasLineageId404,
    GetValidThemasLineageIdParams,
    VerordeningenRead,
    GetValidVerordeningen404,
    GetValidVerordeningenParams,
    GetValidVerordeningenLineageId404,
    GetValidVerordeningenLineageIdParams,
    WerkingsgebiedenRead,
    GetValidWerkingsgebieden404,
    GetValidWerkingsgebiedenParams,
    GetValidWerkingsgebiedenLineageId404,
    GetValidWerkingsgebiedenLineageIdParams,
    GetVerordeningen400,
    GetVerordeningenParams,
    PostVerordeningen400,
    PostVerordeningen403,
    PostVerordeningen500,
    VerordeningenWrite,
    GetVerordeningenLineageId404,
    GetVerordeningenLineageIdParams,
    PatchVerordeningenLineageId400,
    PatchVerordeningenLineageId403,
    PatchVerordeningenLineageId500,
    GetVersionAmbitiesObjectUuid404,
    GetVersionBelangenObjectUuid404,
    GetVersionBeleidsdoelenObjectUuid404,
    GetVersionBeleidskeuzesObjectUuid404,
    GetVersionBeleidsmodulesObjectUuid404,
    GetVersionBeleidsprestatiesObjectUuid404,
    GetVersionBeleidsregelsObjectUuid404,
    GetVersionBeleidsrelatiesObjectUuid404,
    GetVersionGebiedsprogrammasObjectUuid404,
    GetVersionMaatregelenObjectUuid404,
    GetVersionThemasObjectUuid404,
    GetVersionVerordeningenObjectUuid404,
    GetVersionWerkingsgebiedenObjectUuid404,
    GetWerkingsgebieden400,
    GetWerkingsgebiedenParams,
    GetWerkingsgebiedenLineageId404,
    GetWerkingsgebiedenLineageIdParams,
} from './fetchers.schemas'
import { customInstance } from './instance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getAmbities = (
    params?: GetAmbitiesParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetAmbitiesQueryKey = (params?: GetAmbitiesParams) => [
    `/ambities`,
    ...(params ? [params] : []),
]

export type GetAmbitiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAmbities>>
>
export type GetAmbitiesQueryError = GetAmbities400

export const useGetAmbities = <
    TData = Awaited<ReturnType<typeof getAmbities>>,
    TError = GetAmbities400
>(
    params?: GetAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getAmbities>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAmbitiesQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAmbities>>> = ({
        signal,
    }) => getAmbities(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getAmbities>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new ambities lineage
 */
export const postAmbities = (ambitiesWrite: AmbitiesWrite) => {
    return customInstance<AmbitiesRead>({
        url: `/ambities`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: ambitiesWrite,
    })
}

export type PostAmbitiesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postAmbities>>
>
export type PostAmbitiesMutationBody = AmbitiesWrite
export type PostAmbitiesMutationError =
    | PostAmbities400
    | PostAmbities403
    | PostAmbities500

export const usePostAmbities = <
    TError = PostAmbities400 | PostAmbities403 | PostAmbities500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postAmbities>>,
        TError,
        { data: AmbitiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postAmbities>>,
        { data: AmbitiesWrite }
    > = props => {
        const { data } = props ?? {}

        return postAmbities(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postAmbities>>,
        TError,
        { data: AmbitiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getAmbitiesLineageId = (
    lineageId: number,
    params?: GetAmbitiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/ambities/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetAmbitiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetAmbitiesLineageIdParams
) => [`/ambities/${lineageId}`, ...(params ? [params] : [])]

export type GetAmbitiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAmbitiesLineageId>>
>
export type GetAmbitiesLineageIdQueryError = GetAmbitiesLineageId404

export const useGetAmbitiesLineageId = <
    TData = Awaited<ReturnType<typeof getAmbitiesLineageId>>,
    TError = GetAmbitiesLineageId404
>(
    lineageId: number,
    params?: GetAmbitiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getAmbitiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetAmbitiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getAmbitiesLineageId>>
    > = ({ signal }) => getAmbitiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getAmbitiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new ambities to a lineage
 */
export const patchAmbitiesLineageId = (
    lineageId: number,
    ambitiesWrite: AmbitiesWrite
) => {
    return customInstance<AmbitiesRead>({
        url: `/ambities/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: ambitiesWrite,
    })
}

export type PatchAmbitiesLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchAmbitiesLineageId>>
>
export type PatchAmbitiesLineageIdMutationBody = AmbitiesWrite
export type PatchAmbitiesLineageIdMutationError =
    | PatchAmbitiesLineageId400
    | PatchAmbitiesLineageId403
    | PatchAmbitiesLineageId500

export const usePatchAmbitiesLineageId = <
    TError =
        | PatchAmbitiesLineageId400
        | PatchAmbitiesLineageId403
        | PatchAmbitiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchAmbitiesLineageId>>,
        TError,
        { lineageId: number; data: AmbitiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchAmbitiesLineageId>>,
        { lineageId: number; data: AmbitiesWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchAmbitiesLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchAmbitiesLineageId>>,
        TError,
        { lineageId: number; data: AmbitiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getBelangen = (
    params?: GetBelangenParams,
    signal?: AbortSignal
) => {
    return customInstance<BelangenRead[]>({
        url: `/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBelangenQueryKey = (params?: GetBelangenParams) => [
    `/belangen`,
    ...(params ? [params] : []),
]

export type GetBelangenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBelangen>>
>
export type GetBelangenQueryError = GetBelangen400

export const useGetBelangen = <
    TData = Awaited<ReturnType<typeof getBelangen>>,
    TError = GetBelangen400
>(
    params?: GetBelangenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBelangen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetBelangenQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBelangen>>> = ({
        signal,
    }) => getBelangen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBelangen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new belangen lineage
 */
export const postBelangen = (belangenWrite: BelangenWrite) => {
    return customInstance<BelangenRead>({
        url: `/belangen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: belangenWrite,
    })
}

export type PostBelangenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBelangen>>
>
export type PostBelangenMutationBody = BelangenWrite
export type PostBelangenMutationError =
    | PostBelangen400
    | PostBelangen403
    | PostBelangen500

export const usePostBelangen = <
    TError = PostBelangen400 | PostBelangen403 | PostBelangen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBelangen>>,
        TError,
        { data: BelangenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBelangen>>,
        { data: BelangenWrite }
    > = props => {
        const { data } = props ?? {}

        return postBelangen(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBelangen>>,
        TError,
        { data: BelangenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getBelangenLineageId = (
    lineageId: number,
    params?: GetBelangenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BelangenRead[]>({
        url: `/belangen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBelangenLineageIdQueryKey = (
    lineageId: number,
    params?: GetBelangenLineageIdParams
) => [`/belangen/${lineageId}`, ...(params ? [params] : [])]

export type GetBelangenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBelangenLineageId>>
>
export type GetBelangenLineageIdQueryError = GetBelangenLineageId404

export const useGetBelangenLineageId = <
    TData = Awaited<ReturnType<typeof getBelangenLineageId>>,
    TError = GetBelangenLineageId404
>(
    lineageId: number,
    params?: GetBelangenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBelangenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBelangenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBelangenLineageId>>
    > = ({ signal }) => getBelangenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBelangenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new belangen to a lineage
 */
export const patchBelangenLineageId = (
    lineageId: number,
    belangenWrite: BelangenWrite
) => {
    return customInstance<BelangenRead>({
        url: `/belangen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: belangenWrite,
    })
}

export type PatchBelangenLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBelangenLineageId>>
>
export type PatchBelangenLineageIdMutationBody = BelangenWrite
export type PatchBelangenLineageIdMutationError =
    | PatchBelangenLineageId400
    | PatchBelangenLineageId403
    | PatchBelangenLineageId500

export const usePatchBelangenLineageId = <
    TError =
        | PatchBelangenLineageId400
        | PatchBelangenLineageId403
        | PatchBelangenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBelangenLineageId>>,
        TError,
        { lineageId: number; data: BelangenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBelangenLineageId>>,
        { lineageId: number; data: BelangenWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBelangenLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBelangenLineageId>>,
        TError,
        { lineageId: number; data: BelangenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getBeleidsdoelen = (
    params?: GetBeleidsdoelenParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsdoelenQueryKey = (
    params?: GetBeleidsdoelenParams
) => [`/beleidsdoelen`, ...(params ? [params] : [])]

export type GetBeleidsdoelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsdoelen>>
>
export type GetBeleidsdoelenQueryError = GetBeleidsdoelen400

export const useGetBeleidsdoelen = <
    TData = Awaited<ReturnType<typeof getBeleidsdoelen>>,
    TError = GetBeleidsdoelen400
>(
    params?: GetBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsdoelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsdoelen>>
    > = ({ signal }) => getBeleidsdoelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsdoelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidsdoelen lineage
 */
export const postBeleidsdoelen = (beleidsdoelenWrite: BeleidsdoelenWrite) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/beleidsdoelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelenWrite,
    })
}

export type PostBeleidsdoelenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidsdoelen>>
>
export type PostBeleidsdoelenMutationBody = BeleidsdoelenWrite
export type PostBeleidsdoelenMutationError =
    | PostBeleidsdoelen400
    | PostBeleidsdoelen403
    | PostBeleidsdoelen500

export const usePostBeleidsdoelen = <
    TError = PostBeleidsdoelen400 | PostBeleidsdoelen403 | PostBeleidsdoelen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidsdoelen>>,
        TError,
        { data: BeleidsdoelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidsdoelen>>,
        { data: BeleidsdoelenWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidsdoelen(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidsdoelen>>,
        TError,
        { data: BeleidsdoelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getBeleidsdoelenLineageId = (
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsdoelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams
) => [`/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidsdoelenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsdoelenLineageId>>
>
export type GetBeleidsdoelenLineageIdQueryError = GetBeleidsdoelenLineageId404

export const useGetBeleidsdoelenLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidsdoelenLineageId>>,
    TError = GetBeleidsdoelenLineageId404
>(
    lineageId: number,
    params?: GetBeleidsdoelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsdoelenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsdoelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsdoelenLineageId>>
    > = ({ signal }) => getBeleidsdoelenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsdoelenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidsdoelen to a lineage
 */
export const patchBeleidsdoelenLineageId = (
    lineageId: number,
    beleidsdoelenWrite: BeleidsdoelenWrite
) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/beleidsdoelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelenWrite,
    })
}

export type PatchBeleidsdoelenLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidsdoelenLineageId>>
>
export type PatchBeleidsdoelenLineageIdMutationBody = BeleidsdoelenWrite
export type PatchBeleidsdoelenLineageIdMutationError =
    | PatchBeleidsdoelenLineageId400
    | PatchBeleidsdoelenLineageId403
    | PatchBeleidsdoelenLineageId500

export const usePatchBeleidsdoelenLineageId = <
    TError =
        | PatchBeleidsdoelenLineageId400
        | PatchBeleidsdoelenLineageId403
        | PatchBeleidsdoelenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidsdoelenLineageId>>,
        TError,
        { lineageId: number; data: BeleidsdoelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidsdoelenLineageId>>,
        { lineageId: number; data: BeleidsdoelenWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidsdoelenLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidsdoelenLineageId>>,
        TError,
        { lineageId: number; data: BeleidsdoelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getBeleidskeuzes = (
    params?: GetBeleidskeuzesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidskeuzesQueryKey = (
    params?: GetBeleidskeuzesParams
) => [`/beleidskeuzes`, ...(params ? [params] : [])]

export type GetBeleidskeuzesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidskeuzes>>
>
export type GetBeleidskeuzesQueryError = GetBeleidskeuzes400

export const useGetBeleidskeuzes = <
    TData = Awaited<ReturnType<typeof getBeleidskeuzes>>,
    TError = GetBeleidskeuzes400
>(
    params?: GetBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidskeuzes>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidskeuzes>>
    > = ({ signal }) => getBeleidskeuzes(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidskeuzes>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidskeuzes lineage
 */
export const postBeleidskeuzes = (beleidskeuzesWrite: BeleidskeuzesWrite) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/beleidskeuzes`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzesWrite,
    })
}

export type PostBeleidskeuzesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidskeuzes>>
>
export type PostBeleidskeuzesMutationBody = BeleidskeuzesWrite
export type PostBeleidskeuzesMutationError =
    | PostBeleidskeuzes400
    | PostBeleidskeuzes403
    | PostBeleidskeuzes500

export const usePostBeleidskeuzes = <
    TError = PostBeleidskeuzes400 | PostBeleidskeuzes403 | PostBeleidskeuzes500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidskeuzes>>,
        TError,
        { data: BeleidskeuzesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidskeuzes>>,
        { data: BeleidskeuzesWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidskeuzes(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidskeuzes>>,
        TError,
        { data: BeleidskeuzesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getBeleidskeuzesLineageId = (
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidskeuzesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams
) => [`/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidskeuzesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidskeuzesLineageId>>
>
export type GetBeleidskeuzesLineageIdQueryError = GetBeleidskeuzesLineageId404

export const useGetBeleidskeuzesLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidskeuzesLineageId>>,
    TError = GetBeleidskeuzesLineageId404
>(
    lineageId: number,
    params?: GetBeleidskeuzesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidskeuzesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidskeuzesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidskeuzesLineageId>>
    > = ({ signal }) => getBeleidskeuzesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidskeuzesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidskeuzes to a lineage
 */
export const patchBeleidskeuzesLineageId = (
    lineageId: number,
    beleidskeuzesWrite: BeleidskeuzesWrite
) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/beleidskeuzes/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzesWrite,
    })
}

export type PatchBeleidskeuzesLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidskeuzesLineageId>>
>
export type PatchBeleidskeuzesLineageIdMutationBody = BeleidskeuzesWrite
export type PatchBeleidskeuzesLineageIdMutationError =
    | PatchBeleidskeuzesLineageId400
    | PatchBeleidskeuzesLineageId403
    | PatchBeleidskeuzesLineageId500

export const usePatchBeleidskeuzesLineageId = <
    TError =
        | PatchBeleidskeuzesLineageId400
        | PatchBeleidskeuzesLineageId403
        | PatchBeleidskeuzesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidskeuzesLineageId>>,
        TError,
        { lineageId: number; data: BeleidskeuzesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidskeuzesLineageId>>,
        { lineageId: number; data: BeleidskeuzesWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidskeuzesLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidskeuzesLineageId>>,
        TError,
        { lineageId: number; data: BeleidskeuzesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getBeleidsmodules = (
    params?: GetBeleidsmodulesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsmodulesQueryKey = (
    params?: GetBeleidsmodulesParams
) => [`/beleidsmodules`, ...(params ? [params] : [])]

export type GetBeleidsmodulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsmodules>>
>
export type GetBeleidsmodulesQueryError = GetBeleidsmodules400

export const useGetBeleidsmodules = <
    TData = Awaited<ReturnType<typeof getBeleidsmodules>>,
    TError = GetBeleidsmodules400
>(
    params?: GetBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsmodules>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsmodules>>
    > = ({ signal }) => getBeleidsmodules(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsmodules>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidsmodules lineage
 */
export const postBeleidsmodules = (
    beleidsmodulesWrite: BeleidsmodulesWrite
) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/beleidsmodules`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmodulesWrite,
    })
}

export type PostBeleidsmodulesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidsmodules>>
>
export type PostBeleidsmodulesMutationBody = BeleidsmodulesWrite
export type PostBeleidsmodulesMutationError =
    | PostBeleidsmodules400
    | PostBeleidsmodules403
    | PostBeleidsmodules500

export const usePostBeleidsmodules = <
    TError =
        | PostBeleidsmodules400
        | PostBeleidsmodules403
        | PostBeleidsmodules500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidsmodules>>,
        TError,
        { data: BeleidsmodulesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidsmodules>>,
        { data: BeleidsmodulesWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidsmodules(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidsmodules>>,
        TError,
        { data: BeleidsmodulesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getBeleidsmodulesLineageId = (
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsmodulesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams
) => [`/beleidsmodules/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidsmodulesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsmodulesLineageId>>
>
export type GetBeleidsmodulesLineageIdQueryError = GetBeleidsmodulesLineageId404

export const useGetBeleidsmodulesLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidsmodulesLineageId>>,
    TError = GetBeleidsmodulesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsmodulesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsmodulesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsmodulesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsmodulesLineageId>>
    > = ({ signal }) => getBeleidsmodulesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsmodulesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidsmodules to a lineage
 */
export const patchBeleidsmodulesLineageId = (
    lineageId: number,
    beleidsmodulesWrite: BeleidsmodulesWrite
) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/beleidsmodules/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmodulesWrite,
    })
}

export type PatchBeleidsmodulesLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidsmodulesLineageId>>
>
export type PatchBeleidsmodulesLineageIdMutationBody = BeleidsmodulesWrite
export type PatchBeleidsmodulesLineageIdMutationError =
    | PatchBeleidsmodulesLineageId400
    | PatchBeleidsmodulesLineageId403
    | PatchBeleidsmodulesLineageId500

export const usePatchBeleidsmodulesLineageId = <
    TError =
        | PatchBeleidsmodulesLineageId400
        | PatchBeleidsmodulesLineageId403
        | PatchBeleidsmodulesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidsmodulesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsmodulesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidsmodulesLineageId>>,
        { lineageId: number; data: BeleidsmodulesWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidsmodulesLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidsmodulesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsmodulesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getBeleidsprestaties = (
    params?: GetBeleidsprestatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsprestatiesQueryKey = (
    params?: GetBeleidsprestatiesParams
) => [`/beleidsprestaties`, ...(params ? [params] : [])]

export type GetBeleidsprestatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsprestaties>>
>
export type GetBeleidsprestatiesQueryError = GetBeleidsprestaties400

export const useGetBeleidsprestaties = <
    TData = Awaited<ReturnType<typeof getBeleidsprestaties>>,
    TError = GetBeleidsprestaties400
>(
    params?: GetBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsprestaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsprestaties>>
    > = ({ signal }) => getBeleidsprestaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsprestaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidsprestaties lineage
 */
export const postBeleidsprestaties = (
    beleidsprestatiesWrite: BeleidsprestatiesWrite
) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/beleidsprestaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatiesWrite,
    })
}

export type PostBeleidsprestatiesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidsprestaties>>
>
export type PostBeleidsprestatiesMutationBody = BeleidsprestatiesWrite
export type PostBeleidsprestatiesMutationError =
    | PostBeleidsprestaties400
    | PostBeleidsprestaties403
    | PostBeleidsprestaties500

export const usePostBeleidsprestaties = <
    TError =
        | PostBeleidsprestaties400
        | PostBeleidsprestaties403
        | PostBeleidsprestaties500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidsprestaties>>,
        TError,
        { data: BeleidsprestatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidsprestaties>>,
        { data: BeleidsprestatiesWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidsprestaties(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidsprestaties>>,
        TError,
        { data: BeleidsprestatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getBeleidsprestatiesLineageId = (
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/beleidsprestaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsprestatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams
) => [`/beleidsprestaties/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidsprestatiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsprestatiesLineageId>>
>
export type GetBeleidsprestatiesLineageIdQueryError =
    GetBeleidsprestatiesLineageId404

export const useGetBeleidsprestatiesLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidsprestatiesLineageId>>,
    TError = GetBeleidsprestatiesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsprestatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsprestatiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsprestatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsprestatiesLineageId>>
    > = ({ signal }) => getBeleidsprestatiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsprestatiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidsprestaties to a lineage
 */
export const patchBeleidsprestatiesLineageId = (
    lineageId: number,
    beleidsprestatiesWrite: BeleidsprestatiesWrite
) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/beleidsprestaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatiesWrite,
    })
}

export type PatchBeleidsprestatiesLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidsprestatiesLineageId>>
>
export type PatchBeleidsprestatiesLineageIdMutationBody = BeleidsprestatiesWrite
export type PatchBeleidsprestatiesLineageIdMutationError =
    | PatchBeleidsprestatiesLineageId400
    | PatchBeleidsprestatiesLineageId403
    | PatchBeleidsprestatiesLineageId500

export const usePatchBeleidsprestatiesLineageId = <
    TError =
        | PatchBeleidsprestatiesLineageId400
        | PatchBeleidsprestatiesLineageId403
        | PatchBeleidsprestatiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidsprestatiesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsprestatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidsprestatiesLineageId>>,
        { lineageId: number; data: BeleidsprestatiesWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidsprestatiesLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidsprestatiesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsprestatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getBeleidsregels = (
    params?: GetBeleidsregelsParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsregelsQueryKey = (
    params?: GetBeleidsregelsParams
) => [`/beleidsregels`, ...(params ? [params] : [])]

export type GetBeleidsregelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsregels>>
>
export type GetBeleidsregelsQueryError = GetBeleidsregels400

export const useGetBeleidsregels = <
    TData = Awaited<ReturnType<typeof getBeleidsregels>>,
    TError = GetBeleidsregels400
>(
    params?: GetBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsregels>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsregels>>
    > = ({ signal }) => getBeleidsregels(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsregels>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidsregels lineage
 */
export const postBeleidsregels = (beleidsregelsWrite: BeleidsregelsWrite) => {
    return customInstance<BeleidsregelsRead>({
        url: `/beleidsregels`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelsWrite,
    })
}

export type PostBeleidsregelsMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidsregels>>
>
export type PostBeleidsregelsMutationBody = BeleidsregelsWrite
export type PostBeleidsregelsMutationError =
    | PostBeleidsregels400
    | PostBeleidsregels403
    | PostBeleidsregels500

export const usePostBeleidsregels = <
    TError = PostBeleidsregels400 | PostBeleidsregels403 | PostBeleidsregels500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidsregels>>,
        TError,
        { data: BeleidsregelsWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidsregels>>,
        { data: BeleidsregelsWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidsregels(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidsregels>>,
        TError,
        { data: BeleidsregelsWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getBeleidsregelsLineageId = (
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/beleidsregels/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsregelsLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams
) => [`/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidsregelsLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsregelsLineageId>>
>
export type GetBeleidsregelsLineageIdQueryError = GetBeleidsregelsLineageId404

export const useGetBeleidsregelsLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidsregelsLineageId>>,
    TError = GetBeleidsregelsLineageId404
>(
    lineageId: number,
    params?: GetBeleidsregelsLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsregelsLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsregelsLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsregelsLineageId>>
    > = ({ signal }) => getBeleidsregelsLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsregelsLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidsregels to a lineage
 */
export const patchBeleidsregelsLineageId = (
    lineageId: number,
    beleidsregelsWrite: BeleidsregelsWrite
) => {
    return customInstance<BeleidsregelsRead>({
        url: `/beleidsregels/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelsWrite,
    })
}

export type PatchBeleidsregelsLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidsregelsLineageId>>
>
export type PatchBeleidsregelsLineageIdMutationBody = BeleidsregelsWrite
export type PatchBeleidsregelsLineageIdMutationError =
    | PatchBeleidsregelsLineageId400
    | PatchBeleidsregelsLineageId403
    | PatchBeleidsregelsLineageId500

export const usePatchBeleidsregelsLineageId = <
    TError =
        | PatchBeleidsregelsLineageId400
        | PatchBeleidsregelsLineageId403
        | PatchBeleidsregelsLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidsregelsLineageId>>,
        TError,
        { lineageId: number; data: BeleidsregelsWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidsregelsLineageId>>,
        { lineageId: number; data: BeleidsregelsWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidsregelsLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidsregelsLineageId>>,
        TError,
        { lineageId: number; data: BeleidsregelsWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getBeleidsrelaties = (
    params?: GetBeleidsrelatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsrelatiesQueryKey = (
    params?: GetBeleidsrelatiesParams
) => [`/beleidsrelaties`, ...(params ? [params] : [])]

export type GetBeleidsrelatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsrelaties>>
>
export type GetBeleidsrelatiesQueryError = GetBeleidsrelaties400

export const useGetBeleidsrelaties = <
    TData = Awaited<ReturnType<typeof getBeleidsrelaties>>,
    TError = GetBeleidsrelaties400
>(
    params?: GetBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsrelaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsrelaties>>
    > = ({ signal }) => getBeleidsrelaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsrelaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new beleidsrelaties lineage
 */
export const postBeleidsrelaties = (
    beleidsrelatiesWrite: BeleidsrelatiesWrite
) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/beleidsrelaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatiesWrite,
    })
}

export type PostBeleidsrelatiesMutationResult = NonNullable<
    Awaited<ReturnType<typeof postBeleidsrelaties>>
>
export type PostBeleidsrelatiesMutationBody = BeleidsrelatiesWrite
export type PostBeleidsrelatiesMutationError =
    | PostBeleidsrelaties400
    | PostBeleidsrelaties403
    | PostBeleidsrelaties500

export const usePostBeleidsrelaties = <
    TError =
        | PostBeleidsrelaties400
        | PostBeleidsrelaties403
        | PostBeleidsrelaties500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postBeleidsrelaties>>,
        TError,
        { data: BeleidsrelatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postBeleidsrelaties>>,
        { data: BeleidsrelatiesWrite }
    > = props => {
        const { data } = props ?? {}

        return postBeleidsrelaties(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postBeleidsrelaties>>,
        TError,
        { data: BeleidsrelatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getBeleidsrelatiesLineageId = (
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/beleidsrelaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetBeleidsrelatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams
) => [`/beleidsrelaties/${lineageId}`, ...(params ? [params] : [])]

export type GetBeleidsrelatiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBeleidsrelatiesLineageId>>
>
export type GetBeleidsrelatiesLineageIdQueryError =
    GetBeleidsrelatiesLineageId404

export const useGetBeleidsrelatiesLineageId = <
    TData = Awaited<ReturnType<typeof getBeleidsrelatiesLineageId>>,
    TError = GetBeleidsrelatiesLineageId404
>(
    lineageId: number,
    params?: GetBeleidsrelatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getBeleidsrelatiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetBeleidsrelatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBeleidsrelatiesLineageId>>
    > = ({ signal }) => getBeleidsrelatiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getBeleidsrelatiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new beleidsrelaties to a lineage
 */
export const patchBeleidsrelatiesLineageId = (
    lineageId: number,
    beleidsrelatiesWrite: BeleidsrelatiesWrite
) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/beleidsrelaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatiesWrite,
    })
}

export type PatchBeleidsrelatiesLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchBeleidsrelatiesLineageId>>
>
export type PatchBeleidsrelatiesLineageIdMutationBody = BeleidsrelatiesWrite
export type PatchBeleidsrelatiesLineageIdMutationError =
    | PatchBeleidsrelatiesLineageId400
    | PatchBeleidsrelatiesLineageId403
    | PatchBeleidsrelatiesLineageId500

export const usePatchBeleidsrelatiesLineageId = <
    TError =
        | PatchBeleidsrelatiesLineageId400
        | PatchBeleidsrelatiesLineageId403
        | PatchBeleidsrelatiesLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchBeleidsrelatiesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsrelatiesWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchBeleidsrelatiesLineageId>>,
        { lineageId: number; data: BeleidsrelatiesWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchBeleidsrelatiesLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchBeleidsrelatiesLineageId>>,
        TError,
        { lineageId: number; data: BeleidsrelatiesWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesAmbitiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesAmbitiesOldUuidNewUuid200>({
        url: `/changes/ambities/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesAmbitiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/ambities/${oldUuid}/${newUuid}`]

export type GetChangesAmbitiesOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesAmbitiesOldUuidNewUuid>>
>
export type GetChangesAmbitiesOldUuidNewUuidQueryError =
    | GetChangesAmbitiesOldUuidNewUuid404
    | GetChangesAmbitiesOldUuidNewUuid500

export const useGetChangesAmbitiesOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesAmbitiesOldUuidNewUuid>>,
    TError =
        | GetChangesAmbitiesOldUuidNewUuid404
        | GetChangesAmbitiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesAmbitiesOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesAmbitiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesAmbitiesOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesAmbitiesOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesAmbitiesOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBelangenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBelangenOldUuidNewUuid200>({
        url: `/changes/belangen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBelangenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/belangen/${oldUuid}/${newUuid}`]

export type GetChangesBelangenOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBelangenOldUuidNewUuid>>
>
export type GetChangesBelangenOldUuidNewUuidQueryError =
    | GetChangesBelangenOldUuidNewUuid404
    | GetChangesBelangenOldUuidNewUuid500

export const useGetChangesBelangenOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBelangenOldUuidNewUuid>>,
    TError =
        | GetChangesBelangenOldUuidNewUuid404
        | GetChangesBelangenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBelangenOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBelangenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBelangenOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBelangenOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBelangenOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsdoelenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidsdoelenOldUuidNewUuid200>({
        url: `/changes/beleidsdoelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidsdoelenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsdoelen/${oldUuid}/${newUuid}`]

export type GetChangesBeleidsdoelenOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>>
>
export type GetChangesBeleidsdoelenOldUuidNewUuidQueryError =
    | GetChangesBeleidsdoelenOldUuidNewUuid404
    | GetChangesBeleidsdoelenOldUuidNewUuid500

export const useGetChangesBeleidsdoelenOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>>,
    TError =
        | GetChangesBeleidsdoelenOldUuidNewUuid404
        | GetChangesBeleidsdoelenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsdoelenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidsdoelenOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidsdoelenOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidskeuzesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidskeuzesOldUuidNewUuid200>({
        url: `/changes/beleidskeuzes/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidskeuzesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidskeuzes/${oldUuid}/${newUuid}`]

export type GetChangesBeleidskeuzesOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>>
>
export type GetChangesBeleidskeuzesOldUuidNewUuidQueryError =
    | GetChangesBeleidskeuzesOldUuidNewUuid404
    | GetChangesBeleidskeuzesOldUuidNewUuid500

export const useGetChangesBeleidskeuzesOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>>,
    TError =
        | GetChangesBeleidskeuzesOldUuidNewUuid404
        | GetChangesBeleidskeuzesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidskeuzesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidskeuzesOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidskeuzesOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsmodulesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidsmodulesOldUuidNewUuid200>({
        url: `/changes/beleidsmodules/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidsmodulesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsmodules/${oldUuid}/${newUuid}`]

export type GetChangesBeleidsmodulesOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>>
>
export type GetChangesBeleidsmodulesOldUuidNewUuidQueryError =
    | GetChangesBeleidsmodulesOldUuidNewUuid404
    | GetChangesBeleidsmodulesOldUuidNewUuid500

export const useGetChangesBeleidsmodulesOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>>,
    TError =
        | GetChangesBeleidsmodulesOldUuidNewUuid404
        | GetChangesBeleidsmodulesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsmodulesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidsmodulesOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidsmodulesOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsprestatiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidsprestatiesOldUuidNewUuid200>({
        url: `/changes/beleidsprestaties/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidsprestatiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsprestaties/${oldUuid}/${newUuid}`]

export type GetChangesBeleidsprestatiesOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>>
>
export type GetChangesBeleidsprestatiesOldUuidNewUuidQueryError =
    | GetChangesBeleidsprestatiesOldUuidNewUuid404
    | GetChangesBeleidsprestatiesOldUuidNewUuid500

export const useGetChangesBeleidsprestatiesOldUuidNewUuid = <
    TData = Awaited<
        ReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>
    >,
    TError =
        | GetChangesBeleidsprestatiesOldUuidNewUuid404
        | GetChangesBeleidsprestatiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsprestatiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidsprestatiesOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidsprestatiesOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsregelsOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidsregelsOldUuidNewUuid200>({
        url: `/changes/beleidsregels/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidsregelsOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsregels/${oldUuid}/${newUuid}`]

export type GetChangesBeleidsregelsOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>>
>
export type GetChangesBeleidsregelsOldUuidNewUuidQueryError =
    | GetChangesBeleidsregelsOldUuidNewUuid404
    | GetChangesBeleidsregelsOldUuidNewUuid500

export const useGetChangesBeleidsregelsOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>>,
    TError =
        | GetChangesBeleidsregelsOldUuidNewUuid404
        | GetChangesBeleidsregelsOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsregelsOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidsregelsOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidsregelsOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesBeleidsrelatiesOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesBeleidsrelatiesOldUuidNewUuid200>({
        url: `/changes/beleidsrelaties/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesBeleidsrelatiesOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/beleidsrelaties/${oldUuid}/${newUuid}`]

export type GetChangesBeleidsrelatiesOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>>
>
export type GetChangesBeleidsrelatiesOldUuidNewUuidQueryError =
    | GetChangesBeleidsrelatiesOldUuidNewUuid404
    | GetChangesBeleidsrelatiesOldUuidNewUuid500

export const useGetChangesBeleidsrelatiesOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>>,
    TError =
        | GetChangesBeleidsrelatiesOldUuidNewUuid404
        | GetChangesBeleidsrelatiesOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesBeleidsrelatiesOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesBeleidsrelatiesOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesBeleidsrelatiesOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesGebiedsprogrammasOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesGebiedsprogrammasOldUuidNewUuid200>({
        url: `/changes/gebiedsprogrammas/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesGebiedsprogrammasOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/gebiedsprogrammas/${oldUuid}/${newUuid}`]

export type GetChangesGebiedsprogrammasOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesGebiedsprogrammasOldUuidNewUuid>>
>
export type GetChangesGebiedsprogrammasOldUuidNewUuidQueryError =
    | GetChangesGebiedsprogrammasOldUuidNewUuid404
    | GetChangesGebiedsprogrammasOldUuidNewUuid500

export const useGetChangesGebiedsprogrammasOldUuidNewUuid = <
    TData = Awaited<
        ReturnType<typeof getChangesGebiedsprogrammasOldUuidNewUuid>
    >,
    TError =
        | GetChangesGebiedsprogrammasOldUuidNewUuid404
        | GetChangesGebiedsprogrammasOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getChangesGebiedsprogrammasOldUuidNewUuid>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesGebiedsprogrammasOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesGebiedsprogrammasOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesGebiedsprogrammasOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesGebiedsprogrammasOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesMaatregelenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesMaatregelenOldUuidNewUuid200>({
        url: `/changes/maatregelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesMaatregelenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/maatregelen/${oldUuid}/${newUuid}`]

export type GetChangesMaatregelenOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesMaatregelenOldUuidNewUuid>>
>
export type GetChangesMaatregelenOldUuidNewUuidQueryError =
    | GetChangesMaatregelenOldUuidNewUuid404
    | GetChangesMaatregelenOldUuidNewUuid500

export const useGetChangesMaatregelenOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesMaatregelenOldUuidNewUuid>>,
    TError =
        | GetChangesMaatregelenOldUuidNewUuid404
        | GetChangesMaatregelenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesMaatregelenOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesMaatregelenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesMaatregelenOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesMaatregelenOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesMaatregelenOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesThemasOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesThemasOldUuidNewUuid200>({
        url: `/changes/themas/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesThemasOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/themas/${oldUuid}/${newUuid}`]

export type GetChangesThemasOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesThemasOldUuidNewUuid>>
>
export type GetChangesThemasOldUuidNewUuidQueryError =
    | GetChangesThemasOldUuidNewUuid404
    | GetChangesThemasOldUuidNewUuid500

export const useGetChangesThemasOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesThemasOldUuidNewUuid>>,
    TError =
        | GetChangesThemasOldUuidNewUuid404
        | GetChangesThemasOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesThemasOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesThemasOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesThemasOldUuidNewUuid>>
    > = ({ signal }) => getChangesThemasOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesThemasOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesVerordeningenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesVerordeningenOldUuidNewUuid200>({
        url: `/changes/verordeningen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesVerordeningenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/verordeningen/${oldUuid}/${newUuid}`]

export type GetChangesVerordeningenOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesVerordeningenOldUuidNewUuid>>
>
export type GetChangesVerordeningenOldUuidNewUuidQueryError =
    | GetChangesVerordeningenOldUuidNewUuid404
    | GetChangesVerordeningenOldUuidNewUuid500

export const useGetChangesVerordeningenOldUuidNewUuid = <
    TData = Awaited<ReturnType<typeof getChangesVerordeningenOldUuidNewUuid>>,
    TError =
        | GetChangesVerordeningenOldUuidNewUuid404
        | GetChangesVerordeningenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getChangesVerordeningenOldUuidNewUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesVerordeningenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesVerordeningenOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesVerordeningenOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesVerordeningenOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Shows the changes between two versions of objects
 */
export const getChangesWerkingsgebiedenOldUuidNewUuid = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GetChangesWerkingsgebiedenOldUuidNewUuid200>({
        url: `/changes/werkingsgebieden/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetChangesWerkingsgebiedenOldUuidNewUuidQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/changes/werkingsgebieden/${oldUuid}/${newUuid}`]

export type GetChangesWerkingsgebiedenOldUuidNewUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>>
>
export type GetChangesWerkingsgebiedenOldUuidNewUuidQueryError =
    | GetChangesWerkingsgebiedenOldUuidNewUuid404
    | GetChangesWerkingsgebiedenOldUuidNewUuid500

export const useGetChangesWerkingsgebiedenOldUuidNewUuid = <
    TData = Awaited<
        ReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>
    >,
    TError =
        | GetChangesWerkingsgebiedenOldUuidNewUuid404
        | GetChangesWerkingsgebiedenOldUuidNewUuid500
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetChangesWerkingsgebiedenOldUuidNewUuidQueryKey(oldUuid, newUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>>
    > = ({ signal }) =>
        getChangesWerkingsgebiedenOldUuidNewUuid(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getChangesWerkingsgebiedenOldUuidNewUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get the latest edits for every lineage, active for 'Beleidskeuzes' & 'Maatregelen'
 */
export const getEdits = (signal?: AbortSignal) => {
    return customInstance<GetEdits200Item[]>({
        url: `/edits`,
        method: 'get',
        signal,
    })
}

export const getGetEditsQueryKey = () => [`/edits`]

export type GetEditsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEdits>>
>
export type GetEditsQueryError = unknown

export const useGetEdits = <
    TData = Awaited<ReturnType<typeof getEdits>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEdits>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetEditsQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEdits>>> = ({
        signal,
    }) => getEdits(signal)

    const query = useQuery<Awaited<ReturnType<typeof getEdits>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the gebiedsprogrammas lineages and shows the latests object for each
 */
export const getGebiedsprogrammas = (
    params?: GetGebiedsprogrammasParams,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammasRead[]>({
        url: `/gebiedsprogrammas`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetGebiedsprogrammasQueryKey = (
    params?: GetGebiedsprogrammasParams
) => [`/gebiedsprogrammas`, ...(params ? [params] : [])]

export type GetGebiedsprogrammasQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGebiedsprogrammas>>
>
export type GetGebiedsprogrammasQueryError = GetGebiedsprogrammas400

export const useGetGebiedsprogrammas = <
    TData = Awaited<ReturnType<typeof getGebiedsprogrammas>>,
    TError = GetGebiedsprogrammas400
>(
    params?: GetGebiedsprogrammasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getGebiedsprogrammas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetGebiedsprogrammasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGebiedsprogrammas>>
    > = ({ signal }) => getGebiedsprogrammas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getGebiedsprogrammas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new gebiedsprogrammas lineage
 */
export const postGebiedsprogrammas = (
    gebiedsprogrammasWrite: GebiedsprogrammasWrite
) => {
    return customInstance<GebiedsprogrammasRead>({
        url: `/gebiedsprogrammas`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammasWrite,
    })
}

export type PostGebiedsprogrammasMutationResult = NonNullable<
    Awaited<ReturnType<typeof postGebiedsprogrammas>>
>
export type PostGebiedsprogrammasMutationBody = GebiedsprogrammasWrite
export type PostGebiedsprogrammasMutationError =
    | PostGebiedsprogrammas400
    | PostGebiedsprogrammas403
    | PostGebiedsprogrammas500

export const usePostGebiedsprogrammas = <
    TError =
        | PostGebiedsprogrammas400
        | PostGebiedsprogrammas403
        | PostGebiedsprogrammas500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postGebiedsprogrammas>>,
        TError,
        { data: GebiedsprogrammasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postGebiedsprogrammas>>,
        { data: GebiedsprogrammasWrite }
    > = props => {
        const { data } = props ?? {}

        return postGebiedsprogrammas(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postGebiedsprogrammas>>,
        TError,
        { data: GebiedsprogrammasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the gebiedsprogrammas lineages and shows the latests object for each
 */
export const getGebiedsprogrammasLineageId = (
    lineageId: number,
    params?: GetGebiedsprogrammasLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammasRead[]>({
        url: `/gebiedsprogrammas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetGebiedsprogrammasLineageIdQueryKey = (
    lineageId: number,
    params?: GetGebiedsprogrammasLineageIdParams
) => [`/gebiedsprogrammas/${lineageId}`, ...(params ? [params] : [])]

export type GetGebiedsprogrammasLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGebiedsprogrammasLineageId>>
>
export type GetGebiedsprogrammasLineageIdQueryError =
    GetGebiedsprogrammasLineageId404

export const useGetGebiedsprogrammasLineageId = <
    TData = Awaited<ReturnType<typeof getGebiedsprogrammasLineageId>>,
    TError = GetGebiedsprogrammasLineageId404
>(
    lineageId: number,
    params?: GetGebiedsprogrammasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getGebiedsprogrammasLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetGebiedsprogrammasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGebiedsprogrammasLineageId>>
    > = ({ signal }) => getGebiedsprogrammasLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getGebiedsprogrammasLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new gebiedsprogrammas to a lineage
 */
export const patchGebiedsprogrammasLineageId = (
    lineageId: number,
    gebiedsprogrammasWrite: GebiedsprogrammasWrite
) => {
    return customInstance<GebiedsprogrammasRead>({
        url: `/gebiedsprogrammas/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammasWrite,
    })
}

export type PatchGebiedsprogrammasLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchGebiedsprogrammasLineageId>>
>
export type PatchGebiedsprogrammasLineageIdMutationBody = GebiedsprogrammasWrite
export type PatchGebiedsprogrammasLineageIdMutationError =
    | PatchGebiedsprogrammasLineageId400
    | PatchGebiedsprogrammasLineageId403
    | PatchGebiedsprogrammasLineageId500

export const usePatchGebiedsprogrammasLineageId = <
    TError =
        | PatchGebiedsprogrammasLineageId400
        | PatchGebiedsprogrammasLineageId403
        | PatchGebiedsprogrammasLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchGebiedsprogrammasLineageId>>,
        TError,
        { lineageId: number; data: GebiedsprogrammasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchGebiedsprogrammasLineageId>>,
        { lineageId: number; data: GebiedsprogrammasWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchGebiedsprogrammasLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchGebiedsprogrammasLineageId>>,
        TError,
        { lineageId: number; data: GebiedsprogrammasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get a list of users
 */
export const getGebruikers = (signal?: AbortSignal) => {
    return customInstance<GebruikersRead[]>({
        url: `/gebruikers`,
        method: 'get',
        signal,
    })
}

export const getGetGebruikersQueryKey = () => [`/gebruikers`]

export type GetGebruikersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGebruikers>>
>
export type GetGebruikersQueryError = unknown

export const useGetGebruikers = <
    TData = Awaited<ReturnType<typeof getGebruikers>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof getGebruikers>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGebruikersQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGebruikers>>> = ({
        signal,
    }) => getGebruikers(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getGebruikers>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Get a graph representation of the effective objects
 */
export const getGraph = (signal?: AbortSignal) => {
    return customInstance<GetGraph200>({ url: `/graph`, method: 'get', signal })
}

export const getGetGraphQueryKey = () => [`/graph`]

export type GetGraphQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGraph>>
>
export type GetGraphQueryError = unknown

export const useGetGraph = <
    TData = Awaited<ReturnType<typeof getGraph>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getGraph>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGraphQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGraph>>> = ({
        signal,
    }) => getGraph(signal)

    const query = useQuery<Awaited<ReturnType<typeof getGraph>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Login an user and receive a JWT token
 */
export const postLogin = (postLoginBody: PostLoginBody) => {
    return customInstance<PostLogin200>({
        url: `/login`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: postLoginBody,
    })
}

export type PostLoginMutationResult = NonNullable<
    Awaited<ReturnType<typeof postLogin>>
>
export type PostLoginMutationBody = PostLoginBody
export type PostLoginMutationError = PostLogin400 | PostLogin401

export const usePostLogin = <
    TError = PostLogin400 | PostLogin401,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postLogin>>,
        TError,
        { data: PostLoginBody },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postLogin>>,
        { data: PostLoginBody }
    > = props => {
        const { data } = props ?? {}

        return postLogin(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postLogin>>,
        TError,
        { data: PostLoginBody },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getMaatregelen = (
    params?: GetMaatregelenParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetMaatregelenQueryKey = (params?: GetMaatregelenParams) => [
    `/maatregelen`,
    ...(params ? [params] : []),
]

export type GetMaatregelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMaatregelen>>
>
export type GetMaatregelenQueryError = GetMaatregelen400

export const useGetMaatregelen = <
    TData = Awaited<ReturnType<typeof getMaatregelen>>,
    TError = GetMaatregelen400
>(
    params?: GetMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getMaatregelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMaatregelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMaatregelen>>
    > = ({ signal }) => getMaatregelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getMaatregelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new maatregelen lineage
 */
export const postMaatregelen = (maatregelenWrite: MaatregelenWrite) => {
    return customInstance<MaatregelenRead>({
        url: `/maatregelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelenWrite,
    })
}

export type PostMaatregelenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postMaatregelen>>
>
export type PostMaatregelenMutationBody = MaatregelenWrite
export type PostMaatregelenMutationError =
    | PostMaatregelen400
    | PostMaatregelen403
    | PostMaatregelen500

export const usePostMaatregelen = <
    TError = PostMaatregelen400 | PostMaatregelen403 | PostMaatregelen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postMaatregelen>>,
        TError,
        { data: MaatregelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postMaatregelen>>,
        { data: MaatregelenWrite }
    > = props => {
        const { data } = props ?? {}

        return postMaatregelen(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postMaatregelen>>,
        TError,
        { data: MaatregelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getMaatregelenLineageId = (
    lineageId: number,
    params?: GetMaatregelenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/maatregelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetMaatregelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetMaatregelenLineageIdParams
) => [`/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export type GetMaatregelenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getMaatregelenLineageId>>
>
export type GetMaatregelenLineageIdQueryError = GetMaatregelenLineageId404

export const useGetMaatregelenLineageId = <
    TData = Awaited<ReturnType<typeof getMaatregelenLineageId>>,
    TError = GetMaatregelenLineageId404
>(
    lineageId: number,
    params?: GetMaatregelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getMaatregelenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetMaatregelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getMaatregelenLineageId>>
    > = ({ signal }) => getMaatregelenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getMaatregelenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new maatregelen to a lineage
 */
export const patchMaatregelenLineageId = (
    lineageId: number,
    maatregelenWrite: MaatregelenWrite
) => {
    return customInstance<MaatregelenRead>({
        url: `/maatregelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelenWrite,
    })
}

export type PatchMaatregelenLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchMaatregelenLineageId>>
>
export type PatchMaatregelenLineageIdMutationBody = MaatregelenWrite
export type PatchMaatregelenLineageIdMutationError =
    | PatchMaatregelenLineageId400
    | PatchMaatregelenLineageId403
    | PatchMaatregelenLineageId500

export const usePatchMaatregelenLineageId = <
    TError =
        | PatchMaatregelenLineageId400
        | PatchMaatregelenLineageId403
        | PatchMaatregelenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchMaatregelenLineageId>>,
        TError,
        { lineageId: number; data: MaatregelenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchMaatregelenLineageId>>,
        { lineageId: number; data: MaatregelenWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchMaatregelenLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchMaatregelenLineageId>>,
        TError,
        { lineageId: number; data: MaatregelenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Changes password for a user
 */
export const postPasswordReset = (
    postPasswordResetBody: PostPasswordResetBody
) => {
    return customInstance<PostPasswordReset200>({
        url: `/password-reset`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: postPasswordResetBody,
    })
}

export type PostPasswordResetMutationResult = NonNullable<
    Awaited<ReturnType<typeof postPasswordReset>>
>
export type PostPasswordResetMutationBody = PostPasswordResetBody
export type PostPasswordResetMutationError =
    | PostPasswordReset400
    | PostPasswordReset401

export const usePostPasswordReset = <
    TError = PostPasswordReset400 | PostPasswordReset401,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postPasswordReset>>,
        TError,
        { data: PostPasswordResetBody },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postPasswordReset>>,
        { data: PostPasswordResetBody }
    > = props => {
        const { data } = props ?? {}

        return postPasswordReset(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postPasswordReset>>,
        TError,
        { data: PostPasswordResetBody },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Search for objects with a textual query
 */
export const getSearch = (params: GetSearchParams, signal?: AbortSignal) => {
    return customInstance<GetSearch200>({
        url: `/search`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetSearchQueryKey = (params: GetSearchParams) => [
    `/search`,
    ...(params ? [params] : []),
]

export type GetSearchQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearch>>
>
export type GetSearchQueryError = GetSearch400 | GetSearch403

export const useGetSearch = <
    TData = Awaited<ReturnType<typeof getSearch>>,
    TError = GetSearch400 | GetSearch403
>(
    params: GetSearchParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getSearch>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSearch>>> = ({
        signal,
    }) => getSearch(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getSearch>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Search for objects that are linked to a specific geo area
 */
export const getSearchGeo = (
    params: GetSearchGeoParams,
    signal?: AbortSignal
) => {
    return customInstance<GetSearchGeo200>({
        url: `/search/geo`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetSearchGeoQueryKey = (params: GetSearchGeoParams) => [
    `/search/geo`,
    ...(params ? [params] : []),
]

export type GetSearchGeoQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSearchGeo>>
>
export type GetSearchGeoQueryError = GetSearchGeo400 | GetSearchGeo403

export const useGetSearchGeo = <
    TData = Awaited<ReturnType<typeof getSearchGeo>>,
    TError = GetSearchGeo400 | GetSearchGeo403
>(
    params: GetSearchGeoParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getSearchGeo>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSearchGeoQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSearchGeo>>> = ({
        signal,
    }) => getSearchGeo(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getSearchGeo>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Search for objects that are linked to a specific geo area
 */
export const postSearchGeo = (postSearchGeoBody: PostSearchGeoBody) => {
    return customInstance<PostSearchGeo200>({
        url: `/search/geo`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: postSearchGeoBody,
    })
}

export type PostSearchGeoMutationResult = NonNullable<
    Awaited<ReturnType<typeof postSearchGeo>>
>
export type PostSearchGeoMutationBody = PostSearchGeoBody
export type PostSearchGeoMutationError = PostSearchGeo400 | PostSearchGeo403

export const usePostSearchGeo = <
    TError = PostSearchGeo400 | PostSearchGeo403,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postSearchGeo>>,
        TError,
        { data: PostSearchGeoBody },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postSearchGeo>>,
        { data: PostSearchGeoBody }
    > = props => {
        const { data } = props ?? {}

        return postSearchGeo(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postSearchGeo>>,
        TError,
        { data: PostSearchGeoBody },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getThemas = (params?: GetThemasParams, signal?: AbortSignal) => {
    return customInstance<ThemasRead[]>({
        url: `/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetThemasQueryKey = (params?: GetThemasParams) => [
    `/themas`,
    ...(params ? [params] : []),
]

export type GetThemasQueryResult = NonNullable<
    Awaited<ReturnType<typeof getThemas>>
>
export type GetThemasQueryError = GetThemas400

export const useGetThemas = <
    TData = Awaited<ReturnType<typeof getThemas>>,
    TError = GetThemas400
>(
    params?: GetThemasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getThemas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetThemasQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getThemas>>> = ({
        signal,
    }) => getThemas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getThemas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new themas lineage
 */
export const postThemas = (themasWrite: ThemasWrite) => {
    return customInstance<ThemasRead>({
        url: `/themas`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: themasWrite,
    })
}

export type PostThemasMutationResult = NonNullable<
    Awaited<ReturnType<typeof postThemas>>
>
export type PostThemasMutationBody = ThemasWrite
export type PostThemasMutationError =
    | PostThemas400
    | PostThemas403
    | PostThemas500

export const usePostThemas = <
    TError = PostThemas400 | PostThemas403 | PostThemas500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postThemas>>,
        TError,
        { data: ThemasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postThemas>>,
        { data: ThemasWrite }
    > = props => {
        const { data } = props ?? {}

        return postThemas(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postThemas>>,
        TError,
        { data: ThemasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getThemasLineageId = (
    lineageId: number,
    params?: GetThemasLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<ThemasRead[]>({
        url: `/themas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetThemasLineageIdQueryKey = (
    lineageId: number,
    params?: GetThemasLineageIdParams
) => [`/themas/${lineageId}`, ...(params ? [params] : [])]

export type GetThemasLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getThemasLineageId>>
>
export type GetThemasLineageIdQueryError = GetThemasLineageId404

export const useGetThemasLineageId = <
    TData = Awaited<ReturnType<typeof getThemasLineageId>>,
    TError = GetThemasLineageId404
>(
    lineageId: number,
    params?: GetThemasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getThemasLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetThemasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getThemasLineageId>>
    > = ({ signal }) => getThemasLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getThemasLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new themas to a lineage
 */
export const patchThemasLineageId = (
    lineageId: number,
    themasWrite: ThemasWrite
) => {
    return customInstance<ThemasRead>({
        url: `/themas/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: themasWrite,
    })
}

export type PatchThemasLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchThemasLineageId>>
>
export type PatchThemasLineageIdMutationBody = ThemasWrite
export type PatchThemasLineageIdMutationError =
    | PatchThemasLineageId400
    | PatchThemasLineageId403
    | PatchThemasLineageId500

export const usePatchThemasLineageId = <
    TError =
        | PatchThemasLineageId400
        | PatchThemasLineageId403
        | PatchThemasLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchThemasLineageId>>,
        TError,
        { lineageId: number; data: ThemasWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchThemasLineageId>>,
        { lineageId: number; data: ThemasWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchThemasLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchThemasLineageId>>,
        TError,
        { lineageId: number; data: ThemasWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Get information about the current JWT token
 */
export const getTokeninfo = (signal?: AbortSignal) => {
    return customInstance<GetTokeninfo200>({
        url: `/tokeninfo`,
        method: 'get',
        signal,
    })
}

export const getGetTokeninfoQueryKey = () => [`/tokeninfo`]

export type GetTokeninfoQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTokeninfo>>
>
export type GetTokeninfoQueryError = unknown

export const useGetTokeninfo = <
    TData = Awaited<ReturnType<typeof getTokeninfo>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof getTokeninfo>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTokeninfoQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTokeninfo>>> = ({
        signal,
    }) => getTokeninfo(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getTokeninfo>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the ambities lineages and shows the latests valid object for each
 */
export const getValidAmbities = (
    params?: GetValidAmbitiesParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/valid/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidAmbitiesQueryKey = (
    params?: GetValidAmbitiesParams
) => [`/valid/ambities`, ...(params ? [params] : [])]

export type GetValidAmbitiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidAmbities>>
>
export type GetValidAmbitiesQueryError = GetValidAmbities404

export const useGetValidAmbities = <
    TData = Awaited<ReturnType<typeof getValidAmbities>>,
    TError = GetValidAmbities404
>(
    params?: GetValidAmbitiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidAmbities>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidAmbitiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidAmbities>>
    > = ({ signal }) => getValidAmbities(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidAmbities>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the ambities in this lineage that are valid
 */
export const getValidAmbitiesLineageId = (
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<AmbitiesRead[]>({
        url: `/valid/ambities/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidAmbitiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams
) => [`/valid/ambities/${lineageId}`, ...(params ? [params] : [])]

export type GetValidAmbitiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidAmbitiesLineageId>>
>
export type GetValidAmbitiesLineageIdQueryError = GetValidAmbitiesLineageId404

export const useGetValidAmbitiesLineageId = <
    TData = Awaited<ReturnType<typeof getValidAmbitiesLineageId>>,
    TError = GetValidAmbitiesLineageId404
>(
    lineageId: number,
    params?: GetValidAmbitiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidAmbitiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidAmbitiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidAmbitiesLineageId>>
    > = ({ signal }) => getValidAmbitiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidAmbitiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the belangen lineages and shows the latests valid object for each
 */
export const getValidBelangen = (
    params?: GetValidBelangenParams,
    signal?: AbortSignal
) => {
    return customInstance<BelangenRead[]>({
        url: `/valid/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBelangenQueryKey = (
    params?: GetValidBelangenParams
) => [`/valid/belangen`, ...(params ? [params] : [])]

export type GetValidBelangenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBelangen>>
>
export type GetValidBelangenQueryError = GetValidBelangen404

export const useGetValidBelangen = <
    TData = Awaited<ReturnType<typeof getValidBelangen>>,
    TError = GetValidBelangen404
>(
    params?: GetValidBelangenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBelangen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBelangenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBelangen>>
    > = ({ signal }) => getValidBelangen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBelangen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the belangen in this lineage that are valid
 */
export const getValidBelangenLineageId = (
    lineageId: number,
    params?: GetValidBelangenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BelangenRead[]>({
        url: `/valid/belangen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBelangenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBelangenLineageIdParams
) => [`/valid/belangen/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBelangenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBelangenLineageId>>
>
export type GetValidBelangenLineageIdQueryError = GetValidBelangenLineageId404

export const useGetValidBelangenLineageId = <
    TData = Awaited<ReturnType<typeof getValidBelangenLineageId>>,
    TError = GetValidBelangenLineageId404
>(
    lineageId: number,
    params?: GetValidBelangenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBelangenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBelangenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBelangenLineageId>>
    > = ({ signal }) => getValidBelangenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBelangenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests valid object for each
 */
export const getValidBeleidsdoelen = (
    params?: GetValidBeleidsdoelenParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/valid/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsdoelenQueryKey = (
    params?: GetValidBeleidsdoelenParams
) => [`/valid/beleidsdoelen`, ...(params ? [params] : [])]

export type GetValidBeleidsdoelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsdoelen>>
>
export type GetValidBeleidsdoelenQueryError = GetValidBeleidsdoelen404

export const useGetValidBeleidsdoelen = <
    TData = Awaited<ReturnType<typeof getValidBeleidsdoelen>>,
    TError = GetValidBeleidsdoelen404
>(
    params?: GetValidBeleidsdoelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsdoelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsdoelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsdoelen>>
    > = ({ signal }) => getValidBeleidsdoelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsdoelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsdoelen in this lineage that are valid
 */
export const getValidBeleidsdoelenLineageId = (
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelenRead[]>({
        url: `/valid/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsdoelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams
) => [`/valid/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidsdoelenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsdoelenLineageId>>
>
export type GetValidBeleidsdoelenLineageIdQueryError =
    GetValidBeleidsdoelenLineageId404

export const useGetValidBeleidsdoelenLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidsdoelenLineageId>>,
    TError = GetValidBeleidsdoelenLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsdoelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsdoelenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsdoelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsdoelenLineageId>>
    > = ({ signal }) =>
        getValidBeleidsdoelenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsdoelenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests valid object for each
 */
export const getValidBeleidskeuzes = (
    params?: GetValidBeleidskeuzesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/valid/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidskeuzesQueryKey = (
    params?: GetValidBeleidskeuzesParams
) => [`/valid/beleidskeuzes`, ...(params ? [params] : [])]

export type GetValidBeleidskeuzesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidskeuzes>>
>
export type GetValidBeleidskeuzesQueryError = GetValidBeleidskeuzes404

export const useGetValidBeleidskeuzes = <
    TData = Awaited<ReturnType<typeof getValidBeleidskeuzes>>,
    TError = GetValidBeleidskeuzes404
>(
    params?: GetValidBeleidskeuzesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidskeuzes>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidskeuzesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidskeuzes>>
    > = ({ signal }) => getValidBeleidskeuzes(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidskeuzes>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidskeuzes in this lineage that are valid
 */
export const getValidBeleidskeuzesLineageId = (
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzesRead[]>({
        url: `/valid/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidskeuzesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams
) => [`/valid/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidskeuzesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidskeuzesLineageId>>
>
export type GetValidBeleidskeuzesLineageIdQueryError =
    GetValidBeleidskeuzesLineageId404

export const useGetValidBeleidskeuzesLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidskeuzesLineageId>>,
    TError = GetValidBeleidskeuzesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidskeuzesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidskeuzesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidskeuzesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidskeuzesLineageId>>
    > = ({ signal }) =>
        getValidBeleidskeuzesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidskeuzesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests valid object for each
 */
export const getValidBeleidsmodules = (
    params?: GetValidBeleidsmodulesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/valid/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsmodulesQueryKey = (
    params?: GetValidBeleidsmodulesParams
) => [`/valid/beleidsmodules`, ...(params ? [params] : [])]

export type GetValidBeleidsmodulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsmodules>>
>
export type GetValidBeleidsmodulesQueryError = GetValidBeleidsmodules404

export const useGetValidBeleidsmodules = <
    TData = Awaited<ReturnType<typeof getValidBeleidsmodules>>,
    TError = GetValidBeleidsmodules404
>(
    params?: GetValidBeleidsmodulesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsmodules>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsmodulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsmodules>>
    > = ({ signal }) => getValidBeleidsmodules(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsmodules>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsmodules in this lineage that are valid
 */
export const getValidBeleidsmodulesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsmodulesRead[]>({
        url: `/valid/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsmodulesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams
) => [`/valid/beleidsmodules/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidsmodulesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsmodulesLineageId>>
>
export type GetValidBeleidsmodulesLineageIdQueryError =
    GetValidBeleidsmodulesLineageId404

export const useGetValidBeleidsmodulesLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidsmodulesLineageId>>,
    TError = GetValidBeleidsmodulesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsmodulesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsmodulesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsmodulesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsmodulesLineageId>>
    > = ({ signal }) =>
        getValidBeleidsmodulesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsmodulesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests valid object for each
 */
export const getValidBeleidsprestaties = (
    params?: GetValidBeleidsprestatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/valid/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsprestatiesQueryKey = (
    params?: GetValidBeleidsprestatiesParams
) => [`/valid/beleidsprestaties`, ...(params ? [params] : [])]

export type GetValidBeleidsprestatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsprestaties>>
>
export type GetValidBeleidsprestatiesQueryError = GetValidBeleidsprestaties404

export const useGetValidBeleidsprestaties = <
    TData = Awaited<ReturnType<typeof getValidBeleidsprestaties>>,
    TError = GetValidBeleidsprestaties404
>(
    params?: GetValidBeleidsprestatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsprestaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsprestatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsprestaties>>
    > = ({ signal }) => getValidBeleidsprestaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsprestaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsprestaties in this lineage that are valid
 */
export const getValidBeleidsprestatiesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsprestatiesRead[]>({
        url: `/valid/beleidsprestaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsprestatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams
) => [`/valid/beleidsprestaties/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidsprestatiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsprestatiesLineageId>>
>
export type GetValidBeleidsprestatiesLineageIdQueryError =
    GetValidBeleidsprestatiesLineageId404

export const useGetValidBeleidsprestatiesLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidsprestatiesLineageId>>,
    TError = GetValidBeleidsprestatiesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsprestatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsprestatiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsprestatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsprestatiesLineageId>>
    > = ({ signal }) =>
        getValidBeleidsprestatiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsprestatiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests valid object for each
 */
export const getValidBeleidsregels = (
    params?: GetValidBeleidsregelsParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/valid/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsregelsQueryKey = (
    params?: GetValidBeleidsregelsParams
) => [`/valid/beleidsregels`, ...(params ? [params] : [])]

export type GetValidBeleidsregelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsregels>>
>
export type GetValidBeleidsregelsQueryError = GetValidBeleidsregels404

export const useGetValidBeleidsregels = <
    TData = Awaited<ReturnType<typeof getValidBeleidsregels>>,
    TError = GetValidBeleidsregels404
>(
    params?: GetValidBeleidsregelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsregels>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsregelsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsregels>>
    > = ({ signal }) => getValidBeleidsregels(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsregels>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsregels in this lineage that are valid
 */
export const getValidBeleidsregelsLineageId = (
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelsRead[]>({
        url: `/valid/beleidsregels/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsregelsLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams
) => [`/valid/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidsregelsLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsregelsLineageId>>
>
export type GetValidBeleidsregelsLineageIdQueryError =
    GetValidBeleidsregelsLineageId404

export const useGetValidBeleidsregelsLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidsregelsLineageId>>,
    TError = GetValidBeleidsregelsLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsregelsLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsregelsLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsregelsLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsregelsLineageId>>
    > = ({ signal }) =>
        getValidBeleidsregelsLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsregelsLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests valid object for each
 */
export const getValidBeleidsrelaties = (
    params?: GetValidBeleidsrelatiesParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/valid/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsrelatiesQueryKey = (
    params?: GetValidBeleidsrelatiesParams
) => [`/valid/beleidsrelaties`, ...(params ? [params] : [])]

export type GetValidBeleidsrelatiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsrelaties>>
>
export type GetValidBeleidsrelatiesQueryError = GetValidBeleidsrelaties404

export const useGetValidBeleidsrelaties = <
    TData = Awaited<ReturnType<typeof getValidBeleidsrelaties>>,
    TError = GetValidBeleidsrelaties404
>(
    params?: GetValidBeleidsrelatiesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsrelaties>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidBeleidsrelatiesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsrelaties>>
    > = ({ signal }) => getValidBeleidsrelaties(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsrelaties>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsrelaties in this lineage that are valid
 */
export const getValidBeleidsrelatiesLineageId = (
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsrelatiesRead[]>({
        url: `/valid/beleidsrelaties/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidBeleidsrelatiesLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams
) => [`/valid/beleidsrelaties/${lineageId}`, ...(params ? [params] : [])]

export type GetValidBeleidsrelatiesLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidBeleidsrelatiesLineageId>>
>
export type GetValidBeleidsrelatiesLineageIdQueryError =
    GetValidBeleidsrelatiesLineageId404

export const useGetValidBeleidsrelatiesLineageId = <
    TData = Awaited<ReturnType<typeof getValidBeleidsrelatiesLineageId>>,
    TError = GetValidBeleidsrelatiesLineageId404
>(
    lineageId: number,
    params?: GetValidBeleidsrelatiesLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidBeleidsrelatiesLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidBeleidsrelatiesLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidBeleidsrelatiesLineageId>>
    > = ({ signal }) =>
        getValidBeleidsrelatiesLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidBeleidsrelatiesLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the gebiedsprogrammas lineages and shows the latests valid object for each
 */
export const getValidGebiedsprogrammas = (
    params?: GetValidGebiedsprogrammasParams,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammasRead[]>({
        url: `/valid/gebiedsprogrammas`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidGebiedsprogrammasQueryKey = (
    params?: GetValidGebiedsprogrammasParams
) => [`/valid/gebiedsprogrammas`, ...(params ? [params] : [])]

export type GetValidGebiedsprogrammasQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidGebiedsprogrammas>>
>
export type GetValidGebiedsprogrammasQueryError = GetValidGebiedsprogrammas404

export const useGetValidGebiedsprogrammas = <
    TData = Awaited<ReturnType<typeof getValidGebiedsprogrammas>>,
    TError = GetValidGebiedsprogrammas404
>(
    params?: GetValidGebiedsprogrammasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidGebiedsprogrammas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidGebiedsprogrammasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidGebiedsprogrammas>>
    > = ({ signal }) => getValidGebiedsprogrammas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidGebiedsprogrammas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the gebiedsprogrammas in this lineage that are valid
 */
export const getValidGebiedsprogrammasLineageId = (
    lineageId: number,
    params?: GetValidGebiedsprogrammasLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammasRead[]>({
        url: `/valid/gebiedsprogrammas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidGebiedsprogrammasLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidGebiedsprogrammasLineageIdParams
) => [`/valid/gebiedsprogrammas/${lineageId}`, ...(params ? [params] : [])]

export type GetValidGebiedsprogrammasLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidGebiedsprogrammasLineageId>>
>
export type GetValidGebiedsprogrammasLineageIdQueryError =
    GetValidGebiedsprogrammasLineageId404

export const useGetValidGebiedsprogrammasLineageId = <
    TData = Awaited<ReturnType<typeof getValidGebiedsprogrammasLineageId>>,
    TError = GetValidGebiedsprogrammasLineageId404
>(
    lineageId: number,
    params?: GetValidGebiedsprogrammasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidGebiedsprogrammasLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidGebiedsprogrammasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidGebiedsprogrammasLineageId>>
    > = ({ signal }) =>
        getValidGebiedsprogrammasLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidGebiedsprogrammasLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests valid object for each
 */
export const getValidMaatregelen = (
    params?: GetValidMaatregelenParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/valid/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidMaatregelenQueryKey = (
    params?: GetValidMaatregelenParams
) => [`/valid/maatregelen`, ...(params ? [params] : [])]

export type GetValidMaatregelenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidMaatregelen>>
>
export type GetValidMaatregelenQueryError = GetValidMaatregelen404

export const useGetValidMaatregelen = <
    TData = Awaited<ReturnType<typeof getValidMaatregelen>>,
    TError = GetValidMaatregelen404
>(
    params?: GetValidMaatregelenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidMaatregelen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidMaatregelenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidMaatregelen>>
    > = ({ signal }) => getValidMaatregelen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidMaatregelen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the maatregelen in this lineage that are valid
 */
export const getValidMaatregelenLineageId = (
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelenRead[]>({
        url: `/valid/maatregelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidMaatregelenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams
) => [`/valid/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export type GetValidMaatregelenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidMaatregelenLineageId>>
>
export type GetValidMaatregelenLineageIdQueryError =
    GetValidMaatregelenLineageId404

export const useGetValidMaatregelenLineageId = <
    TData = Awaited<ReturnType<typeof getValidMaatregelenLineageId>>,
    TError = GetValidMaatregelenLineageId404
>(
    lineageId: number,
    params?: GetValidMaatregelenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidMaatregelenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidMaatregelenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidMaatregelenLineageId>>
    > = ({ signal }) => getValidMaatregelenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidMaatregelenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the themas lineages and shows the latests valid object for each
 */
export const getValidThemas = (
    params?: GetValidThemasParams,
    signal?: AbortSignal
) => {
    return customInstance<ThemasRead[]>({
        url: `/valid/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidThemasQueryKey = (params?: GetValidThemasParams) => [
    `/valid/themas`,
    ...(params ? [params] : []),
]

export type GetValidThemasQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidThemas>>
>
export type GetValidThemasQueryError = GetValidThemas404

export const useGetValidThemas = <
    TData = Awaited<ReturnType<typeof getValidThemas>>,
    TError = GetValidThemas404
>(
    params?: GetValidThemasParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidThemas>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetValidThemasQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidThemas>>
    > = ({ signal }) => getValidThemas(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidThemas>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the themas in this lineage that are valid
 */
export const getValidThemasLineageId = (
    lineageId: number,
    params?: GetValidThemasLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<ThemasRead[]>({
        url: `/valid/themas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidThemasLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidThemasLineageIdParams
) => [`/valid/themas/${lineageId}`, ...(params ? [params] : [])]

export type GetValidThemasLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidThemasLineageId>>
>
export type GetValidThemasLineageIdQueryError = GetValidThemasLineageId404

export const useGetValidThemasLineageId = <
    TData = Awaited<ReturnType<typeof getValidThemasLineageId>>,
    TError = GetValidThemasLineageId404
>(
    lineageId: number,
    params?: GetValidThemasLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidThemasLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidThemasLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidThemasLineageId>>
    > = ({ signal }) => getValidThemasLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidThemasLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests valid object for each
 */
export const getValidVerordeningen = (
    params?: GetValidVerordeningenParams,
    signal?: AbortSignal
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/valid/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidVerordeningenQueryKey = (
    params?: GetValidVerordeningenParams
) => [`/valid/verordeningen`, ...(params ? [params] : [])]

export type GetValidVerordeningenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidVerordeningen>>
>
export type GetValidVerordeningenQueryError = GetValidVerordeningen404

export const useGetValidVerordeningen = <
    TData = Awaited<ReturnType<typeof getValidVerordeningen>>,
    TError = GetValidVerordeningen404
>(
    params?: GetValidVerordeningenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidVerordeningen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidVerordeningenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidVerordeningen>>
    > = ({ signal }) => getValidVerordeningen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidVerordeningen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the verordeningen in this lineage that are valid
 */
export const getValidVerordeningenLineageId = (
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/valid/verordeningen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidVerordeningenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams
) => [`/valid/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export type GetValidVerordeningenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidVerordeningenLineageId>>
>
export type GetValidVerordeningenLineageIdQueryError =
    GetValidVerordeningenLineageId404

export const useGetValidVerordeningenLineageId = <
    TData = Awaited<ReturnType<typeof getValidVerordeningenLineageId>>,
    TError = GetValidVerordeningenLineageId404
>(
    lineageId: number,
    params?: GetValidVerordeningenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidVerordeningenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidVerordeningenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidVerordeningenLineageId>>
    > = ({ signal }) =>
        getValidVerordeningenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidVerordeningenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests valid object for each
 */
export const getValidWerkingsgebieden = (
    params?: GetValidWerkingsgebiedenParams,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/valid/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidWerkingsgebiedenQueryKey = (
    params?: GetValidWerkingsgebiedenParams
) => [`/valid/werkingsgebieden`, ...(params ? [params] : [])]

export type GetValidWerkingsgebiedenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidWerkingsgebieden>>
>
export type GetValidWerkingsgebiedenQueryError = GetValidWerkingsgebieden404

export const useGetValidWerkingsgebieden = <
    TData = Awaited<ReturnType<typeof getValidWerkingsgebieden>>,
    TError = GetValidWerkingsgebieden404
>(
    params?: GetValidWerkingsgebiedenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidWerkingsgebieden>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetValidWerkingsgebiedenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidWerkingsgebieden>>
    > = ({ signal }) => getValidWerkingsgebieden(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidWerkingsgebieden>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the werkingsgebieden in this lineage that are valid
 */
export const getValidWerkingsgebiedenLineageId = (
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/valid/werkingsgebieden/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetValidWerkingsgebiedenLineageIdQueryKey = (
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams
) => [`/valid/werkingsgebieden/${lineageId}`, ...(params ? [params] : [])]

export type GetValidWerkingsgebiedenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getValidWerkingsgebiedenLineageId>>
>
export type GetValidWerkingsgebiedenLineageIdQueryError =
    GetValidWerkingsgebiedenLineageId404

export const useGetValidWerkingsgebiedenLineageId = <
    TData = Awaited<ReturnType<typeof getValidWerkingsgebiedenLineageId>>,
    TError = GetValidWerkingsgebiedenLineageId404
>(
    lineageId: number,
    params?: GetValidWerkingsgebiedenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getValidWerkingsgebiedenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetValidWerkingsgebiedenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getValidWerkingsgebiedenLineageId>>
    > = ({ signal }) =>
        getValidWerkingsgebiedenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getValidWerkingsgebiedenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVerordeningen = (
    params?: GetVerordeningenParams,
    signal?: AbortSignal
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetVerordeningenQueryKey = (
    params?: GetVerordeningenParams
) => [`/verordeningen`, ...(params ? [params] : [])]

export type GetVerordeningenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVerordeningen>>
>
export type GetVerordeningenQueryError = GetVerordeningen400

export const useGetVerordeningen = <
    TData = Awaited<ReturnType<typeof getVerordeningen>>,
    TError = GetVerordeningen400
>(
    params?: GetVerordeningenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVerordeningen>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetVerordeningenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVerordeningen>>
    > = ({ signal }) => getVerordeningen(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVerordeningen>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Creates a new verordeningen lineage
 */
export const postVerordeningen = (verordeningenWrite: VerordeningenWrite) => {
    return customInstance<VerordeningenRead>({
        url: `/verordeningen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningenWrite,
    })
}

export type PostVerordeningenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postVerordeningen>>
>
export type PostVerordeningenMutationBody = VerordeningenWrite
export type PostVerordeningenMutationError =
    | PostVerordeningen400
    | PostVerordeningen403
    | PostVerordeningen500

export const usePostVerordeningen = <
    TError = PostVerordeningen400 | PostVerordeningen403 | PostVerordeningen500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postVerordeningen>>,
        TError,
        { data: VerordeningenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postVerordeningen>>,
        { data: VerordeningenWrite }
    > = props => {
        const { data } = props ?? {}

        return postVerordeningen(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof postVerordeningen>>,
        TError,
        { data: VerordeningenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVerordeningenLineageId = (
    lineageId: number,
    params?: GetVerordeningenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<VerordeningenRead[]>({
        url: `/verordeningen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetVerordeningenLineageIdQueryKey = (
    lineageId: number,
    params?: GetVerordeningenLineageIdParams
) => [`/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export type GetVerordeningenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVerordeningenLineageId>>
>
export type GetVerordeningenLineageIdQueryError = GetVerordeningenLineageId404

export const useGetVerordeningenLineageId = <
    TData = Awaited<ReturnType<typeof getVerordeningenLineageId>>,
    TError = GetVerordeningenLineageId404
>(
    lineageId: number,
    params?: GetVerordeningenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVerordeningenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVerordeningenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVerordeningenLineageId>>
    > = ({ signal }) => getVerordeningenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVerordeningenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Adds a new verordeningen to a lineage
 */
export const patchVerordeningenLineageId = (
    lineageId: number,
    verordeningenWrite: VerordeningenWrite
) => {
    return customInstance<VerordeningenRead>({
        url: `/verordeningen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningenWrite,
    })
}

export type PatchVerordeningenLineageIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchVerordeningenLineageId>>
>
export type PatchVerordeningenLineageIdMutationBody = VerordeningenWrite
export type PatchVerordeningenLineageIdMutationError =
    | PatchVerordeningenLineageId400
    | PatchVerordeningenLineageId403
    | PatchVerordeningenLineageId500

export const usePatchVerordeningenLineageId = <
    TError =
        | PatchVerordeningenLineageId400
        | PatchVerordeningenLineageId403
        | PatchVerordeningenLineageId500,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchVerordeningenLineageId>>,
        TError,
        { lineageId: number; data: VerordeningenWrite },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchVerordeningenLineageId>>,
        { lineageId: number; data: VerordeningenWrite }
    > = props => {
        const { lineageId, data } = props ?? {}

        return patchVerordeningenLineageId(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof patchVerordeningenLineageId>>,
        TError,
        { lineageId: number; data: VerordeningenWrite },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * @summary Gets all the ambities lineages and shows the latests object for each
 */
export const getVersionAmbitiesObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitiesRead>({
        url: `/version/ambities/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionAmbitiesObjectUuidQueryKey = (objectUuid: string) => [
    `/version/ambities/${objectUuid}`,
]

export type GetVersionAmbitiesObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionAmbitiesObjectUuid>>
>
export type GetVersionAmbitiesObjectUuidQueryError =
    GetVersionAmbitiesObjectUuid404

export const useGetVersionAmbitiesObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionAmbitiesObjectUuid>>,
    TError = GetVersionAmbitiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionAmbitiesObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionAmbitiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionAmbitiesObjectUuid>>
    > = ({ signal }) => getVersionAmbitiesObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionAmbitiesObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the belangen lineages and shows the latests object for each
 */
export const getVersionBelangenObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BelangenRead>({
        url: `/version/belangen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBelangenObjectUuidQueryKey = (objectUuid: string) => [
    `/version/belangen/${objectUuid}`,
]

export type GetVersionBelangenObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBelangenObjectUuid>>
>
export type GetVersionBelangenObjectUuidQueryError =
    GetVersionBelangenObjectUuid404

export const useGetVersionBelangenObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBelangenObjectUuid>>,
    TError = GetVersionBelangenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBelangenObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBelangenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBelangenObjectUuid>>
    > = ({ signal }) => getVersionBelangenObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBelangenObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsdoelen lineages and shows the latests object for each
 */
export const getVersionBeleidsdoelenObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelenRead>({
        url: `/version/beleidsdoelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidsdoelenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsdoelen/${objectUuid}`]

export type GetVersionBeleidsdoelenObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidsdoelenObjectUuid>>
>
export type GetVersionBeleidsdoelenObjectUuidQueryError =
    GetVersionBeleidsdoelenObjectUuid404

export const useGetVersionBeleidsdoelenObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidsdoelenObjectUuid>>,
    TError = GetVersionBeleidsdoelenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidsdoelenObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsdoelenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidsdoelenObjectUuid>>
    > = ({ signal }) => getVersionBeleidsdoelenObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidsdoelenObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidskeuzes lineages and shows the latests object for each
 */
export const getVersionBeleidskeuzesObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzesRead>({
        url: `/version/beleidskeuzes/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidskeuzesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidskeuzes/${objectUuid}`]

export type GetVersionBeleidskeuzesObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidskeuzesObjectUuid>>
>
export type GetVersionBeleidskeuzesObjectUuidQueryError =
    GetVersionBeleidskeuzesObjectUuid404

export const useGetVersionBeleidskeuzesObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidskeuzesObjectUuid>>,
    TError = GetVersionBeleidskeuzesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidskeuzesObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidskeuzesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidskeuzesObjectUuid>>
    > = ({ signal }) => getVersionBeleidskeuzesObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidskeuzesObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsmodules lineages and shows the latests object for each
 */
export const getVersionBeleidsmodulesObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsmodulesRead>({
        url: `/version/beleidsmodules/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidsmodulesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsmodules/${objectUuid}`]

export type GetVersionBeleidsmodulesObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidsmodulesObjectUuid>>
>
export type GetVersionBeleidsmodulesObjectUuidQueryError =
    GetVersionBeleidsmodulesObjectUuid404

export const useGetVersionBeleidsmodulesObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidsmodulesObjectUuid>>,
    TError = GetVersionBeleidsmodulesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidsmodulesObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsmodulesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidsmodulesObjectUuid>>
    > = ({ signal }) => getVersionBeleidsmodulesObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidsmodulesObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsprestaties lineages and shows the latests object for each
 */
export const getVersionBeleidsprestatiesObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsprestatiesRead>({
        url: `/version/beleidsprestaties/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidsprestatiesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsprestaties/${objectUuid}`]

export type GetVersionBeleidsprestatiesObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidsprestatiesObjectUuid>>
>
export type GetVersionBeleidsprestatiesObjectUuidQueryError =
    GetVersionBeleidsprestatiesObjectUuid404

export const useGetVersionBeleidsprestatiesObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidsprestatiesObjectUuid>>,
    TError = GetVersionBeleidsprestatiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidsprestatiesObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsprestatiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidsprestatiesObjectUuid>>
    > = ({ signal }) =>
        getVersionBeleidsprestatiesObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidsprestatiesObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsregels lineages and shows the latests object for each
 */
export const getVersionBeleidsregelsObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelsRead>({
        url: `/version/beleidsregels/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidsregelsObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsregels/${objectUuid}`]

export type GetVersionBeleidsregelsObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidsregelsObjectUuid>>
>
export type GetVersionBeleidsregelsObjectUuidQueryError =
    GetVersionBeleidsregelsObjectUuid404

export const useGetVersionBeleidsregelsObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidsregelsObjectUuid>>,
    TError = GetVersionBeleidsregelsObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidsregelsObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsregelsObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidsregelsObjectUuid>>
    > = ({ signal }) => getVersionBeleidsregelsObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidsregelsObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the beleidsrelaties lineages and shows the latests object for each
 */
export const getVersionBeleidsrelatiesObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsrelatiesRead>({
        url: `/version/beleidsrelaties/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionBeleidsrelatiesObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/beleidsrelaties/${objectUuid}`]

export type GetVersionBeleidsrelatiesObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionBeleidsrelatiesObjectUuid>>
>
export type GetVersionBeleidsrelatiesObjectUuidQueryError =
    GetVersionBeleidsrelatiesObjectUuid404

export const useGetVersionBeleidsrelatiesObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionBeleidsrelatiesObjectUuid>>,
    TError = GetVersionBeleidsrelatiesObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionBeleidsrelatiesObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionBeleidsrelatiesObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionBeleidsrelatiesObjectUuid>>
    > = ({ signal }) => getVersionBeleidsrelatiesObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionBeleidsrelatiesObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the gebiedsprogrammas lineages and shows the latests object for each
 */
export const getVersionGebiedsprogrammasObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammasRead>({
        url: `/version/gebiedsprogrammas/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionGebiedsprogrammasObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/gebiedsprogrammas/${objectUuid}`]

export type GetVersionGebiedsprogrammasObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionGebiedsprogrammasObjectUuid>>
>
export type GetVersionGebiedsprogrammasObjectUuidQueryError =
    GetVersionGebiedsprogrammasObjectUuid404

export const useGetVersionGebiedsprogrammasObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionGebiedsprogrammasObjectUuid>>,
    TError = GetVersionGebiedsprogrammasObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionGebiedsprogrammasObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionGebiedsprogrammasObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionGebiedsprogrammasObjectUuid>>
    > = ({ signal }) =>
        getVersionGebiedsprogrammasObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionGebiedsprogrammasObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the maatregelen lineages and shows the latests object for each
 */
export const getVersionMaatregelenObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelenRead>({
        url: `/version/maatregelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionMaatregelenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/maatregelen/${objectUuid}`]

export type GetVersionMaatregelenObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionMaatregelenObjectUuid>>
>
export type GetVersionMaatregelenObjectUuidQueryError =
    GetVersionMaatregelenObjectUuid404

export const useGetVersionMaatregelenObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionMaatregelenObjectUuid>>,
    TError = GetVersionMaatregelenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionMaatregelenObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionMaatregelenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionMaatregelenObjectUuid>>
    > = ({ signal }) => getVersionMaatregelenObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionMaatregelenObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the themas lineages and shows the latests object for each
 */
export const getVersionThemasObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<ThemasRead>({
        url: `/version/themas/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionThemasObjectUuidQueryKey = (objectUuid: string) => [
    `/version/themas/${objectUuid}`,
]

export type GetVersionThemasObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionThemasObjectUuid>>
>
export type GetVersionThemasObjectUuidQueryError = GetVersionThemasObjectUuid404

export const useGetVersionThemasObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionThemasObjectUuid>>,
    TError = GetVersionThemasObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionThemasObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionThemasObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionThemasObjectUuid>>
    > = ({ signal }) => getVersionThemasObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionThemasObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the verordeningen lineages and shows the latests object for each
 */
export const getVersionVerordeningenObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<VerordeningenRead>({
        url: `/version/verordeningen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionVerordeningenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/verordeningen/${objectUuid}`]

export type GetVersionVerordeningenObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionVerordeningenObjectUuid>>
>
export type GetVersionVerordeningenObjectUuidQueryError =
    GetVersionVerordeningenObjectUuid404

export const useGetVersionVerordeningenObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionVerordeningenObjectUuid>>,
    TError = GetVersionVerordeningenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionVerordeningenObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionVerordeningenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionVerordeningenObjectUuid>>
    > = ({ signal }) => getVersionVerordeningenObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionVerordeningenObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getVersionWerkingsgebiedenObjectUuid = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedenRead>({
        url: `/version/werkingsgebieden/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getGetVersionWerkingsgebiedenObjectUuidQueryKey = (
    objectUuid: string
) => [`/version/werkingsgebieden/${objectUuid}`]

export type GetVersionWerkingsgebiedenObjectUuidQueryResult = NonNullable<
    Awaited<ReturnType<typeof getVersionWerkingsgebiedenObjectUuid>>
>
export type GetVersionWerkingsgebiedenObjectUuidQueryError =
    GetVersionWerkingsgebiedenObjectUuid404

export const useGetVersionWerkingsgebiedenObjectUuid = <
    TData = Awaited<ReturnType<typeof getVersionWerkingsgebiedenObjectUuid>>,
    TError = GetVersionWerkingsgebiedenObjectUuid404
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getVersionWerkingsgebiedenObjectUuid>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetVersionWerkingsgebiedenObjectUuidQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getVersionWerkingsgebiedenObjectUuid>>
    > = ({ signal }) => getVersionWerkingsgebiedenObjectUuid(objectUuid, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getVersionWerkingsgebiedenObjectUuid>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getWerkingsgebieden = (
    params?: GetWerkingsgebiedenParams,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetWerkingsgebiedenQueryKey = (
    params?: GetWerkingsgebiedenParams
) => [`/werkingsgebieden`, ...(params ? [params] : [])]

export type GetWerkingsgebiedenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getWerkingsgebieden>>
>
export type GetWerkingsgebiedenQueryError = GetWerkingsgebieden400

export const useGetWerkingsgebieden = <
    TData = Awaited<ReturnType<typeof getWerkingsgebieden>>,
    TError = GetWerkingsgebieden400
>(
    params?: GetWerkingsgebiedenParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getWerkingsgebieden>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetWerkingsgebiedenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getWerkingsgebieden>>
    > = ({ signal }) => getWerkingsgebieden(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getWerkingsgebieden>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Gets all the werkingsgebieden lineages and shows the latests object for each
 */
export const getWerkingsgebiedenLineageId = (
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedenRead[]>({
        url: `/werkingsgebieden/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getGetWerkingsgebiedenLineageIdQueryKey = (
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams
) => [`/werkingsgebieden/${lineageId}`, ...(params ? [params] : [])]

export type GetWerkingsgebiedenLineageIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getWerkingsgebiedenLineageId>>
>
export type GetWerkingsgebiedenLineageIdQueryError =
    GetWerkingsgebiedenLineageId404

export const useGetWerkingsgebiedenLineageId = <
    TData = Awaited<ReturnType<typeof getWerkingsgebiedenLineageId>>,
    TError = GetWerkingsgebiedenLineageId404
>(
    lineageId: number,
    params?: GetWerkingsgebiedenLineageIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getWerkingsgebiedenLineageId>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetWerkingsgebiedenLineageIdQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getWerkingsgebiedenLineageId>>
    > = ({ signal }) => getWerkingsgebiedenLineageId(lineageId, params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof getWerkingsgebiedenLineageId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}
