/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Omgevingsbeleid API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from '@tanstack/react-query'

import type {
    Token,
    HTTPValidationError,
    BodyLoginAccessTokenV01LoginAccessTokenPost,
    Ambitie,
    ReadAmbitiesV01AmbitiesGetParams,
    AmbitieCreate,
    AmbitieUpdate,
    ReadValidAmbitiesV01ValidAmbitiesGetParams,
    ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetParams,
    Belang,
    ReadBelangenV01BelangenGetParams,
    BelangCreate,
    BelangUpdate,
    ReadValidBelangenV01ValidBelangenGetParams,
    ReadValidBelangLineageV01ValidBelangenLineageIdGetParams,
    BeleidskeuzeListable,
    ReadBeleidskeuzesV01BeleidskeuzesGetParams,
    Beleidskeuze,
    BeleidskeuzeCreate,
    BeleidskeuzeUpdate,
    ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetParams,
    ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetParams,
    Beleidsdoel,
    ReadBeleidsdoelenV01BeleidsdoelenGetParams,
    BeleidsdoelCreate,
    BeleidsdoelUpdate,
    ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetParams,
    ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetParams,
    Beleidsmodule,
    ReadBeleidsmodulesV01BeleidsmodulesGetParams,
    BeleidsmoduleCreate,
    BeleidsmoduleUpdate,
    ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetParams,
    ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetParams,
    Beleidsprestatie,
    ReadBeleidsprestatiesV01BeleidsprestatiesGetParams,
    BeleidsprestatieCreate,
    BeleidsprestatieUpdate,
    ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetParams,
    ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetParams,
    Beleidsrelatie,
    ReadBeleidsrelatiesV01BeleidsrelatiesGetParams,
    BeleidsrelatieCreate,
    BeleidsrelatieUpdate,
    ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetParams,
    ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetParams,
    Beleidsregel,
    ReadBeleidsregelsV01BeleidsregelsGetParams,
    BeleidsregelCreate,
    BeleidsregelUpdate,
    ReadValidBeleidsregelsV01ValidBeleidsregelsGetParams,
    ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetParams,
    LatestVersionInline,
    GraphView,
    Gebruiker,
    SearchResultWrapper,
    SearchV01SearchGetParams,
    GeoSearchV01GeoSearchGetParams,
    Thema,
    ReadThemasV01ThemasGetParams,
    ThemaCreate,
    ThemaUpdate,
    ReadValidThemasV01ValidThemasGetParams,
    ReadValidThemaLineageV01ValidThemasLineageIdGetParams,
    Verordening,
    ReadVerordeningV01VerordeningenGetParams,
    VerordeningCreate,
    VerordeningUpdate,
    ReadValidVerordeningV01ValidVerordeningenGetParams,
    ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetParams,
    MaatregelListable,
    ReadMaatregelenV01MaatregelenGetParams,
    Maatregel,
    MaatregelCreate,
    MaatregelUpdate,
    ReadValidMaatregelenV01ValidMaatregelenGetParams,
    ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetParams,
    Werkingsgebied,
    ReadWerkingsgebiedV01WerkingsgebiedenGetParams,
    WerkingsgebiedCreate,
    WerkingsgebiedUpdate,
    ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetParams,
    ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetParams,
} from './fetchers.schemas'
import { customInstance } from './instance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Health Request
 */
export const healthRequestHealthGet = (signal?: AbortSignal) => {
    return customInstance<unknown>({ url: `/health/`, method: 'get', signal })
}

export const getHealthRequestHealthGetQueryKey = () => [`/health/`]

export type HealthRequestHealthGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof healthRequestHealthGet>>
>
export type HealthRequestHealthGetQueryError = unknown

export const useHealthRequestHealthGet = <
    TData = Awaited<ReturnType<typeof healthRequestHealthGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof healthRequestHealthGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getHealthRequestHealthGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof healthRequestHealthGet>>
    > = ({ signal }) => healthRequestHealthGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof healthRequestHealthGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * @summary Health Request
 */
export const healthRequestHealthHead = (signal?: AbortSignal) => {
    return customInstance<unknown>({ url: `/health/`, method: 'head', signal })
}

export type HealthRequestHealthHeadMutationResult = NonNullable<
    Awaited<ReturnType<typeof healthRequestHealthHead>>
>

export type HealthRequestHealthHeadMutationError = unknown

export const useHealthRequestHealthHead = <
    TError = unknown,
    TVariables = void,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TError,
        TVariables,
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TVariables
    > = () => {
        return healthRequestHealthHead()
    }

    return useMutation<
        Awaited<ReturnType<typeof healthRequestHealthHead>>,
        TError,
        TVariables,
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * OAuth2 compatible token login, get an access token for future requests
 * @summary Login Access Token
 */
export const loginAccessTokenV01LoginAccessTokenPost = (
    bodyLoginAccessTokenV01LoginAccessTokenPost: BodyLoginAccessTokenV01LoginAccessTokenPost
) => {
    const formUrlEncoded = new URLSearchParams()
    if (bodyLoginAccessTokenV01LoginAccessTokenPost.grant_type !== undefined) {
        formUrlEncoded.append(
            'grant_type',
            bodyLoginAccessTokenV01LoginAccessTokenPost.grant_type
        )
    }
    formUrlEncoded.append(
        'username',
        bodyLoginAccessTokenV01LoginAccessTokenPost.username
    )
    formUrlEncoded.append(
        'password',
        bodyLoginAccessTokenV01LoginAccessTokenPost.password
    )
    if (bodyLoginAccessTokenV01LoginAccessTokenPost.scope !== undefined) {
        formUrlEncoded.append(
            'scope',
            bodyLoginAccessTokenV01LoginAccessTokenPost.scope
        )
    }
    if (bodyLoginAccessTokenV01LoginAccessTokenPost.client_id !== undefined) {
        formUrlEncoded.append(
            'client_id',
            bodyLoginAccessTokenV01LoginAccessTokenPost.client_id
        )
    }
    if (
        bodyLoginAccessTokenV01LoginAccessTokenPost.client_secret !== undefined
    ) {
        formUrlEncoded.append(
            'client_secret',
            bodyLoginAccessTokenV01LoginAccessTokenPost.client_secret
        )
    }

    return customInstance<Token>({
        url: `/v0.1/login/access-token`,
        method: 'post',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded,
    })
}

export type LoginAccessTokenV01LoginAccessTokenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof loginAccessTokenV01LoginAccessTokenPost>>
>
export type LoginAccessTokenV01LoginAccessTokenPostMutationBody =
    BodyLoginAccessTokenV01LoginAccessTokenPost
export type LoginAccessTokenV01LoginAccessTokenPostMutationError =
    HTTPValidationError

export const useLoginAccessTokenV01LoginAccessTokenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof loginAccessTokenV01LoginAccessTokenPost>>,
        TError,
        { data: BodyLoginAccessTokenV01LoginAccessTokenPost },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof loginAccessTokenV01LoginAccessTokenPost>>,
        { data: BodyLoginAccessTokenV01LoginAccessTokenPost }
    > = props => {
        const { data } = props ?? {}

        return loginAccessTokenV01LoginAccessTokenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof loginAccessTokenV01LoginAccessTokenPost>>,
        TError,
        { data: BodyLoginAccessTokenV01LoginAccessTokenPost },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the ambities lineages and shows the latests object for each
 * @summary Read Ambities
 */
export const readAmbitiesV01AmbitiesGet = (
    params?: ReadAmbitiesV01AmbitiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadAmbitiesV01AmbitiesGetQueryKey = (
    params?: ReadAmbitiesV01AmbitiesGetParams
) => [`/v0.1/ambities`, ...(params ? [params] : [])]

export type ReadAmbitiesV01AmbitiesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readAmbitiesV01AmbitiesGet>>
>
export type ReadAmbitiesV01AmbitiesGetQueryError = HTTPValidationError

export const useReadAmbitiesV01AmbitiesGet = <
    TData = Awaited<ReturnType<typeof readAmbitiesV01AmbitiesGet>>,
    TError = HTTPValidationError
>(
    params?: ReadAmbitiesV01AmbitiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readAmbitiesV01AmbitiesGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadAmbitiesV01AmbitiesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readAmbitiesV01AmbitiesGet>>
    > = ({ signal }) => readAmbitiesV01AmbitiesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readAmbitiesV01AmbitiesGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new ambities lineage
 * @summary Create Ambitie
 */
export const createAmbitieV01AmbitiesPost = (ambitieCreate: AmbitieCreate) => {
    return customInstance<Ambitie>({
        url: `/v0.1/ambities`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieCreate,
    })
}

export type CreateAmbitieV01AmbitiesPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createAmbitieV01AmbitiesPost>>
>
export type CreateAmbitieV01AmbitiesPostMutationBody = AmbitieCreate
export type CreateAmbitieV01AmbitiesPostMutationError = HTTPValidationError

export const useCreateAmbitieV01AmbitiesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createAmbitieV01AmbitiesPost>>,
        TError,
        { data: AmbitieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createAmbitieV01AmbitiesPost>>,
        { data: AmbitieCreate }
    > = props => {
        const { data } = props ?? {}

        return createAmbitieV01AmbitiesPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createAmbitieV01AmbitiesPost>>,
        TError,
        { data: AmbitieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the ambities versions by lineage
 * @summary Read Ambitie Lineage
 */
export const readAmbitieLineageV01AmbitiesLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/ambities/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadAmbitieLineageV01AmbitiesLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/ambities/${lineageId}`]

export type ReadAmbitieLineageV01AmbitiesLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readAmbitieLineageV01AmbitiesLineageIdGet>>
>
export type ReadAmbitieLineageV01AmbitiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadAmbitieLineageV01AmbitiesLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readAmbitieLineageV01AmbitiesLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readAmbitieLineageV01AmbitiesLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadAmbitieLineageV01AmbitiesLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readAmbitieLineageV01AmbitiesLineageIdGet>>
    > = ({ signal }) =>
        readAmbitieLineageV01AmbitiesLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readAmbitieLineageV01AmbitiesLineageIdGet>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new ambities to a lineage
 * @summary Update Ambitie
 */
export const updateAmbitieV01AmbitiesLineageIdPatch = (
    lineageId: number,
    ambitieUpdate: AmbitieUpdate
) => {
    return customInstance<Ambitie>({
        url: `/v0.1/ambities/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieUpdate,
    })
}

export type UpdateAmbitieV01AmbitiesLineageIdPatchMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateAmbitieV01AmbitiesLineageIdPatch>>
>
export type UpdateAmbitieV01AmbitiesLineageIdPatchMutationBody = AmbitieUpdate
export type UpdateAmbitieV01AmbitiesLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateAmbitieV01AmbitiesLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateAmbitieV01AmbitiesLineageIdPatch>>,
        TError,
        { lineageId: number; data: AmbitieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateAmbitieV01AmbitiesLineageIdPatch>>,
        { lineageId: number; data: AmbitieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateAmbitieV01AmbitiesLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateAmbitieV01AmbitiesLineageIdPatch>>,
        TError,
        { lineageId: number; data: AmbitieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of ambities.
 * @summary Changes Ambities
 */
export const changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/ambities/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGetQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/ambities/${oldUuid}/${newUuid}`]

export type ChangesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet
            >
        >
    >
export type ChangesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<typeof changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet>
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesAmbitiesV01ChangesAmbitiesOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the ambities lineages and shows the latests valid object for each.
 * @summary Read Valid Ambities
 */
export const readValidAmbitiesV01ValidAmbitiesGet = (
    params?: ReadValidAmbitiesV01ValidAmbitiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/valid/ambities`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidAmbitiesV01ValidAmbitiesGetQueryKey = (
    params?: ReadValidAmbitiesV01ValidAmbitiesGetParams
) => [`/v0.1/valid/ambities`, ...(params ? [params] : [])]

export type ReadValidAmbitiesV01ValidAmbitiesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidAmbitiesV01ValidAmbitiesGet>>
>
export type ReadValidAmbitiesV01ValidAmbitiesGetQueryError = HTTPValidationError

export const useReadValidAmbitiesV01ValidAmbitiesGet = <
    TData = Awaited<ReturnType<typeof readValidAmbitiesV01ValidAmbitiesGet>>,
    TError = HTTPValidationError
>(
    params?: ReadValidAmbitiesV01ValidAmbitiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidAmbitiesV01ValidAmbitiesGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidAmbitiesV01ValidAmbitiesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidAmbitiesV01ValidAmbitiesGet>>
    > = ({ signal }) => readValidAmbitiesV01ValidAmbitiesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidAmbitiesV01ValidAmbitiesGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the ambities in this lineage that are valid
 * @summary Read Valid Ambitie Lineage
 */
export const readValidAmbitieLineageV01ValidAmbitiesLineageIdGet = (
    lineageId: number,
    params?: ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie[]>({
        url: `/v0.1/valid/ambities/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetQueryKey = (
    lineageId: number,
    params?: ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetParams
) => [`/v0.1/valid/ambities/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidAmbitieLineageV01ValidAmbitiesLineageIdGet
            >
        >
    >
export type ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidAmbitieLineageV01ValidAmbitiesLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readValidAmbitieLineageV01ValidAmbitiesLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidAmbitieLineageV01ValidAmbitiesLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidAmbitieLineageV01ValidAmbitiesLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidAmbitieLineageV01ValidAmbitiesLineageIdGet
            >
        >
    > = ({ signal }) =>
        readValidAmbitieLineageV01ValidAmbitiesLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidAmbitieLineageV01ValidAmbitiesLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionAmbitiesObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Ambitie>({
        url: `/v0.1/version/ambities/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionAmbitiesObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/ambities/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionAmbitiesObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionAmbitiesObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionAmbitiesObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionAmbitiesObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionAmbitiesObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionAmbitiesObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionAmbitiesObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionAmbitiesObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionAmbitiesObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionAmbitiesObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen lineages and shows the latests object for each
 * @summary Read Belangen
 */
export const readBelangenV01BelangenGet = (
    params?: ReadBelangenV01BelangenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBelangenV01BelangenGetQueryKey = (
    params?: ReadBelangenV01BelangenGetParams
) => [`/v0.1/belangen`, ...(params ? [params] : [])]

export type ReadBelangenV01BelangenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBelangenV01BelangenGet>>
>
export type ReadBelangenV01BelangenGetQueryError = HTTPValidationError

export const useReadBelangenV01BelangenGet = <
    TData = Awaited<ReturnType<typeof readBelangenV01BelangenGet>>,
    TError = HTTPValidationError
>(
    params?: ReadBelangenV01BelangenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBelangenV01BelangenGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadBelangenV01BelangenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBelangenV01BelangenGet>>
    > = ({ signal }) => readBelangenV01BelangenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBelangenV01BelangenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new belangen lineage
 * @summary Create Belang
 */
export const createBelangV01BelangenPost = (belangCreate: BelangCreate) => {
    return customInstance<Belang>({
        url: `/v0.1/belangen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: belangCreate,
    })
}

export type CreateBelangV01BelangenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBelangV01BelangenPost>>
>
export type CreateBelangV01BelangenPostMutationBody = BelangCreate
export type CreateBelangV01BelangenPostMutationError = HTTPValidationError

export const useCreateBelangV01BelangenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBelangV01BelangenPost>>,
        TError,
        { data: BelangCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBelangV01BelangenPost>>,
        { data: BelangCreate }
    > = props => {
        const { data } = props ?? {}

        return createBelangV01BelangenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBelangV01BelangenPost>>,
        TError,
        { data: BelangCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the belangen versions by lineage
 * @summary Read Belang Lineage
 */
export const readBelangLineageV01BelangenLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/belangen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBelangLineageV01BelangenLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/belangen/${lineageId}`]

export type ReadBelangLineageV01BelangenLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBelangLineageV01BelangenLineageIdGet>>
>
export type ReadBelangLineageV01BelangenLineageIdGetQueryError =
    HTTPValidationError

export const useReadBelangLineageV01BelangenLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readBelangLineageV01BelangenLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readBelangLineageV01BelangenLineageIdGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBelangLineageV01BelangenLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBelangLineageV01BelangenLineageIdGet>>
    > = ({ signal }) =>
        readBelangLineageV01BelangenLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBelangLineageV01BelangenLineageIdGet>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new belangen to a lineage
 * @summary Update Belang
 */
export const updateBelangV01BelangenLineageIdPatch = (
    lineageId: number,
    belangUpdate: BelangUpdate
) => {
    return customInstance<Belang>({
        url: `/v0.1/belangen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: belangUpdate,
    })
}

export type UpdateBelangV01BelangenLineageIdPatchMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBelangV01BelangenLineageIdPatch>>
>
export type UpdateBelangV01BelangenLineageIdPatchMutationBody = BelangUpdate
export type UpdateBelangV01BelangenLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBelangV01BelangenLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBelangV01BelangenLineageIdPatch>>,
        TError,
        { lineageId: number; data: BelangUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBelangV01BelangenLineageIdPatch>>,
        { lineageId: number; data: BelangUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBelangV01BelangenLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateBelangV01BelangenLineageIdPatch>>,
        TError,
        { lineageId: number; data: BelangUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of belangen.
 * @summary Changes Belangen
 */
export const changesBelangenV01ChangesBelangenOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/belangen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBelangenV01ChangesBelangenOldUuidNewUuidGetQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/belangen/${oldUuid}/${newUuid}`]

export type ChangesBelangenV01ChangesBelangenOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBelangenV01ChangesBelangenOldUuidNewUuidGet
            >
        >
    >
export type ChangesBelangenV01ChangesBelangenOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBelangenV01ChangesBelangenOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<typeof changesBelangenV01ChangesBelangenOldUuidNewUuidGet>
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesBelangenV01ChangesBelangenOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBelangenV01ChangesBelangenOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesBelangenV01ChangesBelangenOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesBelangenV01ChangesBelangenOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesBelangenV01ChangesBelangenOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen lineages and shows the latests valid object for each.
 * @summary Read Valid Belangen
 */
export const readValidBelangenV01ValidBelangenGet = (
    params?: ReadValidBelangenV01ValidBelangenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/valid/belangen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBelangenV01ValidBelangenGetQueryKey = (
    params?: ReadValidBelangenV01ValidBelangenGetParams
) => [`/v0.1/valid/belangen`, ...(params ? [params] : [])]

export type ReadValidBelangenV01ValidBelangenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidBelangenV01ValidBelangenGet>>
>
export type ReadValidBelangenV01ValidBelangenGetQueryError = HTTPValidationError

export const useReadValidBelangenV01ValidBelangenGet = <
    TData = Awaited<ReturnType<typeof readValidBelangenV01ValidBelangenGet>>,
    TError = HTTPValidationError
>(
    params?: ReadValidBelangenV01ValidBelangenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidBelangenV01ValidBelangenGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBelangenV01ValidBelangenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidBelangenV01ValidBelangenGet>>
    > = ({ signal }) => readValidBelangenV01ValidBelangenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidBelangenV01ValidBelangenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the belangen in this lineage that are valid
 * @summary Read Valid Belang Lineage
 */
export const readValidBelangLineageV01ValidBelangenLineageIdGet = (
    lineageId: number,
    params?: ReadValidBelangLineageV01ValidBelangenLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Belang[]>({
        url: `/v0.1/valid/belangen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBelangLineageV01ValidBelangenLineageIdGetQueryKey = (
    lineageId: number,
    params?: ReadValidBelangLineageV01ValidBelangenLineageIdGetParams
) => [`/v0.1/valid/belangen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBelangLineageV01ValidBelangenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBelangLineageV01ValidBelangenLineageIdGet
            >
        >
    >
export type ReadValidBelangLineageV01ValidBelangenLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBelangLineageV01ValidBelangenLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readValidBelangLineageV01ValidBelangenLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBelangLineageV01ValidBelangenLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBelangLineageV01ValidBelangenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBelangLineageV01ValidBelangenLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidBelangLineageV01ValidBelangenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readValidBelangLineageV01ValidBelangenLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidBelangLineageV01ValidBelangenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBelangenObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Belang>({
        url: `/v0.1/version/belangen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBelangenObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/belangen/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBelangenObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBelangenObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBelangenObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBelangenObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionBelangenObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBelangenObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionBelangenObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBelangenObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionBelangenObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBelangenObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes lineages and shows the latests object for each
 * @summary Read Beleidskeuzes
 */
export const readBeleidskeuzesV01BeleidskeuzesGet = (
    params?: ReadBeleidskeuzesV01BeleidskeuzesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeListable[]>({
        url: `/v0.1/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidskeuzesV01BeleidskeuzesGetQueryKey = (
    params?: ReadBeleidskeuzesV01BeleidskeuzesGetParams
) => [`/v0.1/beleidskeuzes`, ...(params ? [params] : [])]

export type ReadBeleidskeuzesV01BeleidskeuzesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidskeuzesV01BeleidskeuzesGet>>
>
export type ReadBeleidskeuzesV01BeleidskeuzesGetQueryError = HTTPValidationError

export const useReadBeleidskeuzesV01BeleidskeuzesGet = <
    TData = Awaited<ReturnType<typeof readBeleidskeuzesV01BeleidskeuzesGet>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidskeuzesV01BeleidskeuzesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidskeuzesV01BeleidskeuzesGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidskeuzesV01BeleidskeuzesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidskeuzesV01BeleidskeuzesGet>>
    > = ({ signal }) => readBeleidskeuzesV01BeleidskeuzesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidskeuzesV01BeleidskeuzesGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidskeuzes lineage
 * @summary Create Beleidskeuze
 */
export const createBeleidskeuzeV01BeleidskeuzesPost = (
    beleidskeuzeCreate: BeleidskeuzeCreate
) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/beleidskeuzes`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeCreate,
    })
}

export type CreateBeleidskeuzeV01BeleidskeuzesPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidskeuzeV01BeleidskeuzesPost>>
>
export type CreateBeleidskeuzeV01BeleidskeuzesPostMutationBody =
    BeleidskeuzeCreate
export type CreateBeleidskeuzeV01BeleidskeuzesPostMutationError =
    HTTPValidationError

export const useCreateBeleidskeuzeV01BeleidskeuzesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidskeuzeV01BeleidskeuzesPost>>,
        TError,
        { data: BeleidskeuzeCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidskeuzeV01BeleidskeuzesPost>>,
        { data: BeleidskeuzeCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidskeuzeV01BeleidskeuzesPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidskeuzeV01BeleidskeuzesPost>>,
        TError,
        { data: BeleidskeuzeCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidskeuzes versions by lineage
 * @summary Read Beleidskeuze Lineage
 */
export const readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze[]>({
        url: `/v0.1/beleidskeuzes/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidskeuzeLineageV01BeleidskeuzesLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/beleidskeuzes/${lineageId}`]

export type ReadBeleidskeuzeLineageV01BeleidskeuzesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet
            >
        >
    >
export type ReadBeleidskeuzeLineageV01BeleidskeuzesLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidskeuzeLineageV01BeleidskeuzesLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidskeuzeLineageV01BeleidskeuzesLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Update latest beleidskeuze from a lineage
 * @summary Update Beleidskeuze
 */
export const updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch = (
    lineageId: number,
    beleidskeuzeUpdate: BeleidskeuzeUpdate
) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/beleidskeuzes/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeUpdate,
    })
}

export type UpdateBeleidskeuzeV01BeleidskeuzesLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch>
        >
    >
export type UpdateBeleidskeuzeV01BeleidskeuzesLineageIdPatchMutationBody =
    BeleidskeuzeUpdate
export type UpdateBeleidskeuzeV01BeleidskeuzesLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidskeuzeV01BeleidskeuzesLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidskeuzeUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch>
        >,
        { lineageId: number; data: BeleidskeuzeUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof updateBeleidskeuzeV01BeleidskeuzesLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidskeuzeUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidskeuzes.
 * @summary Changes Beleidskeuzes
 */
export const changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidskeuzes/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidskeuzes/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesBeleidskeuzesV01ChangesBeleidskeuzesOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidskeuzes
 */
export const readValidBeleidskeuzesV01ValidBeleidskeuzesGet = (
    params?: ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeListable[]>({
        url: `/v0.1/valid/beleidskeuzes`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidskeuzesV01ValidBeleidskeuzesGetQueryKey = (
    params?: ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetParams
) => [`/v0.1/valid/beleidskeuzes`, ...(params ? [params] : [])]

export type ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readValidBeleidskeuzesV01ValidBeleidskeuzesGet>
        >
    >
export type ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetQueryError =
    HTTPValidationError

export const useReadValidBeleidskeuzesV01ValidBeleidskeuzesGet = <
    TData = Awaited<
        ReturnType<typeof readValidBeleidskeuzesV01ValidBeleidskeuzesGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidskeuzesV01ValidBeleidskeuzesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidskeuzesV01ValidBeleidskeuzesGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidskeuzesV01ValidBeleidskeuzesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readValidBeleidskeuzesV01ValidBeleidskeuzesGet>
        >
    > = ({ signal }) =>
        readValidBeleidskeuzesV01ValidBeleidskeuzesGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidBeleidskeuzesV01ValidBeleidskeuzesGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidskeuzes in this lineage that are valid
 * @summary Read Valid Beleidskeuze Lineage
 */
export const readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet = (
    lineageId: number,
    params?: ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze[]>({
        url: `/v0.1/valid/beleidskeuzes/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetParams
    ) => [`/v0.1/valid/beleidskeuzes/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet
            >
        >
    >
export type ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidBeleidskeuzeLineageV01ValidBeleidskeuzesLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidskeuze>({
        url: `/v0.1/version/beleidskeuzes/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidskeuzes/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidskeuzesObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen lineages and shows the latests object for each
 * @summary Read Beleidsdoelen
 */
export const readBeleidsdoelenV01BeleidsdoelenGet = (
    params?: ReadBeleidsdoelenV01BeleidsdoelenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsdoelenV01BeleidsdoelenGetQueryKey = (
    params?: ReadBeleidsdoelenV01BeleidsdoelenGetParams
) => [`/v0.1/beleidsdoelen`, ...(params ? [params] : [])]

export type ReadBeleidsdoelenV01BeleidsdoelenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsdoelenV01BeleidsdoelenGet>>
>
export type ReadBeleidsdoelenV01BeleidsdoelenGetQueryError = HTTPValidationError

export const useReadBeleidsdoelenV01BeleidsdoelenGet = <
    TData = Awaited<ReturnType<typeof readBeleidsdoelenV01BeleidsdoelenGet>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsdoelenV01BeleidsdoelenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsdoelenV01BeleidsdoelenGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsdoelenV01BeleidsdoelenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsdoelenV01BeleidsdoelenGet>>
    > = ({ signal }) => readBeleidsdoelenV01BeleidsdoelenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsdoelenV01BeleidsdoelenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsdoelen lineage
 * @summary Create Beleidsdoel
 */
export const createBeleidsdoelV01BeleidsdoelenPost = (
    beleidsdoelCreate: BeleidsdoelCreate
) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/beleidsdoelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelCreate,
    })
}

export type CreateBeleidsdoelV01BeleidsdoelenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsdoelV01BeleidsdoelenPost>>
>
export type CreateBeleidsdoelV01BeleidsdoelenPostMutationBody =
    BeleidsdoelCreate
export type CreateBeleidsdoelV01BeleidsdoelenPostMutationError =
    HTTPValidationError

export const useCreateBeleidsdoelV01BeleidsdoelenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsdoelV01BeleidsdoelenPost>>,
        TError,
        { data: BeleidsdoelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsdoelV01BeleidsdoelenPost>>,
        { data: BeleidsdoelCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsdoelV01BeleidsdoelenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsdoelV01BeleidsdoelenPost>>,
        TError,
        { data: BeleidsdoelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsdoelen versions by lineage
 * @summary Read Beleidsdoel Lineage
 */
export const readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/beleidsdoelen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsdoelLineageV01BeleidsdoelenLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/beleidsdoelen/${lineageId}`]

export type ReadBeleidsdoelLineageV01BeleidsdoelenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet
            >
        >
    >
export type ReadBeleidsdoelLineageV01BeleidsdoelenLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidsdoelLineageV01BeleidsdoelenLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsdoelLineageV01BeleidsdoelenLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidsdoelLineageV01BeleidsdoelenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsdoelen to a lineage
 * @summary Update Beleidsdoel
 */
export const updateBeleidsdoelV01BeleidsdoelenLineageIdPatch = (
    lineageId: number,
    beleidsdoelUpdate: BeleidsdoelUpdate
) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/beleidsdoelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelUpdate,
    })
}

export type UpdateBeleidsdoelV01BeleidsdoelenLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof updateBeleidsdoelV01BeleidsdoelenLineageIdPatch>
        >
    >
export type UpdateBeleidsdoelV01BeleidsdoelenLineageIdPatchMutationBody =
    BeleidsdoelUpdate
export type UpdateBeleidsdoelV01BeleidsdoelenLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidsdoelV01BeleidsdoelenLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof updateBeleidsdoelV01BeleidsdoelenLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidsdoelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof updateBeleidsdoelV01BeleidsdoelenLineageIdPatch>
        >,
        { lineageId: number; data: BeleidsdoelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsdoelV01BeleidsdoelenLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof updateBeleidsdoelV01BeleidsdoelenLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidsdoelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsdoelen.
 * @summary Changes Beleidsdoelen
 */
export const changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsdoelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidsdoelen/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesBeleidsdoelenV01ChangesBeleidsdoelenOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsdoelen
 */
export const readValidBeleidsdoelenV01ValidBeleidsdoelenGet = (
    params?: ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/valid/beleidsdoelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsdoelenV01ValidBeleidsdoelenGetQueryKey = (
    params?: ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetParams
) => [`/v0.1/valid/beleidsdoelen`, ...(params ? [params] : [])]

export type ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readValidBeleidsdoelenV01ValidBeleidsdoelenGet>
        >
    >
export type ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsdoelenV01ValidBeleidsdoelenGet = <
    TData = Awaited<
        ReturnType<typeof readValidBeleidsdoelenV01ValidBeleidsdoelenGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsdoelenV01ValidBeleidsdoelenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsdoelenV01ValidBeleidsdoelenGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsdoelenV01ValidBeleidsdoelenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readValidBeleidsdoelenV01ValidBeleidsdoelenGet>
        >
    > = ({ signal }) =>
        readValidBeleidsdoelenV01ValidBeleidsdoelenGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidBeleidsdoelenV01ValidBeleidsdoelenGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsdoelen in this lineage that are valid
 * @summary Read Valid Beleidsdoel Lineage
 */
export const readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet = (
    lineageId: number,
    params?: ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel[]>({
        url: `/v0.1/valid/beleidsdoelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetParams
    ) => [`/v0.1/valid/beleidsdoelen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet
            >
        >
    >
export type ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidBeleidsdoelLineageV01ValidBeleidsdoelenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsdoel>({
        url: `/v0.1/version/beleidsdoelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidsdoelen/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsdoelenObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsmodules lineages and shows the latests object for each
 * @summary Read Beleidsmodules
 */
export const readBeleidsmodulesV01BeleidsmodulesGet = (
    params?: ReadBeleidsmodulesV01BeleidsmodulesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsmodulesV01BeleidsmodulesGetQueryKey = (
    params?: ReadBeleidsmodulesV01BeleidsmodulesGetParams
) => [`/v0.1/beleidsmodules`, ...(params ? [params] : [])]

export type ReadBeleidsmodulesV01BeleidsmodulesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsmodulesV01BeleidsmodulesGet>>
>
export type ReadBeleidsmodulesV01BeleidsmodulesGetQueryError =
    HTTPValidationError

export const useReadBeleidsmodulesV01BeleidsmodulesGet = <
    TData = Awaited<ReturnType<typeof readBeleidsmodulesV01BeleidsmodulesGet>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsmodulesV01BeleidsmodulesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsmodulesV01BeleidsmodulesGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsmodulesV01BeleidsmodulesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsmodulesV01BeleidsmodulesGet>>
    > = ({ signal }) => readBeleidsmodulesV01BeleidsmodulesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsmodulesV01BeleidsmodulesGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsmodules lineage
 * @summary Create Beleidsmodule
 */
export const createBeleidsmoduleV01BeleidsmodulesPost = (
    beleidsmoduleCreate: BeleidsmoduleCreate
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/beleidsmodules`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmoduleCreate,
    })
}

export type CreateBeleidsmoduleV01BeleidsmodulesPostMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof createBeleidsmoduleV01BeleidsmodulesPost>>
    >
export type CreateBeleidsmoduleV01BeleidsmodulesPostMutationBody =
    BeleidsmoduleCreate
export type CreateBeleidsmoduleV01BeleidsmodulesPostMutationError =
    HTTPValidationError

export const useCreateBeleidsmoduleV01BeleidsmodulesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsmoduleV01BeleidsmodulesPost>>,
        TError,
        { data: BeleidsmoduleCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsmoduleV01BeleidsmodulesPost>>,
        { data: BeleidsmoduleCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsmoduleV01BeleidsmodulesPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsmoduleV01BeleidsmodulesPost>>,
        TError,
        { data: BeleidsmoduleCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsmodules versions by lineage
 * @summary Read Beleidsmodule Lineage
 */
export const readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/beleidsmodules/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsmoduleLineageV01BeleidsmodulesLineageIdGetQueryKey =
    (lineageId: number) => [`/v0.1/beleidsmodules/${lineageId}`]

export type ReadBeleidsmoduleLineageV01BeleidsmodulesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet
            >
        >
    >
export type ReadBeleidsmoduleLineageV01BeleidsmodulesLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsmoduleLineageV01BeleidsmodulesLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidsmoduleLineageV01BeleidsmodulesLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsmodules to a lineage
 * @summary Update Beleidsmodule
 */
export const updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch = (
    lineageId: number,
    beleidsmoduleUpdate: BeleidsmoduleUpdate
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/beleidsmodules/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsmoduleUpdate,
    })
}

export type UpdateBeleidsmoduleV01BeleidsmodulesLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch
            >
        >
    >
export type UpdateBeleidsmoduleV01BeleidsmodulesLineageIdPatchMutationBody =
    BeleidsmoduleUpdate
export type UpdateBeleidsmoduleV01BeleidsmodulesLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidsmoduleV01BeleidsmodulesLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsmoduleUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch
            >
        >,
        { lineageId: number; data: BeleidsmoduleUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch(
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof updateBeleidsmoduleV01BeleidsmodulesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsmoduleUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsmodules.
 * @summary Changes Beleidsmodules
 */
export const changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsmodules/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidsmodules/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        oldUuid: string,
        newUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getChangesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGetQueryKey(
                oldUuid,
                newUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet
                >
            >
        > = ({ signal }) =>
            changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet(
                oldUuid,
                newUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof changesBeleidsmodulesV01ChangesBeleidsmodulesOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!(oldUuid && newUuid),
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsmodules lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsmodules
 */
export const readValidBeleidsmodulesV01ValidBeleidsmodulesGet = (
    params?: ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/valid/beleidsmodules`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsmodulesV01ValidBeleidsmodulesGetQueryKey = (
    params?: ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetParams
) => [`/v0.1/valid/beleidsmodules`, ...(params ? [params] : [])]

export type ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readValidBeleidsmodulesV01ValidBeleidsmodulesGet>
        >
    >
export type ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsmodulesV01ValidBeleidsmodulesGet = <
    TData = Awaited<
        ReturnType<typeof readValidBeleidsmodulesV01ValidBeleidsmodulesGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsmodulesV01ValidBeleidsmodulesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsmodulesV01ValidBeleidsmodulesGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsmodulesV01ValidBeleidsmodulesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readValidBeleidsmodulesV01ValidBeleidsmodulesGet>
        >
    > = ({ signal }) =>
        readValidBeleidsmodulesV01ValidBeleidsmodulesGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidBeleidsmodulesV01ValidBeleidsmodulesGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsmodules in this lineage that are valid
 * @summary Read Valid Beleidsmodule Lineage
 */
export const readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet = (
    lineageId: number,
    params?: ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule[]>({
        url: `/v0.1/valid/beleidsmodules/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetParams
    ) => [
        `/v0.1/valid/beleidsmodules/${lineageId}`,
        ...(params ? [params] : []),
    ]

export type ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet
            >
        >
    >
export type ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsmoduleLineageV01ValidBeleidsmodulesLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsmodule>({
        url: `/v0.1/version/beleidsmodules/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidsmodules/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        objectUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGetQueryKey(
                objectUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet
                >
            >
        > = ({ signal }) =>
            readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet(
                objectUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsmodulesObjectUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!objectUuid,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsprestaties lineages and shows the latests object for each
 * @summary Read Beleidsprestaties
 */
export const readBeleidsprestatiesV01BeleidsprestatiesGet = (
    params?: ReadBeleidsprestatiesV01BeleidsprestatiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsprestatiesV01BeleidsprestatiesGetQueryKey = (
    params?: ReadBeleidsprestatiesV01BeleidsprestatiesGetParams
) => [`/v0.1/beleidsprestaties`, ...(params ? [params] : [])]

export type ReadBeleidsprestatiesV01BeleidsprestatiesGetQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof readBeleidsprestatiesV01BeleidsprestatiesGet>>
    >
export type ReadBeleidsprestatiesV01BeleidsprestatiesGetQueryError =
    HTTPValidationError

export const useReadBeleidsprestatiesV01BeleidsprestatiesGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidsprestatiesV01BeleidsprestatiesGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsprestatiesV01BeleidsprestatiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readBeleidsprestatiesV01BeleidsprestatiesGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsprestatiesV01BeleidsprestatiesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsprestatiesV01BeleidsprestatiesGet>>
    > = ({ signal }) =>
        readBeleidsprestatiesV01BeleidsprestatiesGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readBeleidsprestatiesV01BeleidsprestatiesGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsprestaties lineage
 * @summary Create Beleidsprestatie
 */
export const createBeleidsprestatieV01BeleidsprestatiesPost = (
    beleidsprestatieCreate: BeleidsprestatieCreate
) => {
    return customInstance<Beleidsprestatie>({
        url: `/v0.1/beleidsprestaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatieCreate,
    })
}

export type CreateBeleidsprestatieV01BeleidsprestatiesPostMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof createBeleidsprestatieV01BeleidsprestatiesPost>
        >
    >
export type CreateBeleidsprestatieV01BeleidsprestatiesPostMutationBody =
    BeleidsprestatieCreate
export type CreateBeleidsprestatieV01BeleidsprestatiesPostMutationError =
    HTTPValidationError

export const useCreateBeleidsprestatieV01BeleidsprestatiesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof createBeleidsprestatieV01BeleidsprestatiesPost>
        >,
        TError,
        { data: BeleidsprestatieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof createBeleidsprestatieV01BeleidsprestatiesPost>
        >,
        { data: BeleidsprestatieCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsprestatieV01BeleidsprestatiesPost(data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof createBeleidsprestatieV01BeleidsprestatiesPost>
        >,
        TError,
        { data: BeleidsprestatieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsprestaties versions by lineage
 * @summary Read Beleidsprestatie Lineage
 */
export const readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/beleidsprestaties/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGetQueryKey =
    (lineageId: number) => [`/v0.1/beleidsprestaties/${lineageId}`]

export type ReadBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet
            >
        >
    >
export type ReadBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet(
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidsprestatieLineageV01BeleidsprestatiesLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsprestaties to a lineage
 * @summary Update Beleidsprestatie
 */
export const updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch = (
    lineageId: number,
    beleidsprestatieUpdate: BeleidsprestatieUpdate
) => {
    return customInstance<Beleidsprestatie>({
        url: `/v0.1/beleidsprestaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsprestatieUpdate,
    })
}

export type UpdateBeleidsprestatieV01BeleidsprestatiesLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch
            >
        >
    >
export type UpdateBeleidsprestatieV01BeleidsprestatiesLineageIdPatchMutationBody =
    BeleidsprestatieUpdate
export type UpdateBeleidsprestatieV01BeleidsprestatiesLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsprestatieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch
            >
        >,
        { lineageId: number; data: BeleidsprestatieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch(
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof updateBeleidsprestatieV01BeleidsprestatiesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsprestatieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsprestaties.
 * @summary Changes Beleidsprestaties
 */
export const changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet =
    (oldUuid: string, newUuid: string, signal?: AbortSignal) => {
        return customInstance<unknown>({
            url: `/v0.1/changes/beleidsprestaties/${oldUuid}/${newUuid}`,
            method: 'get',
            signal,
        })
    }

export const getChangesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidsprestaties/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        oldUuid: string,
        newUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getChangesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGetQueryKey(
                oldUuid,
                newUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet
                >
            >
        > = ({ signal }) =>
            changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet(
                oldUuid,
                newUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof changesBeleidsprestatiesV01ChangesBeleidsprestatiesOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!(oldUuid && newUuid),
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsprestaties lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsprestaties
 */
export const readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet = (
    params?: ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsprestatie[]>({
        url: `/v0.1/valid/beleidsprestaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetQueryKey =
    (params?: ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetParams) => [
        `/v0.1/valid/beleidsprestaties`,
        ...(params ? [params] : []),
    ]

export type ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet
            >
        >
    >
export type ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGet = <
    TData = Awaited<
        ReturnType<
            typeof readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet
        >
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsprestatiesV01ValidBeleidsprestatiesGetQueryKey(
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet
            >
        >
    > = ({ signal }) =>
        readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidBeleidsprestatiesV01ValidBeleidsprestatiesGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsprestaties in this lineage that are valid
 * @summary Read Valid Beleidsprestatie Lineage
 */
export const readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet =
    (
        lineageId: number,
        params?: ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetParams,
        signal?: AbortSignal
    ) => {
        return customInstance<Beleidsprestatie[]>({
            url: `/v0.1/valid/beleidsprestaties/${lineageId}`,
            method: 'get',
            params,
            signal,
        })
    }

export const getReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetParams
    ) => [
        `/v0.1/valid/beleidsprestaties/${lineageId}`,
        ...(params ? [params] : []),
    ]

export type ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet
            >
        >
    >
export type ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsprestatieLineageV01ValidBeleidsprestatiesLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet =
    (objectUuid: string, signal?: AbortSignal) => {
        return customInstance<Beleidsprestatie>({
            url: `/v0.1/version/beleidsprestaties/${objectUuid}`,
            method: 'get',
            signal,
        })
    }

export const getReadLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidsprestaties/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        objectUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGetQueryKey(
                objectUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet
                >
            >
        > = ({ signal }) =>
            readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet(
                objectUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsprestatiesObjectUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!objectUuid,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsrelaties lineages and shows the latests object for each
 * @summary Read Beleidsrelaties
 */
export const readBeleidsrelatiesV01BeleidsrelatiesGet = (
    params?: ReadBeleidsrelatiesV01BeleidsrelatiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsrelatiesV01BeleidsrelatiesGetQueryKey = (
    params?: ReadBeleidsrelatiesV01BeleidsrelatiesGetParams
) => [`/v0.1/beleidsrelaties`, ...(params ? [params] : [])]

export type ReadBeleidsrelatiesV01BeleidsrelatiesGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsrelatiesV01BeleidsrelatiesGet>>
>
export type ReadBeleidsrelatiesV01BeleidsrelatiesGetQueryError =
    HTTPValidationError

export const useReadBeleidsrelatiesV01BeleidsrelatiesGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidsrelatiesV01BeleidsrelatiesGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsrelatiesV01BeleidsrelatiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readBeleidsrelatiesV01BeleidsrelatiesGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsrelatiesV01BeleidsrelatiesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsrelatiesV01BeleidsrelatiesGet>>
    > = ({ signal }) => readBeleidsrelatiesV01BeleidsrelatiesGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsrelatiesV01BeleidsrelatiesGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsrelaties lineage
 * @summary Create Beleidsrelatie
 */
export const createBeleidsrelatieV01BeleidsrelatiesPost = (
    beleidsrelatieCreate: BeleidsrelatieCreate
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/beleidsrelaties`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatieCreate,
    })
}

export type CreateBeleidsrelatieV01BeleidsrelatiesPostMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof createBeleidsrelatieV01BeleidsrelatiesPost>>
    >
export type CreateBeleidsrelatieV01BeleidsrelatiesPostMutationBody =
    BeleidsrelatieCreate
export type CreateBeleidsrelatieV01BeleidsrelatiesPostMutationError =
    HTTPValidationError

export const useCreateBeleidsrelatieV01BeleidsrelatiesPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsrelatieV01BeleidsrelatiesPost>>,
        TError,
        { data: BeleidsrelatieCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsrelatieV01BeleidsrelatiesPost>>,
        { data: BeleidsrelatieCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsrelatieV01BeleidsrelatiesPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsrelatieV01BeleidsrelatiesPost>>,
        TError,
        { data: BeleidsrelatieCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsrelaties versions by lineage
 * @summary Read Beleidsrelatie Lineage
 */
export const readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/beleidsrelaties/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGetQueryKey =
    (lineageId: number) => [`/v0.1/beleidsrelaties/${lineageId}`]

export type ReadBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet
            >
        >
    >
export type ReadBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet(
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidsrelatieLineageV01BeleidsrelatiesLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsrelaties to a lineage
 * @summary Update Beleidsrelatie
 */
export const updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch = (
    lineageId: number,
    beleidsrelatieUpdate: BeleidsrelatieUpdate
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/beleidsrelaties/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsrelatieUpdate,
    })
}

export type UpdateBeleidsrelatieV01BeleidsrelatiesLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch
            >
        >
    >
export type UpdateBeleidsrelatieV01BeleidsrelatiesLineageIdPatchMutationBody =
    BeleidsrelatieUpdate
export type UpdateBeleidsrelatieV01BeleidsrelatiesLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsrelatieUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch
            >
        >,
        { lineageId: number; data: BeleidsrelatieUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch(
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof updateBeleidsrelatieV01BeleidsrelatiesLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: BeleidsrelatieUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsrelaties.
 * @summary Changes Beleidsrelaties
 */
export const changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet =
    (oldUuid: string, newUuid: string, signal?: AbortSignal) => {
        return customInstance<unknown>({
            url: `/v0.1/changes/beleidsrelaties/${oldUuid}/${newUuid}`,
            method: 'get',
            signal,
        })
    }

export const getChangesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidsrelaties/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        oldUuid: string,
        newUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getChangesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGetQueryKey(
                oldUuid,
                newUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet
                >
            >
        > = ({ signal }) =>
            changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet(
                oldUuid,
                newUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof changesBeleidsrelatiesV01ChangesBeleidsrelatiesOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!(oldUuid && newUuid),
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsrelaties lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsrelaties
 */
export const readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet = (
    params?: ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie[]>({
        url: `/v0.1/valid/beleidsrelaties`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetQueryKey = (
    params?: ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetParams
) => [`/v0.1/valid/beleidsrelaties`, ...(params ? [params] : [])]

export type ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet
            >
        >
    >
export type ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGet = <
    TData = Awaited<
        ReturnType<typeof readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsrelatiesV01ValidBeleidsrelatiesGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet
            >
        >
    > = ({ signal }) =>
        readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidBeleidsrelatiesV01ValidBeleidsrelatiesGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsrelaties in this lineage that are valid
 * @summary Read Valid Beleidsrelatie Lineage
 */
export const readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet =
    (
        lineageId: number,
        params?: ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetParams,
        signal?: AbortSignal
    ) => {
        return customInstance<Beleidsrelatie[]>({
            url: `/v0.1/valid/beleidsrelaties/${lineageId}`,
            method: 'get',
            params,
            signal,
        })
    }

export const getReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetParams
    ) => [
        `/v0.1/valid/beleidsrelaties/${lineageId}`,
        ...(params ? [params] : []),
    ]

export type ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet
            >
        >
    >
export type ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsrelatieLineageV01ValidBeleidsrelatiesLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsrelatie>({
        url: `/v0.1/version/beleidsrelaties/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidsrelaties/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        objectUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGetQueryKey(
                objectUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet
                >
            >
        > = ({ signal }) =>
            readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet(
                objectUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsrelatiesObjectUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!objectUuid,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the beleidsregels lineages and shows the latests object for each
 * @summary Read Beleidsregels
 */
export const readBeleidsregelsV01BeleidsregelsGet = (
    params?: ReadBeleidsregelsV01BeleidsregelsGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadBeleidsregelsV01BeleidsregelsGetQueryKey = (
    params?: ReadBeleidsregelsV01BeleidsregelsGetParams
) => [`/v0.1/beleidsregels`, ...(params ? [params] : [])]

export type ReadBeleidsregelsV01BeleidsregelsGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readBeleidsregelsV01BeleidsregelsGet>>
>
export type ReadBeleidsregelsV01BeleidsregelsGetQueryError = HTTPValidationError

export const useReadBeleidsregelsV01BeleidsregelsGet = <
    TData = Awaited<ReturnType<typeof readBeleidsregelsV01BeleidsregelsGet>>,
    TError = HTTPValidationError
>(
    params?: ReadBeleidsregelsV01BeleidsregelsGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readBeleidsregelsV01BeleidsregelsGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsregelsV01BeleidsregelsGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readBeleidsregelsV01BeleidsregelsGet>>
    > = ({ signal }) => readBeleidsregelsV01BeleidsregelsGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readBeleidsregelsV01BeleidsregelsGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new beleidsregels lineage
 * @summary Create Beleidsregel
 */
export const createBeleidsregelV01BeleidsregelsPost = (
    beleidsregelCreate: BeleidsregelCreate
) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/beleidsregels`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelCreate,
    })
}

export type CreateBeleidsregelV01BeleidsregelsPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBeleidsregelV01BeleidsregelsPost>>
>
export type CreateBeleidsregelV01BeleidsregelsPostMutationBody =
    BeleidsregelCreate
export type CreateBeleidsregelV01BeleidsregelsPostMutationError =
    HTTPValidationError

export const useCreateBeleidsregelV01BeleidsregelsPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBeleidsregelV01BeleidsregelsPost>>,
        TError,
        { data: BeleidsregelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBeleidsregelV01BeleidsregelsPost>>,
        { data: BeleidsregelCreate }
    > = props => {
        const { data } = props ?? {}

        return createBeleidsregelV01BeleidsregelsPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createBeleidsregelV01BeleidsregelsPost>>,
        TError,
        { data: BeleidsregelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the beleidsregels versions by lineage
 * @summary Read Beleidsregel Lineage
 */
export const readBeleidsregelLineageV01BeleidsregelsLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/beleidsregels/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadBeleidsregelLineageV01BeleidsregelsLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/beleidsregels/${lineageId}`]

export type ReadBeleidsregelLineageV01BeleidsregelsLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readBeleidsregelLineageV01BeleidsregelsLineageIdGet
            >
        >
    >
export type ReadBeleidsregelLineageV01BeleidsregelsLineageIdGetQueryError =
    HTTPValidationError

export const useReadBeleidsregelLineageV01BeleidsregelsLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readBeleidsregelLineageV01BeleidsregelsLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readBeleidsregelLineageV01BeleidsregelsLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadBeleidsregelLineageV01BeleidsregelsLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readBeleidsregelLineageV01BeleidsregelsLineageIdGet
            >
        >
    > = ({ signal }) =>
        readBeleidsregelLineageV01BeleidsregelsLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readBeleidsregelLineageV01BeleidsregelsLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new beleidsregels to a lineage
 * @summary Update Beleidsregel
 */
export const updateBeleidsregelV01BeleidsregelsLineageIdPatch = (
    lineageId: number,
    beleidsregelUpdate: BeleidsregelUpdate
) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/beleidsregels/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelUpdate,
    })
}

export type UpdateBeleidsregelV01BeleidsregelsLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof updateBeleidsregelV01BeleidsregelsLineageIdPatch>
        >
    >
export type UpdateBeleidsregelV01BeleidsregelsLineageIdPatchMutationBody =
    BeleidsregelUpdate
export type UpdateBeleidsregelV01BeleidsregelsLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateBeleidsregelV01BeleidsregelsLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof updateBeleidsregelV01BeleidsregelsLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidsregelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof updateBeleidsregelV01BeleidsregelsLineageIdPatch>
        >,
        { lineageId: number; data: BeleidsregelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateBeleidsregelV01BeleidsregelsLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof updateBeleidsregelV01BeleidsregelsLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: BeleidsregelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of beleidsregels.
 * @summary Changes Beleidsregels
 */
export const changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/beleidsregels/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/beleidsregels/${oldUuid}/${newUuid}`,
    ]

export type ChangesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet
            >
        >
    >
export type ChangesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesBeleidsregelsV01ChangesBeleidsregelsOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsregels lineages and shows the latests valid object for each.
 * @summary Read Valid Beleidsregels
 */
export const readValidBeleidsregelsV01ValidBeleidsregelsGet = (
    params?: ReadValidBeleidsregelsV01ValidBeleidsregelsGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/valid/beleidsregels`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsregelsV01ValidBeleidsregelsGetQueryKey = (
    params?: ReadValidBeleidsregelsV01ValidBeleidsregelsGetParams
) => [`/v0.1/valid/beleidsregels`, ...(params ? [params] : [])]

export type ReadValidBeleidsregelsV01ValidBeleidsregelsGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readValidBeleidsregelsV01ValidBeleidsregelsGet>
        >
    >
export type ReadValidBeleidsregelsV01ValidBeleidsregelsGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsregelsV01ValidBeleidsregelsGet = <
    TData = Awaited<
        ReturnType<typeof readValidBeleidsregelsV01ValidBeleidsregelsGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidBeleidsregelsV01ValidBeleidsregelsGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsregelsV01ValidBeleidsregelsGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidBeleidsregelsV01ValidBeleidsregelsGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readValidBeleidsregelsV01ValidBeleidsregelsGet>
        >
    > = ({ signal }) =>
        readValidBeleidsregelsV01ValidBeleidsregelsGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidBeleidsregelsV01ValidBeleidsregelsGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the beleidsregels in this lineage that are valid
 * @summary Read Valid Beleidsregel Lineage
 */
export const readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet = (
    lineageId: number,
    params?: ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel[]>({
        url: `/v0.1/valid/beleidsregels/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetParams
    ) => [`/v0.1/valid/beleidsregels/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet
            >
        >
    >
export type ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidBeleidsregelLineageV01ValidBeleidsregelsLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Beleidsregel>({
        url: `/v0.1/version/beleidsregels/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionBeleidsregelsObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/beleidsregels/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionBeleidsregelsObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionBeleidsregelsObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionBeleidsregelsObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionBeleidsregelsObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Get the latest edits for every lineage,
active for 'Beleidskeuzes' & 'Maatregelen'
 * @summary Edits
 */
export const editsV01EditsGet = (signal?: AbortSignal) => {
    return customInstance<LatestVersionInline[]>({
        url: `/v0.1/edits`,
        method: 'get',
        signal,
    })
}

export const getEditsV01EditsGetQueryKey = () => [`/v0.1/edits`]

export type EditsV01EditsGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof editsV01EditsGet>>
>
export type EditsV01EditsGetQueryError = unknown

export const useEditsV01EditsGet = <
    TData = Awaited<ReturnType<typeof editsV01EditsGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof editsV01EditsGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getEditsV01EditsGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof editsV01EditsGet>>
    > = ({ signal }) => editsV01EditsGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof editsV01EditsGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Fetch graph representations on relationships of generic models
 * @summary Graph
 */
export const graphV01GraphGet = (signal?: AbortSignal) => {
    return customInstance<GraphView>({
        url: `/v0.1/graph`,
        method: 'get',
        signal,
    })
}

export const getGraphV01GraphGetQueryKey = () => [`/v0.1/graph`]

export type GraphV01GraphGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof graphV01GraphGet>>
>
export type GraphV01GraphGetQueryError = unknown

export const useGraphV01GraphGet = <
    TData = Awaited<ReturnType<typeof graphV01GraphGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof graphV01GraphGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGraphV01GraphGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof graphV01GraphGet>>
    > = ({ signal }) => graphV01GraphGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof graphV01GraphGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * List the users of this application
 * @summary Gebruikers
 */
export const gebruikersV01GebruikersGet = (signal?: AbortSignal) => {
    return customInstance<Gebruiker[]>({
        url: `/v0.1/gebruikers`,
        method: 'get',
        signal,
    })
}

export const getGebruikersV01GebruikersGetQueryKey = () => [`/v0.1/gebruikers`]

export type GebruikersV01GebruikersGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebruikersV01GebruikersGet>>
>
export type GebruikersV01GebruikersGetQueryError = unknown

export const useGebruikersV01GebruikersGet = <
    TData = Awaited<ReturnType<typeof gebruikersV01GebruikersGet>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        Awaited<ReturnType<typeof gebruikersV01GebruikersGet>>,
        TError,
        TData
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGebruikersV01GebruikersGetQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebruikersV01GebruikersGet>>
    > = ({ signal }) => gebruikersV01GebruikersGet(signal)

    const query = useQuery<
        Awaited<ReturnType<typeof gebruikersV01GebruikersGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Fetches items matching the search query parameters
 * @summary Search
 */
export const searchV01SearchGet = (
    params: SearchV01SearchGetParams,
    signal?: AbortSignal
) => {
    return customInstance<SearchResultWrapper>({
        url: `/v0.1/search`,
        method: 'get',
        params,
        signal,
    })
}

export const getSearchV01SearchGetQueryKey = (
    params: SearchV01SearchGetParams
) => [`/v0.1/search`, ...(params ? [params] : [])]

export type SearchV01SearchGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchV01SearchGet>>
>
export type SearchV01SearchGetQueryError = HTTPValidationError

export const useSearchV01SearchGet = <
    TData = Awaited<ReturnType<typeof searchV01SearchGet>>,
    TError = HTTPValidationError
>(
    params: SearchV01SearchGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof searchV01SearchGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getSearchV01SearchGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof searchV01SearchGet>>
    > = ({ signal }) => searchV01SearchGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof searchV01SearchGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Lookup geo-searchable entities related to a 'Werkingsgebied'
 * @summary Geo Search
 */
export const geoSearchV01GeoSearchGet = (
    params: GeoSearchV01GeoSearchGetParams,
    signal?: AbortSignal
) => {
    return customInstance<SearchResultWrapper>({
        url: `/v0.1/geo-search`,
        method: 'get',
        params,
        signal,
    })
}

export const getGeoSearchV01GeoSearchGetQueryKey = (
    params: GeoSearchV01GeoSearchGetParams
) => [`/v0.1/geo-search`, ...(params ? [params] : [])]

export type GeoSearchV01GeoSearchGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof geoSearchV01GeoSearchGet>>
>
export type GeoSearchV01GeoSearchGetQueryError = HTTPValidationError

export const useGeoSearchV01GeoSearchGet = <
    TData = Awaited<ReturnType<typeof geoSearchV01GeoSearchGet>>,
    TError = HTTPValidationError
>(
    params: GeoSearchV01GeoSearchGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof geoSearchV01GeoSearchGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGeoSearchV01GeoSearchGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof geoSearchV01GeoSearchGet>>
    > = ({ signal }) => geoSearchV01GeoSearchGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof geoSearchV01GeoSearchGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas lineages and shows the latests object for each
 * @summary Read Themas
 */
export const readThemasV01ThemasGet = (
    params?: ReadThemasV01ThemasGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadThemasV01ThemasGetQueryKey = (
    params?: ReadThemasV01ThemasGetParams
) => [`/v0.1/themas`, ...(params ? [params] : [])]

export type ReadThemasV01ThemasGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readThemasV01ThemasGet>>
>
export type ReadThemasV01ThemasGetQueryError = HTTPValidationError

export const useReadThemasV01ThemasGet = <
    TData = Awaited<ReturnType<typeof readThemasV01ThemasGet>>,
    TError = HTTPValidationError
>(
    params?: ReadThemasV01ThemasGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readThemasV01ThemasGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getReadThemasV01ThemasGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readThemasV01ThemasGet>>
    > = ({ signal }) => readThemasV01ThemasGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readThemasV01ThemasGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new themas lineage
 * @summary Create Thema
 */
export const createThemaV01ThemasPost = (themaCreate: ThemaCreate) => {
    return customInstance<Thema>({
        url: `/v0.1/themas`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: themaCreate,
    })
}

export type CreateThemaV01ThemasPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createThemaV01ThemasPost>>
>
export type CreateThemaV01ThemasPostMutationBody = ThemaCreate
export type CreateThemaV01ThemasPostMutationError = HTTPValidationError

export const useCreateThemaV01ThemasPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createThemaV01ThemasPost>>,
        TError,
        { data: ThemaCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createThemaV01ThemasPost>>,
        { data: ThemaCreate }
    > = props => {
        const { data } = props ?? {}

        return createThemaV01ThemasPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createThemaV01ThemasPost>>,
        TError,
        { data: ThemaCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the themas versions by lineage
 * @summary Read Thema Lineage
 */
export const readThemaLineageV01ThemasLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/themas/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadThemaLineageV01ThemasLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/themas/${lineageId}`]

export type ReadThemaLineageV01ThemasLineageIdGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readThemaLineageV01ThemasLineageIdGet>>
>
export type ReadThemaLineageV01ThemasLineageIdGetQueryError =
    HTTPValidationError

export const useReadThemaLineageV01ThemasLineageIdGet = <
    TData = Awaited<ReturnType<typeof readThemaLineageV01ThemasLineageIdGet>>,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readThemaLineageV01ThemasLineageIdGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadThemaLineageV01ThemasLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readThemaLineageV01ThemasLineageIdGet>>
    > = ({ signal }) => readThemaLineageV01ThemasLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readThemaLineageV01ThemasLineageIdGet>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new themas to a lineage
 * @summary Update Thema
 */
export const updateThemaV01ThemasLineageIdPatch = (
    lineageId: number,
    themaUpdate: ThemaUpdate
) => {
    return customInstance<Thema>({
        url: `/v0.1/themas/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: themaUpdate,
    })
}

export type UpdateThemaV01ThemasLineageIdPatchMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateThemaV01ThemasLineageIdPatch>>
>
export type UpdateThemaV01ThemasLineageIdPatchMutationBody = ThemaUpdate
export type UpdateThemaV01ThemasLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateThemaV01ThemasLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateThemaV01ThemasLineageIdPatch>>,
        TError,
        { lineageId: number; data: ThemaUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateThemaV01ThemasLineageIdPatch>>,
        { lineageId: number; data: ThemaUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateThemaV01ThemasLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateThemaV01ThemasLineageIdPatch>>,
        TError,
        { lineageId: number; data: ThemaUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of themas.
 * @summary Changes Themas
 */
export const changesThemasV01ChangesThemasOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/themas/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesThemasV01ChangesThemasOldUuidNewUuidGetQueryKey = (
    oldUuid: string,
    newUuid: string
) => [`/v0.1/changes/themas/${oldUuid}/${newUuid}`]

export type ChangesThemasV01ChangesThemasOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof changesThemasV01ChangesThemasOldUuidNewUuidGet>
        >
    >
export type ChangesThemasV01ChangesThemasOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesThemasV01ChangesThemasOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<typeof changesThemasV01ChangesThemasOldUuidNewUuidGet>
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesThemasV01ChangesThemasOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesThemasV01ChangesThemasOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof changesThemasV01ChangesThemasOldUuidNewUuidGet>
        >
    > = ({ signal }) =>
        changesThemasV01ChangesThemasOldUuidNewUuidGet(oldUuid, newUuid, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof changesThemasV01ChangesThemasOldUuidNewUuidGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas lineages and shows the latests valid object for each.
 * @summary Read Valid Themas
 */
export const readValidThemasV01ValidThemasGet = (
    params?: ReadValidThemasV01ValidThemasGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/valid/themas`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidThemasV01ValidThemasGetQueryKey = (
    params?: ReadValidThemasV01ValidThemasGetParams
) => [`/v0.1/valid/themas`, ...(params ? [params] : [])]

export type ReadValidThemasV01ValidThemasGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidThemasV01ValidThemasGet>>
>
export type ReadValidThemasV01ValidThemasGetQueryError = HTTPValidationError

export const useReadValidThemasV01ValidThemasGet = <
    TData = Awaited<ReturnType<typeof readValidThemasV01ValidThemasGet>>,
    TError = HTTPValidationError
>(
    params?: ReadValidThemasV01ValidThemasGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readValidThemasV01ValidThemasGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidThemasV01ValidThemasGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidThemasV01ValidThemasGet>>
    > = ({ signal }) => readValidThemasV01ValidThemasGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidThemasV01ValidThemasGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the themas in this lineage that are valid
 * @summary Read Valid Thema Lineage
 */
export const readValidThemaLineageV01ValidThemasLineageIdGet = (
    lineageId: number,
    params?: ReadValidThemaLineageV01ValidThemasLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Thema[]>({
        url: `/v0.1/valid/themas/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidThemaLineageV01ValidThemasLineageIdGetQueryKey = (
    lineageId: number,
    params?: ReadValidThemaLineageV01ValidThemasLineageIdGetParams
) => [`/v0.1/valid/themas/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidThemaLineageV01ValidThemasLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readValidThemaLineageV01ValidThemasLineageIdGet>
        >
    >
export type ReadValidThemaLineageV01ValidThemasLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidThemaLineageV01ValidThemasLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readValidThemaLineageV01ValidThemasLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidThemaLineageV01ValidThemasLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidThemaLineageV01ValidThemasLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidThemaLineageV01ValidThemasLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readValidThemaLineageV01ValidThemasLineageIdGet>
        >
    > = ({ signal }) =>
        readValidThemaLineageV01ValidThemasLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidThemaLineageV01ValidThemasLineageIdGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionThemasObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Thema>({
        url: `/v0.1/version/themas/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionThemasObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/themas/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionThemasObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionThemasObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionThemasObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionThemasObjectUuidGet = <
    TData = Awaited<
        ReturnType<typeof readLatestVersionLineageV01VersionThemasObjectUuidGet>
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionThemasObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionThemasObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionThemasObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionThemasObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionThemasObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordening lineages and shows the latests object for each
 * @summary Read Verordening
 */
export const readVerordeningV01VerordeningenGet = (
    params?: ReadVerordeningV01VerordeningenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadVerordeningV01VerordeningenGetQueryKey = (
    params?: ReadVerordeningV01VerordeningenGetParams
) => [`/v0.1/verordeningen`, ...(params ? [params] : [])]

export type ReadVerordeningV01VerordeningenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readVerordeningV01VerordeningenGet>>
>
export type ReadVerordeningV01VerordeningenGetQueryError = HTTPValidationError

export const useReadVerordeningV01VerordeningenGet = <
    TData = Awaited<ReturnType<typeof readVerordeningV01VerordeningenGet>>,
    TError = HTTPValidationError
>(
    params?: ReadVerordeningV01VerordeningenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readVerordeningV01VerordeningenGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadVerordeningV01VerordeningenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readVerordeningV01VerordeningenGet>>
    > = ({ signal }) => readVerordeningV01VerordeningenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readVerordeningV01VerordeningenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new verordening lineage
 * @summary Create Verordening
 */
export const createVerordeningV01VerordeningenPost = (
    verordeningCreate: VerordeningCreate
) => {
    return customInstance<Verordening>({
        url: `/v0.1/verordeningen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningCreate,
    })
}

export type CreateVerordeningV01VerordeningenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createVerordeningV01VerordeningenPost>>
>
export type CreateVerordeningV01VerordeningenPostMutationBody =
    VerordeningCreate
export type CreateVerordeningV01VerordeningenPostMutationError =
    HTTPValidationError

export const useCreateVerordeningV01VerordeningenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createVerordeningV01VerordeningenPost>>,
        TError,
        { data: VerordeningCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createVerordeningV01VerordeningenPost>>,
        { data: VerordeningCreate }
    > = props => {
        const { data } = props ?? {}

        return createVerordeningV01VerordeningenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createVerordeningV01VerordeningenPost>>,
        TError,
        { data: VerordeningCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the verordening versions by lineage
 * @summary Read Verordening Lineage
 */
export const readVerordeningLineageV01VerordeningenLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/verordeningen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadVerordeningLineageV01VerordeningenLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/verordeningen/${lineageId}`]

export type ReadVerordeningLineageV01VerordeningenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readVerordeningLineageV01VerordeningenLineageIdGet
            >
        >
    >
export type ReadVerordeningLineageV01VerordeningenLineageIdGetQueryError =
    HTTPValidationError

export const useReadVerordeningLineageV01VerordeningenLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readVerordeningLineageV01VerordeningenLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readVerordeningLineageV01VerordeningenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadVerordeningLineageV01VerordeningenLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readVerordeningLineageV01VerordeningenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readVerordeningLineageV01VerordeningenLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readVerordeningLineageV01VerordeningenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new verordening to a lineage
 * @summary Update Verordening
 */
export const updateVerordeningV01VerordeningenLineageIdPatch = (
    lineageId: number,
    verordeningUpdate: VerordeningUpdate
) => {
    return customInstance<Verordening>({
        url: `/v0.1/verordeningen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: verordeningUpdate,
    })
}

export type UpdateVerordeningV01VerordeningenLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof updateVerordeningV01VerordeningenLineageIdPatch>
        >
    >
export type UpdateVerordeningV01VerordeningenLineageIdPatchMutationBody =
    VerordeningUpdate
export type UpdateVerordeningV01VerordeningenLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateVerordeningV01VerordeningenLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof updateVerordeningV01VerordeningenLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: VerordeningUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof updateVerordeningV01VerordeningenLineageIdPatch>
        >,
        { lineageId: number; data: VerordeningUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateVerordeningV01VerordeningenLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<
            ReturnType<typeof updateVerordeningV01VerordeningenLineageIdPatch>
        >,
        TError,
        { lineageId: number; data: VerordeningUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of verordening.
 * @summary Changes Verordening
 */
export const changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/verordeningen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesVerordeningV01ChangesVerordeningenOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/verordeningen/${oldUuid}/${newUuid}`,
    ]

export type ChangesVerordeningV01ChangesVerordeningenOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet
            >
        >
    >
export type ChangesVerordeningV01ChangesVerordeningenOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesVerordeningV01ChangesVerordeningenOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesVerordeningV01ChangesVerordeningenOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordening lineages and shows the latests valid object for each.
 * @summary Read Valid Verordening
 */
export const readValidVerordeningV01ValidVerordeningenGet = (
    params?: ReadValidVerordeningV01ValidVerordeningenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/valid/verordeningen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningV01ValidVerordeningenGetQueryKey = (
    params?: ReadValidVerordeningV01ValidVerordeningenGetParams
) => [`/v0.1/valid/verordeningen`, ...(params ? [params] : [])]

export type ReadValidVerordeningV01ValidVerordeningenGetQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof readValidVerordeningV01ValidVerordeningenGet>>
    >
export type ReadValidVerordeningV01ValidVerordeningenGetQueryError =
    HTTPValidationError

export const useReadValidVerordeningV01ValidVerordeningenGet = <
    TData = Awaited<
        ReturnType<typeof readValidVerordeningV01ValidVerordeningenGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidVerordeningV01ValidVerordeningenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readValidVerordeningV01ValidVerordeningenGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidVerordeningV01ValidVerordeningenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidVerordeningV01ValidVerordeningenGet>>
    > = ({ signal }) =>
        readValidVerordeningV01ValidVerordeningenGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readValidVerordeningV01ValidVerordeningenGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the verordeningen in this lineage that are valid
 * @summary Read Valid Verordening Lineage
 */
export const readValidVerordeningLineageV01ValidVerordeningenLineageIdGet = (
    lineageId: number,
    params?: ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Verordening[]>({
        url: `/v0.1/valid/verordeningen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetParams
    ) => [`/v0.1/valid/verordeningen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidVerordeningLineageV01ValidVerordeningenLineageIdGet
            >
        >
    >
export type ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidVerordeningLineageV01ValidVerordeningenLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readValidVerordeningLineageV01ValidVerordeningenLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidVerordeningLineageV01ValidVerordeningenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidVerordeningLineageV01ValidVerordeningenLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidVerordeningLineageV01ValidVerordeningenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readValidVerordeningLineageV01ValidVerordeningenLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidVerordeningLineageV01ValidVerordeningenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionVerordeningenObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Verordening>({
        url: `/v0.1/version/verordeningen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionVerordeningenObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/verordeningen/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionVerordeningenObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionVerordeningenObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionVerordeningenObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionVerordeningenObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionVerordeningenObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionVerordeningenObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionVerordeningenObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionVerordeningenObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionVerordeningenObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionVerordeningenObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen lineages and shows the latests object for each
 * @summary Read Maatregelen
 */
export const readMaatregelenV01MaatregelenGet = (
    params?: ReadMaatregelenV01MaatregelenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelListable[]>({
        url: `/v0.1/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadMaatregelenV01MaatregelenGetQueryKey = (
    params?: ReadMaatregelenV01MaatregelenGetParams
) => [`/v0.1/maatregelen`, ...(params ? [params] : [])]

export type ReadMaatregelenV01MaatregelenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readMaatregelenV01MaatregelenGet>>
>
export type ReadMaatregelenV01MaatregelenGetQueryError = HTTPValidationError

export const useReadMaatregelenV01MaatregelenGet = <
    TData = Awaited<ReturnType<typeof readMaatregelenV01MaatregelenGet>>,
    TError = HTTPValidationError
>(
    params?: ReadMaatregelenV01MaatregelenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof readMaatregelenV01MaatregelenGet>>,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadMaatregelenV01MaatregelenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readMaatregelenV01MaatregelenGet>>
    > = ({ signal }) => readMaatregelenV01MaatregelenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readMaatregelenV01MaatregelenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new maatregelen lineage
 * @summary Create Maatregel
 */
export const createMaatregelV01MaatregelenPost = (
    maatregelCreate: MaatregelCreate
) => {
    return customInstance<Maatregel>({
        url: `/v0.1/maatregelen`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelCreate,
    })
}

export type CreateMaatregelV01MaatregelenPostMutationResult = NonNullable<
    Awaited<ReturnType<typeof createMaatregelV01MaatregelenPost>>
>
export type CreateMaatregelV01MaatregelenPostMutationBody = MaatregelCreate
export type CreateMaatregelV01MaatregelenPostMutationError = HTTPValidationError

export const useCreateMaatregelV01MaatregelenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createMaatregelV01MaatregelenPost>>,
        TError,
        { data: MaatregelCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createMaatregelV01MaatregelenPost>>,
        { data: MaatregelCreate }
    > = props => {
        const { data } = props ?? {}

        return createMaatregelV01MaatregelenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createMaatregelV01MaatregelenPost>>,
        TError,
        { data: MaatregelCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the maatregel versions by lineage
 * @summary Read Maatregel Lineage
 */
export const readMaatregelLineageV01MaatregelenLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel[]>({
        url: `/v0.1/maatregelen/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadMaatregelLineageV01MaatregelenLineageIdGetQueryKey = (
    lineageId: number
) => [`/v0.1/maatregelen/${lineageId}`]

export type ReadMaatregelLineageV01MaatregelenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof readMaatregelLineageV01MaatregelenLineageIdGet>
        >
    >
export type ReadMaatregelLineageV01MaatregelenLineageIdGetQueryError =
    HTTPValidationError

export const useReadMaatregelLineageV01MaatregelenLineageIdGet = <
    TData = Awaited<
        ReturnType<typeof readMaatregelLineageV01MaatregelenLineageIdGet>
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readMaatregelLineageV01MaatregelenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadMaatregelLineageV01MaatregelenLineageIdGetQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof readMaatregelLineageV01MaatregelenLineageIdGet>
        >
    > = ({ signal }) =>
        readMaatregelLineageV01MaatregelenLineageIdGet(lineageId, signal)

    const query = useQuery<
        Awaited<
            ReturnType<typeof readMaatregelLineageV01MaatregelenLineageIdGet>
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new maatregelen to a lineage
 * @summary Update Maatregel
 */
export const updateMaatregelV01MaatregelenLineageIdPatch = (
    lineageId: number,
    maatregelUpdate: MaatregelUpdate
) => {
    return customInstance<Maatregel>({
        url: `/v0.1/maatregelen/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelUpdate,
    })
}

export type UpdateMaatregelV01MaatregelenLineageIdPatchMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof updateMaatregelV01MaatregelenLineageIdPatch>>
    >
export type UpdateMaatregelV01MaatregelenLineageIdPatchMutationBody =
    MaatregelUpdate
export type UpdateMaatregelV01MaatregelenLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateMaatregelV01MaatregelenLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateMaatregelV01MaatregelenLineageIdPatch>>,
        TError,
        { lineageId: number; data: MaatregelUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateMaatregelV01MaatregelenLineageIdPatch>>,
        { lineageId: number; data: MaatregelUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateMaatregelV01MaatregelenLineageIdPatch(lineageId, data)
    }

    return useMutation<
        Awaited<ReturnType<typeof updateMaatregelV01MaatregelenLineageIdPatch>>,
        TError,
        { lineageId: number; data: MaatregelUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of maatregelen.
 * @summary Changes Maatregelen
 */
export const changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet = (
    oldUuid: string,
    newUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/v0.1/changes/maatregelen/${oldUuid}/${newUuid}`,
        method: 'get',
        signal,
    })
}

export const getChangesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/maatregelen/${oldUuid}/${newUuid}`,
    ]

export type ChangesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet
            >
        >
    >
export type ChangesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    oldUuid: string,
    newUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getChangesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGetQueryKey(
            oldUuid,
            newUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet
            >
        >
    > = ({ signal }) =>
        changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet(
            oldUuid,
            newUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof changesMaatregelenV01ChangesMaatregelenOldUuidNewUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(oldUuid && newUuid),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen lineages and shows the latests valid object for each.
 * @summary Read Valid Maatregelen
 */
export const readValidMaatregelenV01ValidMaatregelenGet = (
    params?: ReadValidMaatregelenV01ValidMaatregelenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelListable[]>({
        url: `/v0.1/valid/maatregelen`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidMaatregelenV01ValidMaatregelenGetQueryKey = (
    params?: ReadValidMaatregelenV01ValidMaatregelenGetParams
) => [`/v0.1/valid/maatregelen`, ...(params ? [params] : [])]

export type ReadValidMaatregelenV01ValidMaatregelenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readValidMaatregelenV01ValidMaatregelenGet>>
>
export type ReadValidMaatregelenV01ValidMaatregelenGetQueryError =
    HTTPValidationError

export const useReadValidMaatregelenV01ValidMaatregelenGet = <
    TData = Awaited<
        ReturnType<typeof readValidMaatregelenV01ValidMaatregelenGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidMaatregelenV01ValidMaatregelenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readValidMaatregelenV01ValidMaatregelenGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidMaatregelenV01ValidMaatregelenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readValidMaatregelenV01ValidMaatregelenGet>>
    > = ({ signal }) =>
        readValidMaatregelenV01ValidMaatregelenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readValidMaatregelenV01ValidMaatregelenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the maatregelen in this lineage that are valid
 * @summary Read Valid Maatregel Lineage
 */
export const readValidMaatregelLineageV01ValidMaatregelenLineageIdGet = (
    lineageId: number,
    params?: ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel[]>({
        url: `/v0.1/valid/maatregelen/${lineageId}`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetParams
    ) => [`/v0.1/valid/maatregelen/${lineageId}`, ...(params ? [params] : [])]

export type ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidMaatregelLineageV01ValidMaatregelenLineageIdGet
            >
        >
    >
export type ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidMaatregelLineageV01ValidMaatregelenLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readValidMaatregelLineageV01ValidMaatregelenLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    params?: ReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidMaatregelLineageV01ValidMaatregelenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidMaatregelLineageV01ValidMaatregelenLineageIdGetQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidMaatregelLineageV01ValidMaatregelenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readValidMaatregelLineageV01ValidMaatregelenLineageIdGet(
            lineageId,
            params,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidMaatregelLineageV01ValidMaatregelenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionMaatregelenObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Maatregel>({
        url: `/v0.1/version/maatregelen/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionMaatregelenObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/maatregelen/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionMaatregelenObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionMaatregelenObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionMaatregelenObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionMaatregelenObjectUuidGet = <
    TData = Awaited<
        ReturnType<
            typeof readLatestVersionLineageV01VersionMaatregelenObjectUuidGet
        >
    >,
    TError = HTTPValidationError
>(
    objectUuid: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionMaatregelenObjectUuidGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadLatestVersionLineageV01VersionMaatregelenObjectUuidGetQueryKey(
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionMaatregelenObjectUuidGet
            >
        >
    > = ({ signal }) =>
        readLatestVersionLineageV01VersionMaatregelenObjectUuidGet(
            objectUuid,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionMaatregelenObjectUuidGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!objectUuid,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the werkingsgebied lineages and shows the latests object for each
 * @summary Read Werkingsgebied
 */
export const readWerkingsgebiedV01WerkingsgebiedenGet = (
    params?: ReadWerkingsgebiedV01WerkingsgebiedenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadWerkingsgebiedV01WerkingsgebiedenGetQueryKey = (
    params?: ReadWerkingsgebiedV01WerkingsgebiedenGetParams
) => [`/v0.1/werkingsgebieden`, ...(params ? [params] : [])]

export type ReadWerkingsgebiedV01WerkingsgebiedenGetQueryResult = NonNullable<
    Awaited<ReturnType<typeof readWerkingsgebiedV01WerkingsgebiedenGet>>
>
export type ReadWerkingsgebiedV01WerkingsgebiedenGetQueryError =
    HTTPValidationError

export const useReadWerkingsgebiedV01WerkingsgebiedenGet = <
    TData = Awaited<
        ReturnType<typeof readWerkingsgebiedV01WerkingsgebiedenGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadWerkingsgebiedV01WerkingsgebiedenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof readWerkingsgebiedV01WerkingsgebiedenGet>
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadWerkingsgebiedV01WerkingsgebiedenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof readWerkingsgebiedV01WerkingsgebiedenGet>>
    > = ({ signal }) => readWerkingsgebiedV01WerkingsgebiedenGet(params, signal)

    const query = useQuery<
        Awaited<ReturnType<typeof readWerkingsgebiedV01WerkingsgebiedenGet>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Creates a new werkingsgebied lineage
 * @summary Create Werkingsgebied
 */
export const createWerkingsgebiedV01WerkingsgebiedenPost = (
    werkingsgebiedCreate: WerkingsgebiedCreate
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/werkingsgebieden`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedCreate,
    })
}

export type CreateWerkingsgebiedV01WerkingsgebiedenPostMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof createWerkingsgebiedV01WerkingsgebiedenPost>>
    >
export type CreateWerkingsgebiedV01WerkingsgebiedenPostMutationBody =
    WerkingsgebiedCreate
export type CreateWerkingsgebiedV01WerkingsgebiedenPostMutationError =
    HTTPValidationError

export const useCreateWerkingsgebiedV01WerkingsgebiedenPost = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createWerkingsgebiedV01WerkingsgebiedenPost>>,
        TError,
        { data: WerkingsgebiedCreate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createWerkingsgebiedV01WerkingsgebiedenPost>>,
        { data: WerkingsgebiedCreate }
    > = props => {
        const { data } = props ?? {}

        return createWerkingsgebiedV01WerkingsgebiedenPost(data)
    }

    return useMutation<
        Awaited<ReturnType<typeof createWerkingsgebiedV01WerkingsgebiedenPost>>,
        TError,
        { data: WerkingsgebiedCreate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Gets all the werkingsgebied versions by lineage
 * @summary Read Werkingsgebied Lineage
 */
export const readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/werkingsgebieden/${lineageId}`,
        method: 'get',
        signal,
    })
}

export const getReadWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGetQueryKey =
    (lineageId: number) => [`/v0.1/werkingsgebieden/${lineageId}`]

export type ReadWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet
            >
        >
    >
export type ReadWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGetQueryError =
    HTTPValidationError

export const useReadWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet = <
    TData = Awaited<
        ReturnType<
            typeof readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet
        >
    >,
    TError = HTTPValidationError
>(
    lineageId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGetQueryKey(
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet
            >
        >
    > = ({ signal }) =>
        readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet(
            lineageId,
            signal
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readWerkingsgebiedLineageV01WerkingsgebiedenLineageIdGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!lineageId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryKey

    return query
}

/**
 * Adds a new werkingsgebied to a lineage
 * @summary Update Werkingsgebied
 */
export const updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch = (
    lineageId: number,
    werkingsgebiedUpdate: WerkingsgebiedUpdate
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/werkingsgebieden/${lineageId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedUpdate,
    })
}

export type UpdateWerkingsgebiedV01WerkingsgebiedenLineageIdPatchMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch
            >
        >
    >
export type UpdateWerkingsgebiedV01WerkingsgebiedenLineageIdPatchMutationBody =
    WerkingsgebiedUpdate
export type UpdateWerkingsgebiedV01WerkingsgebiedenLineageIdPatchMutationError =
    HTTPValidationError

export const useUpdateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch = <
    TError = HTTPValidationError,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: WerkingsgebiedUpdate },
        TContext
    >
}) => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch
            >
        >,
        { lineageId: number; data: WerkingsgebiedUpdate }
    > = props => {
        const { lineageId, data } = props ?? {}

        return updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch(
            lineageId,
            data
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof updateWerkingsgebiedV01WerkingsgebiedenLineageIdPatch
            >
        >,
        TError,
        { lineageId: number; data: WerkingsgebiedUpdate },
        TContext
    >(mutationFn, mutationOptions)
}

/**
 * Shows the changes between two versions of werkingsgebied.
 * @summary Changes Werkingsgebied
 */
export const changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet =
    (oldUuid: string, newUuid: string, signal?: AbortSignal) => {
        return customInstance<unknown>({
            url: `/v0.1/changes/werkingsgebieden/${oldUuid}/${newUuid}`,
            method: 'get',
            signal,
        })
    }

export const getChangesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGetQueryKey =
    (oldUuid: string, newUuid: string) => [
        `/v0.1/changes/werkingsgebieden/${oldUuid}/${newUuid}`,
    ]

export type ChangesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet
            >
        >
    >
export type ChangesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGetQueryError =
    HTTPValidationError

export const useChangesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        oldUuid: string,
        newUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getChangesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGetQueryKey(
                oldUuid,
                newUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet
                >
            >
        > = ({ signal }) =>
            changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet(
                oldUuid,
                newUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof changesWerkingsgebiedV01ChangesWerkingsgebiedenOldUuidNewUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!(oldUuid && newUuid),
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Gets all the werkingsgebied lineages and shows the latests valid object for each.
 * @summary Read Valid Werkingsgebied
 */
export const readValidWerkingsgebiedV01ValidWerkingsgebiedenGet = (
    params?: ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetParams,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied[]>({
        url: `/v0.1/valid/werkingsgebieden`,
        method: 'get',
        params,
        signal,
    })
}

export const getReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetQueryKey = (
    params?: ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetParams
) => [`/v0.1/valid/werkingsgebieden`, ...(params ? [params] : [])]

export type ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidWerkingsgebiedV01ValidWerkingsgebiedenGet
            >
        >
    >
export type ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetQueryError =
    HTTPValidationError

export const useReadValidWerkingsgebiedV01ValidWerkingsgebiedenGet = <
    TData = Awaited<
        ReturnType<typeof readValidWerkingsgebiedV01ValidWerkingsgebiedenGet>
    >,
    TError = HTTPValidationError
>(
    params?: ReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof readValidWerkingsgebiedV01ValidWerkingsgebiedenGet
                >
            >,
            TError,
            TData
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getReadValidWerkingsgebiedV01ValidWerkingsgebiedenGetQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof readValidWerkingsgebiedV01ValidWerkingsgebiedenGet
            >
        >
    > = ({ signal }) =>
        readValidWerkingsgebiedV01ValidWerkingsgebiedenGet(params, signal)

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof readValidWerkingsgebiedV01ValidWerkingsgebiedenGet
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryKey

    return query
}

/**
 * Gets all the werkingsgebied in this lineage that are valid
 * @summary Read Valid Werkingsgebied Lineage
 */
export const readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet =
    (
        lineageId: number,
        params?: ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetParams,
        signal?: AbortSignal
    ) => {
        return customInstance<Werkingsgebied[]>({
            url: `/v0.1/valid/werkingsgebieden/${lineageId}`,
            method: 'get',
            params,
            signal,
        })
    }

export const getReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetQueryKey =
    (
        lineageId: number,
        params?: ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetParams
    ) => [
        `/v0.1/valid/werkingsgebieden/${lineageId}`,
        ...(params ? [params] : []),
    ]

export type ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet
            >
        >
    >
export type ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetQueryError =
    HTTPValidationError

export const useReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet
            >
        >,
        TError = HTTPValidationError
    >(
        lineageId: number,
        params?: ReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetParams,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGetQueryKey(
                lineageId,
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet
                >
            >
        > = ({ signal }) =>
            readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet(
                lineageId,
                params,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readValidWerkingsgebiedLineageV01ValidWerkingsgebiedenLineageIdGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!lineageId,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }

/**
 * Finds the lineage of the resource and retrieves the latest
available version.
 * @summary Read Latest Version Lineage
 */
export const readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Werkingsgebied>({
        url: `/v0.1/version/werkingsgebieden/${objectUuid}`,
        method: 'get',
        signal,
    })
}

export const getReadLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGetQueryKey =
    (objectUuid: string) => [`/v0.1/version/werkingsgebieden/${objectUuid}`]

export type ReadLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGetQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet
            >
        >
    >
export type ReadLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGetQueryError =
    HTTPValidationError

export const useReadLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet =
    <
        TData = Awaited<
            ReturnType<
                typeof readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet
            >
        >,
        TError = HTTPValidationError
    >(
        objectUuid: string,
        options?: {
            query?: UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet
                    >
                >,
                TError,
                TData
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getReadLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGetQueryKey(
                objectUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet
                >
            >
        > = ({ signal }) =>
            readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet(
                objectUuid,
                signal
            )

        const query = useQuery<
            Awaited<
                ReturnType<
                    typeof readLatestVersionLineageV01VersionWerkingsgebiedenObjectUuidGet
                >
            >,
            TError,
            TData
        >(queryKey, queryFn, {
            enabled: !!objectUuid,
            ...queryOptions,
        }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

        query.queryKey = queryKey

        return query
    }
