// @ts-nocheck
/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Omgevingsbeleid API
 * 
        This API serves all the object that make up the policies 
        of a provincial government. 
        
 * OpenAPI spec version: 5.0.0
 */
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
    AOJCreate,
    AOJCreatedResponse,
    AcknowledgedRelation,
    ActCreate,
    ActCreatedResponse,
    ActEdit,
    ActiveModuleObjectsResponse,
    AmbitieFull,
    AmbitieGetListActiveModuleObjectsParams,
    AmbitieGetModuleListLineageTreeParams,
    AmbitieListValidLineageTreeParams,
    AmbitieListValidLineagesParams,
    AmbitiePatch,
    AmbitieStaticPostStatics,
    AmbitieUUID,
    AnnouncementCreatedResponse,
    AreaDesignationValueList,
    AreasGetListObjectsByAreasParams,
    AreasGetListObjectsByGeometryParams,
    AuthToken,
    AuthenticationPostAuthResetPasswordParams,
    BeleidsdoelFull,
    BeleidsdoelGetListActiveModuleObjectsParams,
    BeleidsdoelGetModuleListLineageTreeParams,
    BeleidsdoelListValidLineageTreeParams,
    BeleidsdoelListValidLineagesParams,
    BeleidsdoelPatch,
    BeleidsdoelStaticPostStatics,
    BeleidsdoelUUID,
    BeleidskeuzeFull,
    BeleidskeuzeGetAcknowledgedRelationListParams,
    BeleidskeuzeGetListActiveModuleObjectsParams,
    BeleidskeuzeGetModuleListLineageTreeParams,
    BeleidskeuzeListValidLineageTreeParams,
    BeleidskeuzeListValidLineagesParams,
    BeleidskeuzePatch,
    BeleidskeuzeStaticPostStatics,
    BeleidskeuzeUUID,
    BeleidsregelFull,
    BeleidsregelGetListActiveModuleObjectsParams,
    BeleidsregelGetModuleListLineageTreeParams,
    BeleidsregelListValidLineageTreeParams,
    BeleidsregelListValidLineagesParams,
    BeleidsregelPatch,
    BeleidsregelStaticPostStatics,
    BeleidsregelUUID,
    BodyAuthenticationPostAuthLoginAccessToken,
    BodyPublicationActReportsPostUploadActPackageReport,
    BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport,
    BodyPublicationVersionsPostUploadAttachment,
    BodyStorageFilePostFilesUpload,
    CompleteModule,
    DocumentFull,
    DocumentGetListActiveModuleObjectsParams,
    DocumentGetModuleListLineageTreeParams,
    DocumentListValidLineageTreeParams,
    DocumentListValidLineagesParams,
    DocumentPatch,
    DocumentStaticPostStatics,
    DocumentUUID,
    EditAcknowledgedRelation,
    EditUser,
    EnvironmentCreate,
    EnvironmentCreatedResponse,
    EnvironmentEdit,
    GebiedsprogrammaFull,
    GebiedsprogrammaGetListActiveModuleObjectsParams,
    GebiedsprogrammaGetModuleListLineageTreeParams,
    GebiedsprogrammaListValidLineageTreeParams,
    GebiedsprogrammaListValidLineagesParams,
    GebiedsprogrammaPatch,
    GebiedsprogrammaStaticPostStatics,
    GebiedsprogrammaUUID,
    GraphGetObjectGraphParams,
    GraphResponse,
    HTTPValidationError,
    ListObjectsByGeometryRequestData,
    MaatregelFull,
    MaatregelGetListActiveModuleObjectsParams,
    MaatregelGetModuleListLineageTreeParams,
    MaatregelListValidLineageTreeParams,
    MaatregelListValidLineagesParams,
    MaatregelPatch,
    MaatregelStaticPostStatics,
    MaatregelUUID,
    ModuleAddExistingObject,
    ModuleAddNewObject,
    ModuleCreate,
    ModuleCreatedResponse,
    ModuleEdit,
    ModuleEditObjectContext,
    ModuleObjectContext,
    ModuleOverview,
    ModulePatchStatus,
    ModuleSnapshot,
    ModuleStatus,
    ModulesGetListModuleObjectsParams,
    ModulesGetListModulesParams,
    NationaalBelangCreate,
    NationaalBelangEdit,
    NationaalBelangFull,
    NationaalBelangListValidLineagesParams,
    NationaalBelangStaticPostStatics,
    NationaalBelangUUID,
    NewObjectStaticResponse,
    OnderverdelingFull,
    OnderverdelingGetListActiveModuleObjectsParams,
    OnderverdelingGetModuleListLineageTreeParams,
    OnderverdelingListValidLineageTreeParams,
    OnderverdelingListValidLineagesParams,
    OnderverdelingStaticPostStatics,
    PagedResponseAmbitieBasic,
    PagedResponseAmbitieExtended,
    PagedResponseBeleidsdoelBasic,
    PagedResponseBeleidsdoelExtended,
    PagedResponseBeleidskeuzeBasic,
    PagedResponseBeleidskeuzeExtended,
    PagedResponseBeleidsregelBasic,
    PagedResponseBeleidsregelExtended,
    PagedResponseDocumentBasic,
    PagedResponseDocumentExtended,
    PagedResponseGebiedsprogrammaBasic,
    PagedResponseGebiedsprogrammaExtended,
    PagedResponseGenericObjectShort,
    PagedResponseGeoSearchResult,
    PagedResponseMaatregelBasic,
    PagedResponseMaatregelExtended,
    PagedResponseModule,
    PagedResponseModuleObjectsResponse,
    PagedResponseNationaalBelangBasic,
    PagedResponseOnderverdelingBasic,
    PagedResponseOnderverdelingExtended,
    PagedResponseProgrammaAlgemeenBasic,
    PagedResponseProgrammaAlgemeenExtended,
    PagedResponsePublicModuleShort,
    PagedResponsePublication,
    PagedResponsePublicationAOJ,
    PagedResponsePublicationActPackageReportShort,
    PagedResponsePublicationActShort,
    PagedResponsePublicationAnnouncementPackageReportShort,
    PagedResponsePublicationAnnouncementShort,
    PagedResponsePublicationEnvironment,
    PagedResponsePublicationPackage,
    PagedResponsePublicationTemplate,
    PagedResponsePublicationVersionShort,
    PagedResponseSearchObject,
    PagedResponseStorageFileBasic,
    PagedResponseUnifiedPackage,
    PagedResponseUser,
    PagedResponseValidSearchObject,
    PagedResponseVerplichtProgrammaBasic,
    PagedResponseVisieAlgemeenBasic,
    PagedResponseVisieAlgemeenExtended,
    PagedResponseWerkingsgebied,
    PagedResponseWerkingsgebiedBasic,
    PagedResponseWerkingsgebiedExtended,
    PagedResponseWettelijkeTaakBasic,
    ProgrammaAlgemeenFull,
    ProgrammaAlgemeenGetListActiveModuleObjectsParams,
    ProgrammaAlgemeenGetModuleListLineageTreeParams,
    ProgrammaAlgemeenListValidLineageTreeParams,
    ProgrammaAlgemeenListValidLineagesParams,
    ProgrammaAlgemeenPatch,
    ProgrammaAlgemeenStaticPostStatics,
    ProgrammaAlgemeenUUID,
    PublicModuleOverview,
    PublicModulesGetPublicListModulesParams,
    Publication,
    PublicationAct,
    PublicationActPackageDetailResponse,
    PublicationActPackageReport,
    PublicationActPackagesGetListActPackagesParams,
    PublicationActReportsGetListActPackageReportsParams,
    PublicationActsGetListActsParams,
    PublicationAnnouncement,
    PublicationAnnouncementEdit,
    PublicationAnnouncementPackageCreate,
    PublicationAnnouncementPackageCreatedResponse,
    PublicationAnnouncementPackageDetailResponse,
    PublicationAnnouncementPackageReport,
    PublicationAnnouncementPackagesGetListAnnouncementPackagesParams,
    PublicationAnnouncementReportsGetListAnnnouncementPackageReportsParams,
    PublicationAnnouncementsGetListAnnouncementsParams,
    PublicationAojGetListAojParams,
    PublicationCreate,
    PublicationCreatedResponse,
    PublicationEdit,
    PublicationEnvironment,
    PublicationEnvironmentsGetListEnvironmentsParams,
    PublicationPackageCreate,
    PublicationPackageCreatedResponse,
    PublicationPackagePdf,
    PublicationPackagesGetListUnifiedPackagesParams,
    PublicationTemplate,
    PublicationTemplatesGetListTemplatesParams,
    PublicationValueListsGetAreaDesignationGroupsParams,
    PublicationValueListsGetAreaDesignationTypesParams,
    PublicationVersion,
    PublicationVersionCreate,
    PublicationVersionCreatedResponse,
    PublicationVersionEdit,
    PublicationVersionEditResponse,
    PublicationVersionsGetListVersionsParams,
    PublicationsGetListPublicationsParams,
    ReadRelation,
    RequestAcknowledgedRelation,
    ResetPasswordResponse,
    ResponseOK,
    RootModelListObjectCount,
    SearchDoListAllLatestParams,
    SearchGeoRequestData,
    SearchGetMssqlSearchParams,
    SearchGetMssqlValidSearchParams,
    SearchRequestData,
    SourceWerkingsgebiedenGetListWerkingsgebiedenParams,
    StorageFileBasic,
    StorageFileGetFilesListParams,
    TemplateCreate,
    TemplateCreatedResponse,
    TemplateEdit,
    UploadAttachmentResponse,
    UploadFileResponse,
    UploadPackageReportResponse,
    User,
    UserCreate,
    UserCreateResponse,
    UserGetListUsersParams,
    UserGetSearchUsersParams,
    VerplichtProgrammaCreate,
    VerplichtProgrammaEdit,
    VerplichtProgrammaFull,
    VerplichtProgrammaListValidLineagesParams,
    VerplichtProgrammaStaticPostStatics,
    VerplichtProgrammaUUID,
    VisieAlgemeenFull,
    VisieAlgemeenGetListActiveModuleObjectsParams,
    VisieAlgemeenGetModuleListLineageTreeParams,
    VisieAlgemeenListValidLineageTreeParams,
    VisieAlgemeenListValidLineagesParams,
    VisieAlgemeenPatch,
    VisieAlgemeenStaticPostStatics,
    VisieAlgemeenUUID,
    WerkingsgebiedFull,
    WerkingsgebiedGetListActiveModuleObjectsParams,
    WerkingsgebiedGetModuleListLineageTreeParams,
    WerkingsgebiedListValidLineageTreeParams,
    WerkingsgebiedListValidLineagesParams,
    WerkingsgebiedPatch,
    WerkingsgebiedStaticPostStatics,
    WerkingsgebiedUUID,
    WettelijkeTaakCreate,
    WettelijkeTaakEdit,
    WettelijkeTaakFull,
    WettelijkeTaakListValidLineagesParams,
    WettelijkeTaakStaticPostStatics,
    WettelijkeTaakUUID,
    WriteRelation,
} from './fetchers.schemas'
import { customInstance } from './instance'

/**
 * @summary List the objects in the given areas
 */
export const areasGetListObjectsByAreas = (
    searchGeoRequestData: SearchGeoRequestData,
    params?: AreasGetListObjectsByAreasParams
) => {
    return customInstance<PagedResponseGeoSearchResult>({
        url: `/search/by-areas`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: searchGeoRequestData,
        params,
    })
}

export const getAreasGetListObjectsByAreasMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof areasGetListObjectsByAreas>>,
        TError,
        {
            data: SearchGeoRequestData
            params?: AreasGetListObjectsByAreasParams
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof areasGetListObjectsByAreas>>,
    TError,
    { data: SearchGeoRequestData; params?: AreasGetListObjectsByAreasParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof areasGetListObjectsByAreas>>,
        {
            data: SearchGeoRequestData
            params?: AreasGetListObjectsByAreasParams
        }
    > = props => {
        const { data, params } = props ?? {}

        return areasGetListObjectsByAreas(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type AreasGetListObjectsByAreasMutationResult = NonNullable<
    Awaited<ReturnType<typeof areasGetListObjectsByAreas>>
>
export type AreasGetListObjectsByAreasMutationBody = SearchGeoRequestData
export type AreasGetListObjectsByAreasMutationError = HTTPValidationError

/**
 * @summary List the objects in the given areas
 */
export const useAreasGetListObjectsByAreas = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof areasGetListObjectsByAreas>>,
        TError,
        {
            data: SearchGeoRequestData
            params?: AreasGetListObjectsByAreasParams
        },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof areasGetListObjectsByAreas>>,
    TError,
    { data: SearchGeoRequestData; params?: AreasGetListObjectsByAreasParams },
    TContext
> => {
    const mutationOptions =
        getAreasGetListObjectsByAreasMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the objects in werkingsgebieden by a geometry
 */
export const areasGetListObjectsByGeometry = (
    listObjectsByGeometryRequestData: ListObjectsByGeometryRequestData,
    params?: AreasGetListObjectsByGeometryParams
) => {
    return customInstance<PagedResponseGeoSearchResult>({
        url: `/search/by-geometry`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: listObjectsByGeometryRequestData,
        params,
    })
}

export const getAreasGetListObjectsByGeometryMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>,
        TError,
        {
            data: ListObjectsByGeometryRequestData
            params?: AreasGetListObjectsByGeometryParams
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>,
    TError,
    {
        data: ListObjectsByGeometryRequestData
        params?: AreasGetListObjectsByGeometryParams
    },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>,
        {
            data: ListObjectsByGeometryRequestData
            params?: AreasGetListObjectsByGeometryParams
        }
    > = props => {
        const { data, params } = props ?? {}

        return areasGetListObjectsByGeometry(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type AreasGetListObjectsByGeometryMutationResult = NonNullable<
    Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>
>
export type AreasGetListObjectsByGeometryMutationBody =
    ListObjectsByGeometryRequestData
export type AreasGetListObjectsByGeometryMutationError = HTTPValidationError

/**
 * @summary List the objects in werkingsgebieden by a geometry
 */
export const useAreasGetListObjectsByGeometry = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>,
        TError,
        {
            data: ListObjectsByGeometryRequestData
            params?: AreasGetListObjectsByGeometryParams
        },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof areasGetListObjectsByGeometry>>,
    TError,
    {
        data: ListObjectsByGeometryRequestData
        params?: AreasGetListObjectsByGeometryParams
    },
    TContext
> => {
    const mutationOptions =
        getAreasGetListObjectsByGeometryMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Login an user and receive a JWT token
 */
export const authenticationPostAuthLoginAccessToken = (
    bodyAuthenticationPostAuthLoginAccessToken: BodyAuthenticationPostAuthLoginAccessToken
) => {
    const formUrlEncoded = new URLSearchParams()
    if (bodyAuthenticationPostAuthLoginAccessToken.grant_type !== undefined) {
        formUrlEncoded.append(
            'grant_type',
            bodyAuthenticationPostAuthLoginAccessToken.grant_type
        )
    }
    formUrlEncoded.append(
        'username',
        bodyAuthenticationPostAuthLoginAccessToken.username
    )
    formUrlEncoded.append(
        'password',
        bodyAuthenticationPostAuthLoginAccessToken.password
    )
    if (bodyAuthenticationPostAuthLoginAccessToken.scope !== undefined) {
        formUrlEncoded.append(
            'scope',
            bodyAuthenticationPostAuthLoginAccessToken.scope
        )
    }
    if (bodyAuthenticationPostAuthLoginAccessToken.client_id !== undefined) {
        formUrlEncoded.append(
            'client_id',
            bodyAuthenticationPostAuthLoginAccessToken.client_id
        )
    }
    if (
        bodyAuthenticationPostAuthLoginAccessToken.client_secret !== undefined
    ) {
        formUrlEncoded.append(
            'client_secret',
            bodyAuthenticationPostAuthLoginAccessToken.client_secret
        )
    }

    return customInstance<AuthToken>({
        url: `/login/access-token`,
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded,
    })
}

export const getAuthenticationPostAuthLoginAccessTokenMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>,
        TError,
        { data: BodyAuthenticationPostAuthLoginAccessToken },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>,
    TError,
    { data: BodyAuthenticationPostAuthLoginAccessToken },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>,
        { data: BodyAuthenticationPostAuthLoginAccessToken }
    > = props => {
        const { data } = props ?? {}

        return authenticationPostAuthLoginAccessToken(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AuthenticationPostAuthLoginAccessTokenMutationResult = NonNullable<
    Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>
>
export type AuthenticationPostAuthLoginAccessTokenMutationBody =
    BodyAuthenticationPostAuthLoginAccessToken
export type AuthenticationPostAuthLoginAccessTokenMutationError =
    HTTPValidationError

/**
 * @summary Login an user and receive a JWT token
 */
export const useAuthenticationPostAuthLoginAccessToken = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>,
        TError,
        { data: BodyAuthenticationPostAuthLoginAccessToken },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof authenticationPostAuthLoginAccessToken>>,
    TError,
    { data: BodyAuthenticationPostAuthLoginAccessToken },
    TContext
> => {
    const mutationOptions =
        getAuthenticationPostAuthLoginAccessTokenMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Changes password for a user
 */
export const authenticationPostAuthResetPassword = (
    params: AuthenticationPostAuthResetPasswordParams
) => {
    return customInstance<ResponseOK>({
        url: `/password-reset`,
        method: 'POST',
        params,
    })
}

export const getAuthenticationPostAuthResetPasswordMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>,
        TError,
        { params: AuthenticationPostAuthResetPasswordParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>,
    TError,
    { params: AuthenticationPostAuthResetPasswordParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>,
        { params: AuthenticationPostAuthResetPasswordParams }
    > = props => {
        const { params } = props ?? {}

        return authenticationPostAuthResetPassword(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type AuthenticationPostAuthResetPasswordMutationResult = NonNullable<
    Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>
>

export type AuthenticationPostAuthResetPasswordMutationError =
    HTTPValidationError

/**
 * @summary Changes password for a user
 */
export const useAuthenticationPostAuthResetPassword = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>,
        TError,
        { params: AuthenticationPostAuthResetPasswordParams },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof authenticationPostAuthResetPassword>>,
    TError,
    { params: AuthenticationPostAuthResetPasswordParams },
    TContext
> => {
    const mutationOptions =
        getAuthenticationPostAuthResetPasswordMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary A graph representation
 */
export const graphGetFullGraph = (signal?: AbortSignal) => {
    return customInstance<GraphResponse>({
        url: `/full-graph`,
        method: 'GET',
        signal,
    })
}

export const getGraphGetFullGraphQueryKey = () => {
    return [`/full-graph`] as const
}

export const getGraphGetFullGraphQueryOptions = <
    TData = Awaited<ReturnType<typeof graphGetFullGraph>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof graphGetFullGraph>>,
            TError,
            TData
        >
    >
}) => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGraphGetFullGraphQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof graphGetFullGraph>>
    > = ({ signal }) => graphGetFullGraph(signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof graphGetFullGraph>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GraphGetFullGraphQueryResult = NonNullable<
    Awaited<ReturnType<typeof graphGetFullGraph>>
>
export type GraphGetFullGraphQueryError = unknown

/**
 * @summary A graph representation
 */
export const useGraphGetFullGraph = <
    TData = Awaited<ReturnType<typeof graphGetFullGraph>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof graphGetFullGraph>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGraphGetFullGraphQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary A graph representation of an object
 */
export const graphGetObjectGraph = (
    params: GraphGetObjectGraphParams,
    signal?: AbortSignal
) => {
    return customInstance<GraphResponse>({
        url: `/object-graph`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGraphGetObjectGraphQueryKey = (
    params: GraphGetObjectGraphParams
) => {
    return [`/object-graph`, ...(params ? [params] : [])] as const
}

export const getGraphGetObjectGraphQueryOptions = <
    TData = Awaited<ReturnType<typeof graphGetObjectGraph>>,
    TError = HTTPValidationError,
>(
    params: GraphGetObjectGraphParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof graphGetObjectGraph>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGraphGetObjectGraphQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof graphGetObjectGraph>>
    > = ({ signal }) => graphGetObjectGraph(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof graphGetObjectGraph>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GraphGetObjectGraphQueryResult = NonNullable<
    Awaited<ReturnType<typeof graphGetObjectGraph>>
>
export type GraphGetObjectGraphQueryError = HTTPValidationError

/**
 * @summary A graph representation of an object
 */
export const useGraphGetObjectGraph = <
    TData = Awaited<ReturnType<typeof graphGetObjectGraph>>,
    TError = HTTPValidationError,
>(
    params: GraphGetObjectGraphParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof graphGetObjectGraph>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGraphGetObjectGraphQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new module
 */
export const modulesPostCreateModule = (moduleCreate: ModuleCreate) => {
    return customInstance<ModuleCreatedResponse>({
        url: `/modules`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: moduleCreate,
    })
}

export const getModulesPostCreateModuleMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCreateModule>>,
        TError,
        { data: ModuleCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostCreateModule>>,
    TError,
    { data: ModuleCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostCreateModule>>,
        { data: ModuleCreate }
    > = props => {
        const { data } = props ?? {}

        return modulesPostCreateModule(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostCreateModuleMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostCreateModule>>
>
export type ModulesPostCreateModuleMutationBody = ModuleCreate
export type ModulesPostCreateModuleMutationError = HTTPValidationError

/**
 * @summary Create new module
 */
export const useModulesPostCreateModule = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCreateModule>>,
        TError,
        { data: ModuleCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostCreateModule>>,
    TError,
    { data: ModuleCreate },
    TContext
> => {
    const mutationOptions = getModulesPostCreateModuleMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the modules
 */
export const modulesGetListModules = (
    params?: ModulesGetListModulesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseModule>({
        url: `/modules`,
        method: 'GET',
        params,
        signal,
    })
}

export const getModulesGetListModulesQueryKey = (
    params?: ModulesGetListModulesParams
) => {
    return [`/modules`, ...(params ? [params] : [])] as const
}

export const getModulesGetListModulesQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesGetListModules>>,
    TError = HTTPValidationError,
>(
    params?: ModulesGetListModulesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetListModules>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getModulesGetListModulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesGetListModules>>
    > = ({ signal }) => modulesGetListModules(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesGetListModules>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesGetListModulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesGetListModules>>
>
export type ModulesGetListModulesQueryError = HTTPValidationError

/**
 * @summary List the modules
 */
export const useModulesGetListModules = <
    TData = Awaited<ReturnType<typeof modulesGetListModules>>,
    TError = HTTPValidationError,
>(
    params?: ModulesGetListModulesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetListModules>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesGetListModulesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get overview of a module
 */
export const modulesViewModuleOverview = (
    moduleId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleOverview>({
        url: `/modules/${moduleId}`,
        method: 'GET',
        signal,
    })
}

export const getModulesViewModuleOverviewQueryKey = (moduleId: number) => {
    return [`/modules/${moduleId}`] as const
}

export const getModulesViewModuleOverviewQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesViewModuleOverview>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesViewModuleOverview>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getModulesViewModuleOverviewQueryKey(moduleId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesViewModuleOverview>>
    > = ({ signal }) => modulesViewModuleOverview(moduleId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!moduleId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesViewModuleOverview>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesViewModuleOverviewQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesViewModuleOverview>>
>
export type ModulesViewModuleOverviewQueryError = HTTPValidationError

/**
 * @summary Get overview of a module
 */
export const useModulesViewModuleOverview = <
    TData = Awaited<ReturnType<typeof modulesViewModuleOverview>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesViewModuleOverview>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesViewModuleOverviewQueryOptions(
        moduleId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit module
 */
export const modulesPostEditModule = (
    moduleId: number,
    moduleEdit: ModuleEdit
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: moduleEdit,
    })
}

export const getModulesPostEditModuleMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostEditModule>>,
        TError,
        { moduleId: number; data: ModuleEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostEditModule>>,
    TError,
    { moduleId: number; data: ModuleEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostEditModule>>,
        { moduleId: number; data: ModuleEdit }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesPostEditModule(moduleId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostEditModuleMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostEditModule>>
>
export type ModulesPostEditModuleMutationBody = ModuleEdit
export type ModulesPostEditModuleMutationError = HTTPValidationError

/**
 * @summary Edit module
 */
export const useModulesPostEditModule = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostEditModule>>,
        TError,
        { moduleId: number; data: ModuleEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostEditModule>>,
    TError,
    { moduleId: number; data: ModuleEdit },
    TContext
> => {
    const mutationOptions = getModulesPostEditModuleMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Activate a module
 */
export const modulesPostActivateModule = (moduleId: number) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/activate`,
        method: 'POST',
    })
}

export const getModulesPostActivateModuleMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostActivateModule>>,
        TError,
        { moduleId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostActivateModule>>,
    TError,
    { moduleId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostActivateModule>>,
        { moduleId: number }
    > = props => {
        const { moduleId } = props ?? {}

        return modulesPostActivateModule(moduleId)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostActivateModuleMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostActivateModule>>
>

export type ModulesPostActivateModuleMutationError = HTTPValidationError

/**
 * @summary Activate a module
 */
export const useModulesPostActivateModule = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostActivateModule>>,
        TError,
        { moduleId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostActivateModule>>,
    TError,
    { moduleId: number },
    TContext
> => {
    const mutationOptions = getModulesPostActivateModuleMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Complete a module (Successful)
 */
export const modulesPostCompleteModule = (
    moduleId: number,
    completeModule: CompleteModule
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/complete`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: completeModule,
    })
}

export const getModulesPostCompleteModuleMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCompleteModule>>,
        TError,
        { moduleId: number; data: CompleteModule },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostCompleteModule>>,
    TError,
    { moduleId: number; data: CompleteModule },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostCompleteModule>>,
        { moduleId: number; data: CompleteModule }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesPostCompleteModule(moduleId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostCompleteModuleMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostCompleteModule>>
>
export type ModulesPostCompleteModuleMutationBody = CompleteModule
export type ModulesPostCompleteModuleMutationError = HTTPValidationError

/**
 * @summary Complete a module (Successful)
 */
export const useModulesPostCompleteModule = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCompleteModule>>,
        TError,
        { moduleId: number; data: CompleteModule },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostCompleteModule>>,
    TError,
    { moduleId: number; data: CompleteModule },
    TContext
> => {
    const mutationOptions = getModulesPostCompleteModuleMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Close a module (Unsuccessful)
 */
export const modulesPostCloseModule = (moduleId: number) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/close`,
        method: 'POST',
    })
}

export const getModulesPostCloseModuleMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCloseModule>>,
        TError,
        { moduleId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostCloseModule>>,
    TError,
    { moduleId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostCloseModule>>,
        { moduleId: number }
    > = props => {
        const { moduleId } = props ?? {}

        return modulesPostCloseModule(moduleId)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostCloseModuleMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostCloseModule>>
>

export type ModulesPostCloseModuleMutationError = HTTPValidationError

/**
 * @summary Close a module (Unsuccessful)
 */
export const useModulesPostCloseModule = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostCloseModule>>,
        TError,
        { moduleId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostCloseModule>>,
    TError,
    { moduleId: number },
    TContext
> => {
    const mutationOptions = getModulesPostCloseModuleMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get status history of the module
 */
export const modulesViewModuleListStatuses = (
    moduleId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleStatus[]>({
        url: `/modules/${moduleId}/status`,
        method: 'GET',
        signal,
    })
}

export const getModulesViewModuleListStatusesQueryKey = (moduleId: number) => {
    return [`/modules/${moduleId}/status`] as const
}

export const getModulesViewModuleListStatusesQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesViewModuleListStatuses>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesViewModuleListStatuses>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesViewModuleListStatusesQueryKey(moduleId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesViewModuleListStatuses>>
    > = ({ signal }) => modulesViewModuleListStatuses(moduleId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!moduleId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesViewModuleListStatuses>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesViewModuleListStatusesQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesViewModuleListStatuses>>
>
export type ModulesViewModuleListStatusesQueryError = HTTPValidationError

/**
 * @summary Get status history of the module
 */
export const useModulesViewModuleListStatuses = <
    TData = Awaited<ReturnType<typeof modulesViewModuleListStatuses>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesViewModuleListStatuses>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesViewModuleListStatusesQueryOptions(
        moduleId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Patch the status of the module
 */
export const modulesPostModulePatchStatus = (
    moduleId: number,
    modulePatchStatus: ModulePatchStatus
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/status`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: modulePatchStatus,
    })
}

export const getModulesPostModulePatchStatusMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModulePatchStatus>>,
        TError,
        { moduleId: number; data: ModulePatchStatus },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostModulePatchStatus>>,
    TError,
    { moduleId: number; data: ModulePatchStatus },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostModulePatchStatus>>,
        { moduleId: number; data: ModulePatchStatus }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesPostModulePatchStatus(moduleId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostModulePatchStatusMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostModulePatchStatus>>
>
export type ModulesPostModulePatchStatusMutationBody = ModulePatchStatus
export type ModulesPostModulePatchStatusMutationError = HTTPValidationError

/**
 * @summary Patch the status of the module
 */
export const useModulesPostModulePatchStatus = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModulePatchStatus>>,
        TError,
        { moduleId: number; data: ModulePatchStatus },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostModulePatchStatus>>,
    TError,
    { moduleId: number; data: ModulePatchStatus },
    TContext
> => {
    const mutationOptions =
        getModulesPostModulePatchStatusMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add new object to the module
 */
export const modulesPostModuleAddNewObject = (
    moduleId: number,
    moduleAddNewObject: ModuleAddNewObject
) => {
    return customInstance<NewObjectStaticResponse>({
        url: `/modules/${moduleId}/add-new-object`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: moduleAddNewObject,
    })
}

export const getModulesPostModuleAddNewObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>,
        TError,
        { moduleId: number; data: ModuleAddNewObject },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>,
    TError,
    { moduleId: number; data: ModuleAddNewObject },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>,
        { moduleId: number; data: ModuleAddNewObject }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesPostModuleAddNewObject(moduleId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostModuleAddNewObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>
>
export type ModulesPostModuleAddNewObjectMutationBody = ModuleAddNewObject
export type ModulesPostModuleAddNewObjectMutationError = HTTPValidationError

/**
 * @summary Add new object to the module
 */
export const useModulesPostModuleAddNewObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>,
        TError,
        { moduleId: number; data: ModuleAddNewObject },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostModuleAddNewObject>>,
    TError,
    { moduleId: number; data: ModuleAddNewObject },
    TContext
> => {
    const mutationOptions =
        getModulesPostModuleAddNewObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add existing object to the module
 */
export const modulesPostModuleAddExistingObject = (
    moduleId: number,
    moduleAddExistingObject: ModuleAddExistingObject
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/add-existing-object`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: moduleAddExistingObject,
    })
}

export const getModulesPostModuleAddExistingObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>,
        TError,
        { moduleId: number; data: ModuleAddExistingObject },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>,
    TError,
    { moduleId: number; data: ModuleAddExistingObject },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>,
        { moduleId: number; data: ModuleAddExistingObject }
    > = props => {
        const { moduleId, data } = props ?? {}

        return modulesPostModuleAddExistingObject(moduleId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostModuleAddExistingObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>
>
export type ModulesPostModuleAddExistingObjectMutationBody =
    ModuleAddExistingObject
export type ModulesPostModuleAddExistingObjectMutationError =
    HTTPValidationError

/**
 * @summary Add existing object to the module
 */
export const useModulesPostModuleAddExistingObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>,
        TError,
        { moduleId: number; data: ModuleAddExistingObject },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostModuleAddExistingObject>>,
    TError,
    { moduleId: number; data: ModuleAddExistingObject },
    TContext
> => {
    const mutationOptions =
        getModulesPostModuleAddExistingObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get context of object in the module
 */
export const modulesGetModuleGetObjectContext = (
    moduleId: number,
    objectType: string,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleObjectContext>({
        url: `/modules/${moduleId}/object-context/${objectType}/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getModulesGetModuleGetObjectContextQueryKey = (
    moduleId: number,
    objectType: string,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object-context/${objectType}/${lineageId}`,
    ] as const
}

export const getModulesGetModuleGetObjectContextQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectType: string,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesGetModuleGetObjectContextQueryKey(
            moduleId,
            objectType,
            lineageId
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>
    > = ({ signal }) =>
        modulesGetModuleGetObjectContext(
            moduleId,
            objectType,
            lineageId,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectType && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesGetModuleGetObjectContextQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>
>
export type ModulesGetModuleGetObjectContextQueryError = HTTPValidationError

/**
 * @summary Get context of object in the module
 */
export const useModulesGetModuleGetObjectContext = <
    TData = Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectType: string,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetModuleGetObjectContext>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesGetModuleGetObjectContextQueryOptions(
        moduleId,
        objectType,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit context of object in the module
 */
export const modulesPostModuleEditObjectContext = (
    moduleId: number,
    objectType: string,
    lineageId: number,
    moduleEditObjectContext: ModuleEditObjectContext
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/object-context/${objectType}/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: moduleEditObjectContext,
    })
}

export const getModulesPostModuleEditObjectContextMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>,
        TError,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>,
    TError,
    {
        moduleId: number
        objectType: string
        lineageId: number
        data: ModuleEditObjectContext
    },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        }
    > = props => {
        const { moduleId, objectType, lineageId, data } = props ?? {}

        return modulesPostModuleEditObjectContext(
            moduleId,
            objectType,
            lineageId,
            data
        )
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostModuleEditObjectContextMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>
>
export type ModulesPostModuleEditObjectContextMutationBody =
    ModuleEditObjectContext
export type ModulesPostModuleEditObjectContextMutationError =
    HTTPValidationError

/**
 * @summary Edit context of object in the module
 */
export const useModulesPostModuleEditObjectContext = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>,
        TError,
        {
            moduleId: number
            objectType: string
            lineageId: number
            data: ModuleEditObjectContext
        },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostModuleEditObjectContext>>,
    TError,
    {
        moduleId: number
        objectType: string
        lineageId: number
        data: ModuleEditObjectContext
    },
    TContext
> => {
    const mutationOptions =
        getModulesPostModuleEditObjectContextMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Remove object from the module
 */
export const modulesPostModuleRemoveObject = (
    moduleId: number,
    objectType: string,
    lineageId: number
) => {
    return customInstance<ResponseOK>({
        url: `/modules/${moduleId}/remove/${objectType}/${lineageId}`,
        method: 'DELETE',
    })
}

export const getModulesPostModuleRemoveObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>,
        TError,
        { moduleId: number; objectType: string; lineageId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>,
    TError,
    { moduleId: number; objectType: string; lineageId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>,
        { moduleId: number; objectType: string; lineageId: number }
    > = props => {
        const { moduleId, objectType, lineageId } = props ?? {}

        return modulesPostModuleRemoveObject(moduleId, objectType, lineageId)
    }

    return { mutationFn, ...mutationOptions }
}

export type ModulesPostModuleRemoveObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>
>

export type ModulesPostModuleRemoveObjectMutationError = HTTPValidationError

/**
 * @summary Remove object from the module
 */
export const useModulesPostModuleRemoveObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>,
        TError,
        { moduleId: number; objectType: string; lineageId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof modulesPostModuleRemoveObject>>,
    TError,
    { moduleId: number; objectType: string; lineageId: number },
    TContext
> => {
    const mutationOptions =
        getModulesPostModuleRemoveObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get snapshot of a module by status id
 */
export const modulesGetModuleSnapshot = (
    moduleId: number,
    statusId: number,
    signal?: AbortSignal
) => {
    return customInstance<ModuleSnapshot>({
        url: `/modules/${moduleId}/snapshot/${statusId}`,
        method: 'GET',
        signal,
    })
}

export const getModulesGetModuleSnapshotQueryKey = (
    moduleId: number,
    statusId: number
) => {
    return [`/modules/${moduleId}/snapshot/${statusId}`] as const
}

export const getModulesGetModuleSnapshotQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesGetModuleSnapshot>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    statusId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetModuleSnapshot>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getModulesGetModuleSnapshotQueryKey(moduleId, statusId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesGetModuleSnapshot>>
    > = ({ signal }) => modulesGetModuleSnapshot(moduleId, statusId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && statusId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesGetModuleSnapshot>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesGetModuleSnapshotQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesGetModuleSnapshot>>
>
export type ModulesGetModuleSnapshotQueryError = HTTPValidationError

/**
 * @summary Get snapshot of a module by status id
 */
export const useModulesGetModuleSnapshot = <
    TData = Awaited<ReturnType<typeof modulesGetModuleSnapshot>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    statusId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetModuleSnapshot>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesGetModuleSnapshotQueryOptions(
        moduleId,
        statusId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List latest module objects filtered by e.g. owner uuid, object type or minimum status
 */
export const modulesGetListModuleObjects = (
    params?: ModulesGetListModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseModuleObjectsResponse>({
        url: `/modules/objects/latest`,
        method: 'GET',
        params,
        signal,
    })
}

export const getModulesGetListModuleObjectsQueryKey = (
    params?: ModulesGetListModuleObjectsParams
) => {
    return [`/modules/objects/latest`, ...(params ? [params] : [])] as const
}

export const getModulesGetListModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof modulesGetListModuleObjects>>,
    TError = HTTPValidationError,
>(
    params?: ModulesGetListModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetListModuleObjects>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getModulesGetListModuleObjectsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof modulesGetListModuleObjects>>
    > = ({ signal }) => modulesGetListModuleObjects(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof modulesGetListModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ModulesGetListModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof modulesGetListModuleObjects>>
>
export type ModulesGetListModuleObjectsQueryError = HTTPValidationError

/**
 * @summary List latest module objects filtered by e.g. owner uuid, object type or minimum status
 */
export const useModulesGetListModuleObjects = <
    TData = Awaited<ReturnType<typeof modulesGetListModuleObjects>>,
    TError = HTTPValidationError,
>(
    params?: ModulesGetListModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof modulesGetListModuleObjects>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getModulesGetListModuleObjectsQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List object types with counts for loggedin user
 */
export const objectsViewObjectCounts = (signal?: AbortSignal) => {
    return customInstance<RootModelListObjectCount>({
        url: `/objects/valid/count`,
        method: 'GET',
        signal,
    })
}

export const getObjectsViewObjectCountsQueryKey = () => {
    return [`/objects/valid/count`] as const
}

export const getObjectsViewObjectCountsQueryOptions = <
    TData = Awaited<ReturnType<typeof objectsViewObjectCounts>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof objectsViewObjectCounts>>,
            TError,
            TData
        >
    >
}) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getObjectsViewObjectCountsQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof objectsViewObjectCounts>>
    > = ({ signal }) => objectsViewObjectCounts(signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof objectsViewObjectCounts>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ObjectsViewObjectCountsQueryResult = NonNullable<
    Awaited<ReturnType<typeof objectsViewObjectCounts>>
>
export type ObjectsViewObjectCountsQueryError = unknown

/**
 * @summary List object types with counts for loggedin user
 */
export const useObjectsViewObjectCounts = <
    TData = Awaited<ReturnType<typeof objectsViewObjectCounts>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof objectsViewObjectCounts>>,
            TError,
            TData
        >
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getObjectsViewObjectCountsQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the public modules
 */
export const publicModulesGetPublicListModules = (
    params?: PublicModulesGetPublicListModulesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicModuleShort>({
        url: `/revisions`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicModulesGetPublicListModulesQueryKey = (
    params?: PublicModulesGetPublicListModulesParams
) => {
    return [`/revisions`, ...(params ? [params] : [])] as const
}

export const getPublicModulesGetPublicListModulesQueryOptions = <
    TData = Awaited<ReturnType<typeof publicModulesGetPublicListModules>>,
    TError = HTTPValidationError,
>(
    params?: PublicModulesGetPublicListModulesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicModulesGetPublicListModules>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicModulesGetPublicListModulesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicModulesGetPublicListModules>>
    > = ({ signal }) => publicModulesGetPublicListModules(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicModulesGetPublicListModules>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicModulesGetPublicListModulesQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicModulesGetPublicListModules>>
>
export type PublicModulesGetPublicListModulesQueryError = HTTPValidationError

/**
 * @summary List the public modules
 */
export const usePublicModulesGetPublicListModules = <
    TData = Awaited<ReturnType<typeof publicModulesGetPublicListModules>>,
    TError = HTTPValidationError,
>(
    params?: PublicModulesGetPublicListModulesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicModulesGetPublicListModules>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicModulesGetPublicListModulesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get overview of a public module
 */
export const publicModulesGetPublicModuleOverview = (
    moduleId: number,
    signal?: AbortSignal
) => {
    return customInstance<PublicModuleOverview>({
        url: `/revisions/${moduleId}`,
        method: 'GET',
        signal,
    })
}

export const getPublicModulesGetPublicModuleOverviewQueryKey = (
    moduleId: number
) => {
    return [`/revisions/${moduleId}`] as const
}

export const getPublicModulesGetPublicModuleOverviewQueryOptions = <
    TData = Awaited<ReturnType<typeof publicModulesGetPublicModuleOverview>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicModulesGetPublicModuleOverview>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicModulesGetPublicModuleOverviewQueryKey(moduleId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicModulesGetPublicModuleOverview>>
    > = ({ signal }) => publicModulesGetPublicModuleOverview(moduleId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!moduleId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicModulesGetPublicModuleOverview>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicModulesGetPublicModuleOverviewQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicModulesGetPublicModuleOverview>>
>
export type PublicModulesGetPublicModuleOverviewQueryError = HTTPValidationError

/**
 * @summary Get overview of a public module
 */
export const usePublicModulesGetPublicModuleOverview = <
    TData = Awaited<ReturnType<typeof publicModulesGetPublicModuleOverview>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicModulesGetPublicModuleOverview>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicModulesGetPublicModuleOverviewQueryOptions(
        moduleId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new publication area of jurisdictions
 */
export const publicationAojPostCreateAoj = (aOJCreate: AOJCreate) => {
    return customInstance<AOJCreatedResponse>({
        url: `/publication-aoj`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: aOJCreate,
    })
}

export const getPublicationAojPostCreateAojMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationAojPostCreateAoj>>,
        TError,
        { data: AOJCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationAojPostCreateAoj>>,
    TError,
    { data: AOJCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationAojPostCreateAoj>>,
        { data: AOJCreate }
    > = props => {
        const { data } = props ?? {}

        return publicationAojPostCreateAoj(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationAojPostCreateAojMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationAojPostCreateAoj>>
>
export type PublicationAojPostCreateAojMutationBody = AOJCreate
export type PublicationAojPostCreateAojMutationError = HTTPValidationError

/**
 * @summary Create new publication area of jurisdictions
 */
export const usePublicationAojPostCreateAoj = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationAojPostCreateAoj>>,
        TError,
        { data: AOJCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationAojPostCreateAoj>>,
    TError,
    { data: AOJCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationAojPostCreateAojMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the publication area of jurisdictions
 */
export const publicationAojGetListAoj = (
    params?: PublicationAojGetListAojParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationAOJ>({
        url: `/publication-aoj`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationAojGetListAojQueryKey = (
    params?: PublicationAojGetListAojParams
) => {
    return [`/publication-aoj`, ...(params ? [params] : [])] as const
}

export const getPublicationAojGetListAojQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationAojGetListAoj>>,
    TError = HTTPValidationError,
>(
    params?: PublicationAojGetListAojParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationAojGetListAoj>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getPublicationAojGetListAojQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationAojGetListAoj>>
    > = ({ signal }) => publicationAojGetListAoj(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationAojGetListAoj>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationAojGetListAojQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationAojGetListAoj>>
>
export type PublicationAojGetListAojQueryError = HTTPValidationError

/**
 * @summary List the publication area of jurisdictions
 */
export const usePublicationAojGetListAoj = <
    TData = Awaited<ReturnType<typeof publicationAojGetListAoj>>,
    TError = HTTPValidationError,
>(
    params?: PublicationAojGetListAojParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationAojGetListAoj>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationAojGetListAojQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new Publication Act Package
 */
export const publicationActPackagesPostCreateActPackage = (
    versionUuid: string,
    publicationPackageCreate: PublicationPackageCreate
) => {
    return customInstance<PublicationPackageCreatedResponse>({
        url: `/publication-versions/${versionUuid}/packages`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationPackageCreate,
    })
}

export const getPublicationActPackagesPostCreateActPackageMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>,
        TError,
        { versionUuid: string; data: PublicationPackageCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>,
    TError,
    { versionUuid: string; data: PublicationPackageCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>,
        { versionUuid: string; data: PublicationPackageCreate }
    > = props => {
        const { versionUuid, data } = props ?? {}

        return publicationActPackagesPostCreateActPackage(versionUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationActPackagesPostCreateActPackageMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>
    >
export type PublicationActPackagesPostCreateActPackageMutationBody =
    PublicationPackageCreate
export type PublicationActPackagesPostCreateActPackageMutationError =
    HTTPValidationError

/**
 * @summary Create new Publication Act Package
 */
export const usePublicationActPackagesPostCreateActPackage = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>,
        TError,
        { versionUuid: string; data: PublicationPackageCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationActPackagesPostCreateActPackage>>,
    TError,
    { versionUuid: string; data: PublicationPackageCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationActPackagesPostCreateActPackageMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing publication act packages of a publication version
 */
export const publicationActPackagesGetListActPackages = (
    params?: PublicationActPackagesGetListActPackagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationPackage>({
        url: `/publication-act-packages`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationActPackagesGetListActPackagesQueryKey = (
    params?: PublicationActPackagesGetListActPackagesParams
) => {
    return [`/publication-act-packages`, ...(params ? [params] : [])] as const
}

export const getPublicationActPackagesGetListActPackagesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetListActPackages>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationActPackagesGetListActPackagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationActPackagesGetListActPackages>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActPackagesGetListActPackagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationActPackagesGetListActPackages>>
    > = ({ signal }) => publicationActPackagesGetListActPackages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationActPackagesGetListActPackages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActPackagesGetListActPackagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationActPackagesGetListActPackages>>
>
export type PublicationActPackagesGetListActPackagesQueryError =
    HTTPValidationError

/**
 * @summary List the existing publication act packages of a publication version
 */
export const usePublicationActPackagesGetListActPackages = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetListActPackages>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationActPackagesGetListActPackagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationActPackagesGetListActPackages>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActPackagesGetListActPackagesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get details of a publication act package
 */
export const publicationActPackagesGetDetailActPackage = (
    actPackageUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationActPackageDetailResponse>({
        url: `/publication-act-packages/${actPackageUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationActPackagesGetDetailActPackageQueryKey = (
    actPackageUuid: string
) => {
    return [`/publication-act-packages/${actPackageUuid}`] as const
}

export const getPublicationActPackagesGetDetailActPackageQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetDetailActPackage>
    >,
    TError = HTTPValidationError,
>(
    actPackageUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationActPackagesGetDetailActPackage>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActPackagesGetDetailActPackageQueryKey(actPackageUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationActPackagesGetDetailActPackage>>
    > = ({ signal }) =>
        publicationActPackagesGetDetailActPackage(actPackageUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!actPackageUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationActPackagesGetDetailActPackage>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActPackagesGetDetailActPackageQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationActPackagesGetDetailActPackage>>
>
export type PublicationActPackagesGetDetailActPackageQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication act package
 */
export const usePublicationActPackagesGetDetailActPackage = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetDetailActPackage>
    >,
    TError = HTTPValidationError,
>(
    actPackageUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationActPackagesGetDetailActPackage>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActPackagesGetDetailActPackageQueryOptions(
            actPackageUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Download a generated publication act package ZIP file
 */
export const publicationActPackagesGetDownloadActPackage = (
    actPackageUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/publication-act-packages/${actPackageUuid}/download`,
        method: 'GET',
        signal,
    })
}

export const getPublicationActPackagesGetDownloadActPackageQueryKey = (
    actPackageUuid: string
) => {
    return [`/publication-act-packages/${actPackageUuid}/download`] as const
}

export const getPublicationActPackagesGetDownloadActPackageQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetDownloadActPackage>
    >,
    TError = HTTPValidationError,
>(
    actPackageUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActPackagesGetDownloadActPackage
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActPackagesGetDownloadActPackageQueryKey(actPackageUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationActPackagesGetDownloadActPackage>>
    > = ({ signal }) =>
        publicationActPackagesGetDownloadActPackage(actPackageUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!actPackageUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationActPackagesGetDownloadActPackage>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActPackagesGetDownloadActPackageQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationActPackagesGetDownloadActPackage>>
    >
export type PublicationActPackagesGetDownloadActPackageQueryError =
    HTTPValidationError

/**
 * @summary Download a generated publication act package ZIP file
 */
export const usePublicationActPackagesGetDownloadActPackage = <
    TData = Awaited<
        ReturnType<typeof publicationActPackagesGetDownloadActPackage>
    >,
    TError = HTTPValidationError,
>(
    actPackageUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActPackagesGetDownloadActPackage
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActPackagesGetDownloadActPackageQueryOptions(
            actPackageUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Record the submission response from lvbb of a publication package
 */
export const publicationActReportsPostUploadActPackageReport = (
    actPackageUuid: string,
    bodyPublicationActReportsPostUploadActPackageReport: BodyPublicationActReportsPostUploadActPackageReport
) => {
    const formData = new FormData()
    bodyPublicationActReportsPostUploadActPackageReport.uploaded_files.forEach(
        value => formData.append('uploaded_files', value)
    )

    return customInstance<UploadPackageReportResponse>({
        url: `/publication-act-packages/${actPackageUuid}/report`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
    })
}

export const getPublicationActReportsPostUploadActPackageReportMutationOptions =
    <TError = HTTPValidationError, TContext = unknown>(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof publicationActReportsPostUploadActPackageReport
                >
            >,
            TError,
            {
                actPackageUuid: string
                data: BodyPublicationActReportsPostUploadActPackageReport
            },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationActReportsPostUploadActPackageReport>
        >,
        TError,
        {
            actPackageUuid: string
            data: BodyPublicationActReportsPostUploadActPackageReport
        },
        TContext
    > => {
        const { mutation: mutationOptions } = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof publicationActReportsPostUploadActPackageReport
                >
            >,
            {
                actPackageUuid: string
                data: BodyPublicationActReportsPostUploadActPackageReport
            }
        > = props => {
            const { actPackageUuid, data } = props ?? {}

            return publicationActReportsPostUploadActPackageReport(
                actPackageUuid,
                data
            )
        }

        return { mutationFn, ...mutationOptions }
    }

export type PublicationActReportsPostUploadActPackageReportMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationActReportsPostUploadActPackageReport>
        >
    >
export type PublicationActReportsPostUploadActPackageReportMutationBody =
    BodyPublicationActReportsPostUploadActPackageReport
export type PublicationActReportsPostUploadActPackageReportMutationError =
    HTTPValidationError

/**
 * @summary Record the submission response from lvbb of a publication package
 */
export const usePublicationActReportsPostUploadActPackageReport = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationActReportsPostUploadActPackageReport>
        >,
        TError,
        {
            actPackageUuid: string
            data: BodyPublicationActReportsPostUploadActPackageReport
        },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationActReportsPostUploadActPackageReport>>,
    TError,
    {
        actPackageUuid: string
        data: BodyPublicationActReportsPostUploadActPackageReport
    },
    TContext
> => {
    const mutationOptions =
        getPublicationActReportsPostUploadActPackageReportMutationOptions(
            options
        )

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing Publication Act reports
 */
export const publicationActReportsGetListActPackageReports = (
    params?: PublicationActReportsGetListActPackageReportsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationActPackageReportShort>({
        url: `/publication-act-reports`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationActReportsGetListActPackageReportsQueryKey = (
    params?: PublicationActReportsGetListActPackageReportsParams
) => {
    return [`/publication-act-reports`, ...(params ? [params] : [])] as const
}

export const getPublicationActReportsGetListActPackageReportsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetListActPackageReports>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationActReportsGetListActPackageReportsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetListActPackageReports
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActReportsGetListActPackageReportsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof publicationActReportsGetListActPackageReports>
        >
    > = ({ signal }) =>
        publicationActReportsGetListActPackageReports(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationActReportsGetListActPackageReports>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActReportsGetListActPackageReportsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationActReportsGetListActPackageReports>
        >
    >
export type PublicationActReportsGetListActPackageReportsQueryError =
    HTTPValidationError

/**
 * @summary List the existing Publication Act reports
 */
export const usePublicationActReportsGetListActPackageReports = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetListActPackageReports>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationActReportsGetListActPackageReportsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetListActPackageReports
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActReportsGetListActPackageReportsQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get details of a publication report
 */
export const publicationActReportsGetDetailActPackageReport = (
    actReportUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationActPackageReport>({
        url: `/publication-act-reports/${actReportUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationActReportsGetDetailActPackageReportQueryKey = (
    actReportUuid: string
) => {
    return [`/publication-act-reports/${actReportUuid}`] as const
}

export const getPublicationActReportsGetDetailActPackageReportQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetDetailActPackageReport>
    >,
    TError = HTTPValidationError,
>(
    actReportUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetDetailActPackageReport
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActReportsGetDetailActPackageReportQueryKey(actReportUuid)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof publicationActReportsGetDetailActPackageReport>
        >
    > = ({ signal }) =>
        publicationActReportsGetDetailActPackageReport(actReportUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!actReportUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationActReportsGetDetailActPackageReport>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActReportsGetDetailActPackageReportQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationActReportsGetDetailActPackageReport>
        >
    >
export type PublicationActReportsGetDetailActPackageReportQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication report
 */
export const usePublicationActReportsGetDetailActPackageReport = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetDetailActPackageReport>
    >,
    TError = HTTPValidationError,
>(
    actReportUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetDetailActPackageReport
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActReportsGetDetailActPackageReportQueryOptions(
            actReportUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Download publication package report
 */
export const publicationActReportsGetDownloadActPackageReport = (
    actReportUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/publication-act-reports/${actReportUuid}/download`,
        method: 'GET',
        signal,
    })
}

export const getPublicationActReportsGetDownloadActPackageReportQueryKey = (
    actReportUuid: string
) => {
    return [`/publication-act-reports/${actReportUuid}/download`] as const
}

export const getPublicationActReportsGetDownloadActPackageReportQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetDownloadActPackageReport>
    >,
    TError = HTTPValidationError,
>(
    actReportUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetDownloadActPackageReport
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActReportsGetDownloadActPackageReportQueryKey(
            actReportUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof publicationActReportsGetDownloadActPackageReport>
        >
    > = ({ signal }) =>
        publicationActReportsGetDownloadActPackageReport(actReportUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!actReportUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationActReportsGetDownloadActPackageReport>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActReportsGetDownloadActPackageReportQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationActReportsGetDownloadActPackageReport>
        >
    >
export type PublicationActReportsGetDownloadActPackageReportQueryError =
    HTTPValidationError

/**
 * @summary Download publication package report
 */
export const usePublicationActReportsGetDownloadActPackageReport = <
    TData = Awaited<
        ReturnType<typeof publicationActReportsGetDownloadActPackageReport>
    >,
    TError = HTTPValidationError,
>(
    actReportUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationActReportsGetDownloadActPackageReport
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationActReportsGetDownloadActPackageReportQueryOptions(
            actReportUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new Act
 */
export const publicationActsPostCreateAct = (actCreate: ActCreate) => {
    return customInstance<ActCreatedResponse>({
        url: `/publication-acts`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: actCreate,
    })
}

export const getPublicationActsPostCreateActMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostCreateAct>>,
        TError,
        { data: ActCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationActsPostCreateAct>>,
    TError,
    { data: ActCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationActsPostCreateAct>>,
        { data: ActCreate }
    > = props => {
        const { data } = props ?? {}

        return publicationActsPostCreateAct(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationActsPostCreateActMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationActsPostCreateAct>>
>
export type PublicationActsPostCreateActMutationBody = ActCreate
export type PublicationActsPostCreateActMutationError = HTTPValidationError

/**
 * @summary Create new Act
 */
export const usePublicationActsPostCreateAct = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostCreateAct>>,
        TError,
        { data: ActCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationActsPostCreateAct>>,
    TError,
    { data: ActCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationActsPostCreateActMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the publication acts
 */
export const publicationActsGetListActs = (
    params?: PublicationActsGetListActsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationActShort>({
        url: `/publication-acts`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationActsGetListActsQueryKey = (
    params?: PublicationActsGetListActsParams
) => {
    return [`/publication-acts`, ...(params ? [params] : [])] as const
}

export const getPublicationActsGetListActsQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationActsGetListActs>>,
    TError = HTTPValidationError,
>(
    params?: PublicationActsGetListActsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationActsGetListActs>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getPublicationActsGetListActsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationActsGetListActs>>
    > = ({ signal }) => publicationActsGetListActs(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationActsGetListActs>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActsGetListActsQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationActsGetListActs>>
>
export type PublicationActsGetListActsQueryError = HTTPValidationError

/**
 * @summary List the publication acts
 */
export const usePublicationActsGetListActs = <
    TData = Awaited<ReturnType<typeof publicationActsGetListActs>>,
    TError = HTTPValidationError,
>(
    params?: PublicationActsGetListActsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationActsGetListActs>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationActsGetListActsQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Close publication act
 */
export const publicationActsPostCloseAct = (actUuid: string) => {
    return customInstance<ResponseOK>({
        url: `/publication-acts/${actUuid}/close`,
        method: 'POST',
    })
}

export const getPublicationActsPostCloseActMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostCloseAct>>,
        TError,
        { actUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationActsPostCloseAct>>,
    TError,
    { actUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationActsPostCloseAct>>,
        { actUuid: string }
    > = props => {
        const { actUuid } = props ?? {}

        return publicationActsPostCloseAct(actUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationActsPostCloseActMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationActsPostCloseAct>>
>

export type PublicationActsPostCloseActMutationError = HTTPValidationError

/**
 * @summary Close publication act
 */
export const usePublicationActsPostCloseAct = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostCloseAct>>,
        TError,
        { actUuid: string },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationActsPostCloseAct>>,
    TError,
    { actUuid: string },
    TContext
> => {
    const mutationOptions =
        getPublicationActsPostCloseActMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit publication act
 */
export const publicationActsPostEditAct = (
    actUuid: string,
    actEdit: ActEdit
) => {
    return customInstance<ResponseOK>({
        url: `/publication-acts/${actUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: actEdit,
    })
}

export const getPublicationActsPostEditActMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostEditAct>>,
        TError,
        { actUuid: string; data: ActEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationActsPostEditAct>>,
    TError,
    { actUuid: string; data: ActEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationActsPostEditAct>>,
        { actUuid: string; data: ActEdit }
    > = props => {
        const { actUuid, data } = props ?? {}

        return publicationActsPostEditAct(actUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationActsPostEditActMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationActsPostEditAct>>
>
export type PublicationActsPostEditActMutationBody = ActEdit
export type PublicationActsPostEditActMutationError = HTTPValidationError

/**
 * @summary Edit publication act
 */
export const usePublicationActsPostEditAct = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationActsPostEditAct>>,
        TError,
        { actUuid: string; data: ActEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationActsPostEditAct>>,
    TError,
    { actUuid: string; data: ActEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationActsPostEditActMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication act
 */
export const publicationActsGetDetailAct = (
    actUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationAct>({
        url: `/publication-acts/${actUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationActsGetDetailActQueryKey = (actUuid: string) => {
    return [`/publication-acts/${actUuid}`] as const
}

export const getPublicationActsGetDetailActQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationActsGetDetailAct>>,
    TError = HTTPValidationError,
>(
    actUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationActsGetDetailAct>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationActsGetDetailActQueryKey(actUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationActsGetDetailAct>>
    > = ({ signal }) => publicationActsGetDetailAct(actUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!actUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationActsGetDetailAct>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationActsGetDetailActQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationActsGetDetailAct>>
>
export type PublicationActsGetDetailActQueryError = HTTPValidationError

/**
 * @summary Get details of a publication act
 */
export const usePublicationActsGetDetailAct = <
    TData = Awaited<ReturnType<typeof publicationActsGetDetailAct>>,
    TError = HTTPValidationError,
>(
    actUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationActsGetDetailAct>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationActsGetDetailActQueryOptions(
        actUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new Publication Announcement Package
 */
export const publicationAnnouncementPackagesPostCreateAnnouncementPackage = (
    announcementUuid: string,
    publicationAnnouncementPackageCreate: PublicationAnnouncementPackageCreate
) => {
    return customInstance<PublicationAnnouncementPackageCreatedResponse>({
        url: `/publication-announcements/${announcementUuid}/packages`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationAnnouncementPackageCreate,
    })
}

export const getPublicationAnnouncementPackagesPostCreateAnnouncementPackageMutationOptions =
    <TError = HTTPValidationError, TContext = unknown>(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
                >
            >,
            TError,
            {
                announcementUuid: string
                data: PublicationAnnouncementPackageCreate
            },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
            >
        >,
        TError,
        {
            announcementUuid: string
            data: PublicationAnnouncementPackageCreate
        },
        TContext
    > => {
        const { mutation: mutationOptions } = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
                >
            >,
            {
                announcementUuid: string
                data: PublicationAnnouncementPackageCreate
            }
        > = props => {
            const { announcementUuid, data } = props ?? {}

            return publicationAnnouncementPackagesPostCreateAnnouncementPackage(
                announcementUuid,
                data
            )
        }

        return { mutationFn, ...mutationOptions }
    }

export type PublicationAnnouncementPackagesPostCreateAnnouncementPackageMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
            >
        >
    >
export type PublicationAnnouncementPackagesPostCreateAnnouncementPackageMutationBody =
    PublicationAnnouncementPackageCreate
export type PublicationAnnouncementPackagesPostCreateAnnouncementPackageMutationError =
    HTTPValidationError

/**
 * @summary Create new Publication Announcement Package
 */
export const usePublicationAnnouncementPackagesPostCreateAnnouncementPackage = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
            >
        >,
        TError,
        {
            announcementUuid: string
            data: PublicationAnnouncementPackageCreate
        },
        TContext
    >
}): UseMutationResult<
    Awaited<
        ReturnType<
            typeof publicationAnnouncementPackagesPostCreateAnnouncementPackage
        >
    >,
    TError,
    { announcementUuid: string; data: PublicationAnnouncementPackageCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationAnnouncementPackagesPostCreateAnnouncementPackageMutationOptions(
            options
        )

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing publication announcement packages of a publication version
 */
export const publicationAnnouncementPackagesGetListAnnouncementPackages = (
    params?: PublicationAnnouncementPackagesGetListAnnouncementPackagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationPackage>({
        url: `/publication-announcement-packages`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationAnnouncementPackagesGetListAnnouncementPackagesQueryKey =
    (
        params?: PublicationAnnouncementPackagesGetListAnnouncementPackagesParams
    ) => {
        return [
            `/publication-announcement-packages`,
            ...(params ? [params] : []),
        ] as const
    }

export const getPublicationAnnouncementPackagesGetListAnnouncementPackagesQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetListAnnouncementPackages
            >
        >,
        TError = HTTPValidationError,
    >(
        params?: PublicationAnnouncementPackagesGetListAnnouncementPackagesParams,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementPackagesGetListAnnouncementPackages
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementPackagesGetListAnnouncementPackagesQueryKey(
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetListAnnouncementPackages
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementPackagesGetListAnnouncementPackages(
                params,
                signal
            )

        return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetListAnnouncementPackages
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementPackagesGetListAnnouncementPackagesQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetListAnnouncementPackages
            >
        >
    >
export type PublicationAnnouncementPackagesGetListAnnouncementPackagesQueryError =
    HTTPValidationError

/**
 * @summary List the existing publication announcement packages of a publication version
 */
export const usePublicationAnnouncementPackagesGetListAnnouncementPackages = <
    TData = Awaited<
        ReturnType<
            typeof publicationAnnouncementPackagesGetListAnnouncementPackages
        >
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationAnnouncementPackagesGetListAnnouncementPackagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementPackagesGetListAnnouncementPackages
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationAnnouncementPackagesGetListAnnouncementPackagesQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get details of a publication announcement package
 */
export const publicationAnnouncementPackagesGetDetailAnnouncementPackage = (
    announcementPackageUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationAnnouncementPackageDetailResponse>({
        url: `/publication-announcement-packages/${announcementPackageUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryKey =
    (announcementPackageUuid: string) => {
        return [
            `/publication-announcement-packages/${announcementPackageUuid}`,
        ] as const
    }

export const getPublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementPackageUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryKey(
                announcementPackageUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementPackagesGetDetailAnnouncementPackage(
                announcementPackageUuid,
                signal
            )

        return {
            queryKey,
            queryFn,
            enabled: !!announcementPackageUuid,
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
            >
        >
    >
export type PublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication announcement package
 */
export const usePublicationAnnouncementPackagesGetDetailAnnouncementPackage = <
    TData = Awaited<
        ReturnType<
            typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
        >
    >,
    TError = HTTPValidationError,
>(
    announcementPackageUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementPackagesGetDetailAnnouncementPackage
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationAnnouncementPackagesGetDetailAnnouncementPackageQueryOptions(
            announcementPackageUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Download a generated publication announcement package ZIP file
 */
export const publicationAnnouncementPackagesGetDownloadAnnouncementPackage = (
    announcementPackageUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<unknown>({
        url: `/publication-announcement-packages/${announcementPackageUuid}/download`,
        method: 'GET',
        signal,
    })
}

export const getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryKey =
    (announcementPackageUuid: string) => {
        return [
            `/publication-announcement-packages/${announcementPackageUuid}/download`,
        ] as const
    }

export const getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementPackageUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryKey(
                announcementPackageUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementPackagesGetDownloadAnnouncementPackage(
                announcementPackageUuid,
                signal
            )

        return {
            queryKey,
            queryFn,
            enabled: !!announcementPackageUuid,
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
            >
        >
    >
export type PublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryError =
    HTTPValidationError

/**
 * @summary Download a generated publication announcement package ZIP file
 */
export const usePublicationAnnouncementPackagesGetDownloadAnnouncementPackage =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementPackageUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementPackagesGetDownloadAnnouncementPackage
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const queryOptions =
            getPublicationAnnouncementPackagesGetDownloadAnnouncementPackageQueryOptions(
                announcementPackageUuid,
                options
            )

        const query = useQuery(queryOptions) as UseQueryResult<
            TData,
            TError
        > & { queryKey: QueryKey }

        query.queryKey = queryOptions.queryKey

        return query
    }

/**
 * @summary Record the submission response from lvbb of a publication announcement package
 */
export const publicationAnnouncementReportsPostUploadAnnouncementPackageReport =
    (
        announcementPackageUuid: string,
        bodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
    ) => {
        const formData = new FormData()
        bodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport.uploaded_files.forEach(
            value => formData.append('uploaded_files', value)
        )

        return customInstance<UploadPackageReportResponse>({
            url: `/publication-announcement-packages/${announcementPackageUuid}/report`,
            method: 'POST',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
        })
    }

export const getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportMutationOptions =
    <TError = HTTPValidationError, TContext = unknown>(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
                >
            >,
            TError,
            {
                announcementPackageUuid: string
                data: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
            },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
            >
        >,
        TError,
        {
            announcementPackageUuid: string
            data: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
        },
        TContext
    > => {
        const { mutation: mutationOptions } = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
                >
            >,
            {
                announcementPackageUuid: string
                data: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
            }
        > = props => {
            const { announcementPackageUuid, data } = props ?? {}

            return publicationAnnouncementReportsPostUploadAnnouncementPackageReport(
                announcementPackageUuid,
                data
            )
        }

        return { mutationFn, ...mutationOptions }
    }

export type PublicationAnnouncementReportsPostUploadAnnouncementPackageReportMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
            >
        >
    >
export type PublicationAnnouncementReportsPostUploadAnnouncementPackageReportMutationBody =
    BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
export type PublicationAnnouncementReportsPostUploadAnnouncementPackageReportMutationError =
    HTTPValidationError

/**
 * @summary Record the submission response from lvbb of a publication announcement package
 */
export const usePublicationAnnouncementReportsPostUploadAnnouncementPackageReport =
    <TError = HTTPValidationError, TContext = unknown>(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
                >
            >,
            TError,
            {
                announcementPackageUuid: string
                data: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
            },
            TContext
        >
    }): UseMutationResult<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsPostUploadAnnouncementPackageReport
            >
        >,
        TError,
        {
            announcementPackageUuid: string
            data: BodyPublicationAnnouncementReportsPostUploadAnnouncementPackageReport
        },
        TContext
    > => {
        const mutationOptions =
            getPublicationAnnouncementReportsPostUploadAnnouncementPackageReportMutationOptions(
                options
            )

        return useMutation(mutationOptions)
    }

/**
 * @summary List the existing Publication Announcement reports
 */
export const publicationAnnouncementReportsGetListAnnnouncementPackageReports =
    (
        params?: PublicationAnnouncementReportsGetListAnnnouncementPackageReportsParams,
        signal?: AbortSignal
    ) => {
        return customInstance<PagedResponsePublicationAnnouncementPackageReportShort>(
            {
                url: `/publication-announcement-reports`,
                method: 'GET',
                params,
                signal,
            }
        )
    }

export const getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryKey =
    (
        params?: PublicationAnnouncementReportsGetListAnnnouncementPackageReportsParams
    ) => {
        return [
            `/publication-announcement-reports`,
            ...(params ? [params] : []),
        ] as const
    }

export const getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
            >
        >,
        TError = HTTPValidationError,
    >(
        params?: PublicationAnnouncementReportsGetListAnnnouncementPackageReportsParams,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryKey(
                params
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementReportsGetListAnnnouncementPackageReports(
                params,
                signal
            )

        return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
            >
        >
    >
export type PublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryError =
    HTTPValidationError

/**
 * @summary List the existing Publication Announcement reports
 */
export const usePublicationAnnouncementReportsGetListAnnnouncementPackageReports =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
            >
        >,
        TError = HTTPValidationError,
    >(
        params?: PublicationAnnouncementReportsGetListAnnnouncementPackageReportsParams,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetListAnnnouncementPackageReports
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const queryOptions =
            getPublicationAnnouncementReportsGetListAnnnouncementPackageReportsQueryOptions(
                params,
                options
            )

        const query = useQuery(queryOptions) as UseQueryResult<
            TData,
            TError
        > & { queryKey: QueryKey }

        query.queryKey = queryOptions.queryKey

        return query
    }

/**
 * @summary Get details of a publication announcement report
 */
export const publicationAnnouncementReportsGetDetailAnnouncementPackageReport =
    (announcementReportUuid: string, signal?: AbortSignal) => {
        return customInstance<PublicationAnnouncementPackageReport>({
            url: `/publication-announcement-reports/${announcementReportUuid}`,
            method: 'GET',
            signal,
        })
    }

export const getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryKey =
    (announcementReportUuid: string) => {
        return [
            `/publication-announcement-reports/${announcementReportUuid}`,
        ] as const
    }

export const getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementReportUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryKey(
                announcementReportUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementReportsGetDetailAnnouncementPackageReport(
                announcementReportUuid,
                signal
            )

        return {
            queryKey,
            queryFn,
            enabled: !!announcementReportUuid,
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
            >
        >
    >
export type PublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication announcement report
 */
export const usePublicationAnnouncementReportsGetDetailAnnouncementPackageReport =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementReportUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetDetailAnnouncementPackageReport
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const queryOptions =
            getPublicationAnnouncementReportsGetDetailAnnouncementPackageReportQueryOptions(
                announcementReportUuid,
                options
            )

        const query = useQuery(queryOptions) as UseQueryResult<
            TData,
            TError
        > & { queryKey: QueryKey }

        query.queryKey = queryOptions.queryKey

        return query
    }

/**
 * @summary Download publication announcement package report
 */
export const publicationAnnouncementReportsGetDownloadAnnouncementPackageReport =
    (announcementReportUuid: string, signal?: AbortSignal) => {
        return customInstance<unknown>({
            url: `/publication-announcement-reports/${announcementReportUuid}/download`,
            method: 'GET',
            signal,
        })
    }

export const getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryKey =
    (announcementReportUuid: string) => {
        return [
            `/publication-announcement-reports/${announcementReportUuid}/download`,
        ] as const
    }

export const getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryOptions =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementReportUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ) => {
        const { query: queryOptions } = options ?? {}

        const queryKey =
            queryOptions?.queryKey ??
            getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryKey(
                announcementReportUuid
            )

        const queryFn: QueryFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
                >
            >
        > = ({ signal }) =>
            publicationAnnouncementReportsGetDownloadAnnouncementPackageReport(
                announcementReportUuid,
                signal
            )

        return {
            queryKey,
            queryFn,
            enabled: !!announcementReportUuid,
            ...queryOptions,
        } as UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
                >
            >,
            TError,
            TData
        > & { queryKey: QueryKey }
    }

export type PublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
            >
        >
    >
export type PublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryError =
    HTTPValidationError

/**
 * @summary Download publication announcement package report
 */
export const usePublicationAnnouncementReportsGetDownloadAnnouncementPackageReport =
    <
        TData = Awaited<
            ReturnType<
                typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
            >
        >,
        TError = HTTPValidationError,
    >(
        announcementReportUuid: string,
        options?: {
            query?: Partial<
                UseQueryOptions<
                    Awaited<
                        ReturnType<
                            typeof publicationAnnouncementReportsGetDownloadAnnouncementPackageReport
                        >
                    >,
                    TError,
                    TData
                >
            >
        }
    ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
        const queryOptions =
            getPublicationAnnouncementReportsGetDownloadAnnouncementPackageReportQueryOptions(
                announcementReportUuid,
                options
            )

        const query = useQuery(queryOptions) as UseQueryResult<
            TData,
            TError
        > & { queryKey: QueryKey }

        query.queryKey = queryOptions.queryKey

        return query
    }

/**
 * @summary Create new publication announcement
 */
export const publicationAnnouncementsPostCreateAnnouncement = (
    actPackageUuid: string
) => {
    return customInstance<AnnouncementCreatedResponse>({
        url: `/publication-act-packages/${actPackageUuid}/create-announcement`,
        method: 'POST',
    })
}

export const getPublicationAnnouncementsPostCreateAnnouncementMutationOptions =
    <TError = HTTPValidationError, TContext = unknown>(options?: {
        mutation?: UseMutationOptions<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementsPostCreateAnnouncement
                >
            >,
            TError,
            { actPackageUuid: string },
            TContext
        >
    }): UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostCreateAnnouncement>
        >,
        TError,
        { actPackageUuid: string },
        TContext
    > => {
        const { mutation: mutationOptions } = options ?? {}

        const mutationFn: MutationFunction<
            Awaited<
                ReturnType<
                    typeof publicationAnnouncementsPostCreateAnnouncement
                >
            >,
            { actPackageUuid: string }
        > = props => {
            const { actPackageUuid } = props ?? {}

            return publicationAnnouncementsPostCreateAnnouncement(
                actPackageUuid
            )
        }

        return { mutationFn, ...mutationOptions }
    }

export type PublicationAnnouncementsPostCreateAnnouncementMutationResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostCreateAnnouncement>
        >
    >

export type PublicationAnnouncementsPostCreateAnnouncementMutationError =
    HTTPValidationError

/**
 * @summary Create new publication announcement
 */
export const usePublicationAnnouncementsPostCreateAnnouncement = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostCreateAnnouncement>
        >,
        TError,
        { actPackageUuid: string },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationAnnouncementsPostCreateAnnouncement>>,
    TError,
    { actPackageUuid: string },
    TContext
> => {
    const mutationOptions =
        getPublicationAnnouncementsPostCreateAnnouncementMutationOptions(
            options
        )

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing Publication announcements
 */
export const publicationAnnouncementsGetListAnnouncements = (
    params?: PublicationAnnouncementsGetListAnnouncementsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationAnnouncementShort>({
        url: `/publication-announcements`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationAnnouncementsGetListAnnouncementsQueryKey = (
    params?: PublicationAnnouncementsGetListAnnouncementsParams
) => {
    return [`/publication-announcements`, ...(params ? [params] : [])] as const
}

export const getPublicationAnnouncementsGetListAnnouncementsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationAnnouncementsGetListAnnouncements>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationAnnouncementsGetListAnnouncementsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementsGetListAnnouncements
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationAnnouncementsGetListAnnouncementsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationAnnouncementsGetListAnnouncements>>
    > = ({ signal }) =>
        publicationAnnouncementsGetListAnnouncements(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsGetListAnnouncements>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationAnnouncementsGetListAnnouncementsQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationAnnouncementsGetListAnnouncements>>
    >
export type PublicationAnnouncementsGetListAnnouncementsQueryError =
    HTTPValidationError

/**
 * @summary List the existing Publication announcements
 */
export const usePublicationAnnouncementsGetListAnnouncements = <
    TData = Awaited<
        ReturnType<typeof publicationAnnouncementsGetListAnnouncements>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationAnnouncementsGetListAnnouncementsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementsGetListAnnouncements
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationAnnouncementsGetListAnnouncementsQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit an existing publication announcement
 */
export const publicationAnnouncementsPostEditAnnouncement = (
    announcementUuid: string,
    publicationAnnouncementEdit: PublicationAnnouncementEdit
) => {
    return customInstance<ResponseOK>({
        url: `/publication-announcements/${announcementUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationAnnouncementEdit,
    })
}

export const getPublicationAnnouncementsPostEditAnnouncementMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>
        >,
        TError,
        { announcementUuid: string; data: PublicationAnnouncementEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>>,
    TError,
    { announcementUuid: string; data: PublicationAnnouncementEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>
        >,
        { announcementUuid: string; data: PublicationAnnouncementEdit }
    > = props => {
        const { announcementUuid, data } = props ?? {}

        return publicationAnnouncementsPostEditAnnouncement(
            announcementUuid,
            data
        )
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationAnnouncementsPostEditAnnouncementMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>>
    >
export type PublicationAnnouncementsPostEditAnnouncementMutationBody =
    PublicationAnnouncementEdit
export type PublicationAnnouncementsPostEditAnnouncementMutationError =
    HTTPValidationError

/**
 * @summary Edit an existing publication announcement
 */
export const usePublicationAnnouncementsPostEditAnnouncement = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>
        >,
        TError,
        { announcementUuid: string; data: PublicationAnnouncementEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationAnnouncementsPostEditAnnouncement>>,
    TError,
    { announcementUuid: string; data: PublicationAnnouncementEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationAnnouncementsPostEditAnnouncementMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication announcement
 */
export const publicationAnnouncementsGetDetailAnnouncement = (
    announcementUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationAnnouncement>({
        url: `/publication-announcements/${announcementUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationAnnouncementsGetDetailAnnouncementQueryKey = (
    announcementUuid: string
) => {
    return [`/publication-announcements/${announcementUuid}`] as const
}

export const getPublicationAnnouncementsGetDetailAnnouncementQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationAnnouncementsGetDetailAnnouncement>
    >,
    TError = HTTPValidationError,
>(
    announcementUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementsGetDetailAnnouncement
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationAnnouncementsGetDetailAnnouncementQueryKey(
            announcementUuid
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof publicationAnnouncementsGetDetailAnnouncement>
        >
    > = ({ signal }) =>
        publicationAnnouncementsGetDetailAnnouncement(announcementUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!announcementUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationAnnouncementsGetDetailAnnouncement>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationAnnouncementsGetDetailAnnouncementQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationAnnouncementsGetDetailAnnouncement>
        >
    >
export type PublicationAnnouncementsGetDetailAnnouncementQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication announcement
 */
export const usePublicationAnnouncementsGetDetailAnnouncement = <
    TData = Awaited<
        ReturnType<typeof publicationAnnouncementsGetDetailAnnouncement>
    >,
    TError = HTTPValidationError,
>(
    announcementUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationAnnouncementsGetDetailAnnouncement
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationAnnouncementsGetDetailAnnouncementQueryOptions(
            announcementUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new publication environment
 */
export const publicationEnvironmentsPostCreateEnvironment = (
    environmentCreate: EnvironmentCreate
) => {
    return customInstance<EnvironmentCreatedResponse>({
        url: `/publication-environments`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: environmentCreate,
    })
}

export const getPublicationEnvironmentsPostCreateEnvironmentMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>
        >,
        TError,
        { data: EnvironmentCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>>,
    TError,
    { data: EnvironmentCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>
        >,
        { data: EnvironmentCreate }
    > = props => {
        const { data } = props ?? {}

        return publicationEnvironmentsPostCreateEnvironment(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationEnvironmentsPostCreateEnvironmentMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>>
    >
export type PublicationEnvironmentsPostCreateEnvironmentMutationBody =
    EnvironmentCreate
export type PublicationEnvironmentsPostCreateEnvironmentMutationError =
    HTTPValidationError

/**
 * @summary Create new publication environment
 */
export const usePublicationEnvironmentsPostCreateEnvironment = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>
        >,
        TError,
        { data: EnvironmentCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationEnvironmentsPostCreateEnvironment>>,
    TError,
    { data: EnvironmentCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationEnvironmentsPostCreateEnvironmentMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the publication environments
 */
export const publicationEnvironmentsGetListEnvironments = (
    params?: PublicationEnvironmentsGetListEnvironmentsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationEnvironment>({
        url: `/publication-environments`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationEnvironmentsGetListEnvironmentsQueryKey = (
    params?: PublicationEnvironmentsGetListEnvironmentsParams
) => {
    return [`/publication-environments`, ...(params ? [params] : [])] as const
}

export const getPublicationEnvironmentsGetListEnvironmentsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationEnvironmentsGetListEnvironments>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationEnvironmentsGetListEnvironmentsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationEnvironmentsGetListEnvironments
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationEnvironmentsGetListEnvironmentsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationEnvironmentsGetListEnvironments>>
    > = ({ signal }) =>
        publicationEnvironmentsGetListEnvironments(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationEnvironmentsGetListEnvironments>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationEnvironmentsGetListEnvironmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationEnvironmentsGetListEnvironments>>
>
export type PublicationEnvironmentsGetListEnvironmentsQueryError =
    HTTPValidationError

/**
 * @summary List the publication environments
 */
export const usePublicationEnvironmentsGetListEnvironments = <
    TData = Awaited<
        ReturnType<typeof publicationEnvironmentsGetListEnvironments>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationEnvironmentsGetListEnvironmentsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationEnvironmentsGetListEnvironments
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationEnvironmentsGetListEnvironmentsQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit publication environment
 */
export const publicationEnvironmentsPostEditEnvironment = (
    environmentUuid: string,
    environmentEdit: EnvironmentEdit
) => {
    return customInstance<ResponseOK>({
        url: `/publication-environments/${environmentUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: environmentEdit,
    })
}

export const getPublicationEnvironmentsPostEditEnvironmentMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>,
        TError,
        { environmentUuid: string; data: EnvironmentEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>,
    TError,
    { environmentUuid: string; data: EnvironmentEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>,
        { environmentUuid: string; data: EnvironmentEdit }
    > = props => {
        const { environmentUuid, data } = props ?? {}

        return publicationEnvironmentsPostEditEnvironment(environmentUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationEnvironmentsPostEditEnvironmentMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>
    >
export type PublicationEnvironmentsPostEditEnvironmentMutationBody =
    EnvironmentEdit
export type PublicationEnvironmentsPostEditEnvironmentMutationError =
    HTTPValidationError

/**
 * @summary Edit publication environment
 */
export const usePublicationEnvironmentsPostEditEnvironment = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>,
        TError,
        { environmentUuid: string; data: EnvironmentEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationEnvironmentsPostEditEnvironment>>,
    TError,
    { environmentUuid: string; data: EnvironmentEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationEnvironmentsPostEditEnvironmentMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication environment
 */
export const publicationEnvironmentsGetDetailEnvironment = (
    environmentUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationEnvironment>({
        url: `/publication-environments/${environmentUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationEnvironmentsGetDetailEnvironmentQueryKey = (
    environmentUuid: string
) => {
    return [`/publication-environments/${environmentUuid}`] as const
}

export const getPublicationEnvironmentsGetDetailEnvironmentQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationEnvironmentsGetDetailEnvironment>
    >,
    TError = HTTPValidationError,
>(
    environmentUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationEnvironmentsGetDetailEnvironment
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationEnvironmentsGetDetailEnvironmentQueryKey(environmentUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationEnvironmentsGetDetailEnvironment>>
    > = ({ signal }) =>
        publicationEnvironmentsGetDetailEnvironment(environmentUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!environmentUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationEnvironmentsGetDetailEnvironment>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationEnvironmentsGetDetailEnvironmentQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationEnvironmentsGetDetailEnvironment>>
    >
export type PublicationEnvironmentsGetDetailEnvironmentQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication environment
 */
export const usePublicationEnvironmentsGetDetailEnvironment = <
    TData = Awaited<
        ReturnType<typeof publicationEnvironmentsGetDetailEnvironment>
    >,
    TError = HTTPValidationError,
>(
    environmentUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationEnvironmentsGetDetailEnvironment
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationEnvironmentsGetDetailEnvironmentQueryOptions(
            environmentUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List all publication packages (act and announcement)
 */
export const publicationPackagesGetListUnifiedPackages = (
    params?: PublicationPackagesGetListUnifiedPackagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseUnifiedPackage>({
        url: `/publication-packages`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationPackagesGetListUnifiedPackagesQueryKey = (
    params?: PublicationPackagesGetListUnifiedPackagesParams
) => {
    return [`/publication-packages`, ...(params ? [params] : [])] as const
}

export const getPublicationPackagesGetListUnifiedPackagesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationPackagesGetListUnifiedPackages>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationPackagesGetListUnifiedPackagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationPackagesGetListUnifiedPackages>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationPackagesGetListUnifiedPackagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationPackagesGetListUnifiedPackages>>
    > = ({ signal }) =>
        publicationPackagesGetListUnifiedPackages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationPackagesGetListUnifiedPackages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationPackagesGetListUnifiedPackagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationPackagesGetListUnifiedPackages>>
>
export type PublicationPackagesGetListUnifiedPackagesQueryError =
    HTTPValidationError

/**
 * @summary List all publication packages (act and announcement)
 */
export const usePublicationPackagesGetListUnifiedPackages = <
    TData = Awaited<
        ReturnType<typeof publicationPackagesGetListUnifiedPackages>
    >,
    TError = HTTPValidationError,
>(
    params?: PublicationPackagesGetListUnifiedPackagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationPackagesGetListUnifiedPackages>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationPackagesGetListUnifiedPackagesQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new publication template
 */
export const publicationTemplatesPostCreateTemplate = (
    templateCreate: TemplateCreate
) => {
    return customInstance<TemplateCreatedResponse>({
        url: `/publication-templates`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: templateCreate,
    })
}

export const getPublicationTemplatesPostCreateTemplateMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>,
        TError,
        { data: TemplateCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>,
    TError,
    { data: TemplateCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>,
        { data: TemplateCreate }
    > = props => {
        const { data } = props ?? {}

        return publicationTemplatesPostCreateTemplate(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationTemplatesPostCreateTemplateMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>
>
export type PublicationTemplatesPostCreateTemplateMutationBody = TemplateCreate
export type PublicationTemplatesPostCreateTemplateMutationError =
    HTTPValidationError

/**
 * @summary Create new publication template
 */
export const usePublicationTemplatesPostCreateTemplate = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>,
        TError,
        { data: TemplateCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationTemplatesPostCreateTemplate>>,
    TError,
    { data: TemplateCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationTemplatesPostCreateTemplateMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the publication templates
 */
export const publicationTemplatesGetListTemplates = (
    params?: PublicationTemplatesGetListTemplatesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationTemplate>({
        url: `/publication-templates`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationTemplatesGetListTemplatesQueryKey = (
    params?: PublicationTemplatesGetListTemplatesParams
) => {
    return [`/publication-templates`, ...(params ? [params] : [])] as const
}

export const getPublicationTemplatesGetListTemplatesQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationTemplatesGetListTemplates>>,
    TError = HTTPValidationError,
>(
    params?: PublicationTemplatesGetListTemplatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationTemplatesGetListTemplates>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationTemplatesGetListTemplatesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationTemplatesGetListTemplates>>
    > = ({ signal }) => publicationTemplatesGetListTemplates(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationTemplatesGetListTemplates>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationTemplatesGetListTemplatesQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationTemplatesGetListTemplates>>
>
export type PublicationTemplatesGetListTemplatesQueryError = HTTPValidationError

/**
 * @summary List the publication templates
 */
export const usePublicationTemplatesGetListTemplates = <
    TData = Awaited<ReturnType<typeof publicationTemplatesGetListTemplates>>,
    TError = HTTPValidationError,
>(
    params?: PublicationTemplatesGetListTemplatesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationTemplatesGetListTemplates>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationTemplatesGetListTemplatesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit publication template
 */
export const publicationTemplatesPostEditTemplate = (
    templateUuid: string,
    templateEdit: TemplateEdit
) => {
    return customInstance<ResponseOK>({
        url: `/publication-templates/${templateUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: templateEdit,
    })
}

export const getPublicationTemplatesPostEditTemplateMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>,
        TError,
        { templateUuid: string; data: TemplateEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>,
    TError,
    { templateUuid: string; data: TemplateEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>,
        { templateUuid: string; data: TemplateEdit }
    > = props => {
        const { templateUuid, data } = props ?? {}

        return publicationTemplatesPostEditTemplate(templateUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationTemplatesPostEditTemplateMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>
>
export type PublicationTemplatesPostEditTemplateMutationBody = TemplateEdit
export type PublicationTemplatesPostEditTemplateMutationError =
    HTTPValidationError

/**
 * @summary Edit publication template
 */
export const usePublicationTemplatesPostEditTemplate = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>,
        TError,
        { templateUuid: string; data: TemplateEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationTemplatesPostEditTemplate>>,
    TError,
    { templateUuid: string; data: TemplateEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationTemplatesPostEditTemplateMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication template
 */
export const publicationTemplatesGetDetailTemplate = (
    templateUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationTemplate>({
        url: `/publication-templates/${templateUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationTemplatesGetDetailTemplateQueryKey = (
    templateUuid: string
) => {
    return [`/publication-templates/${templateUuid}`] as const
}

export const getPublicationTemplatesGetDetailTemplateQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationTemplatesGetDetailTemplate>>,
    TError = HTTPValidationError,
>(
    templateUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationTemplatesGetDetailTemplate>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationTemplatesGetDetailTemplateQueryKey(templateUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationTemplatesGetDetailTemplate>>
    > = ({ signal }) =>
        publicationTemplatesGetDetailTemplate(templateUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!templateUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationTemplatesGetDetailTemplate>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationTemplatesGetDetailTemplateQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationTemplatesGetDetailTemplate>>
>
export type PublicationTemplatesGetDetailTemplateQueryError =
    HTTPValidationError

/**
 * @summary Get details of a publication template
 */
export const usePublicationTemplatesGetDetailTemplate = <
    TData = Awaited<ReturnType<typeof publicationTemplatesGetDetailTemplate>>,
    TError = HTTPValidationError,
>(
    templateUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof publicationTemplatesGetDetailTemplate>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationTemplatesGetDetailTemplateQueryOptions(
        templateUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the allowed types of area designations to use for this publication document_type
 */
export const publicationValueListsGetAreaDesignationTypes = (
    params: PublicationValueListsGetAreaDesignationTypesParams,
    signal?: AbortSignal
) => {
    return customInstance<AreaDesignationValueList>({
        url: `/publication-dso-value-lists/area-designation-types`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationValueListsGetAreaDesignationTypesQueryKey = (
    params: PublicationValueListsGetAreaDesignationTypesParams
) => {
    return [
        `/publication-dso-value-lists/area-designation-types`,
        ...(params ? [params] : []),
    ] as const
}

export const getPublicationValueListsGetAreaDesignationTypesQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationValueListsGetAreaDesignationTypes>
    >,
    TError = HTTPValidationError,
>(
    params: PublicationValueListsGetAreaDesignationTypesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationValueListsGetAreaDesignationTypes
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationValueListsGetAreaDesignationTypesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationValueListsGetAreaDesignationTypes>>
    > = ({ signal }) =>
        publicationValueListsGetAreaDesignationTypes(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationValueListsGetAreaDesignationTypes>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationValueListsGetAreaDesignationTypesQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof publicationValueListsGetAreaDesignationTypes>>
    >
export type PublicationValueListsGetAreaDesignationTypesQueryError =
    HTTPValidationError

/**
 * @summary List the allowed types of area designations to use for this publication document_type
 */
export const usePublicationValueListsGetAreaDesignationTypes = <
    TData = Awaited<
        ReturnType<typeof publicationValueListsGetAreaDesignationTypes>
    >,
    TError = HTTPValidationError,
>(
    params: PublicationValueListsGetAreaDesignationTypesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationValueListsGetAreaDesignationTypes
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationValueListsGetAreaDesignationTypesQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the allowed groups to use for this publication document_type
 */
export const publicationValueListsGetAreaDesignationGroups = (
    params: PublicationValueListsGetAreaDesignationGroupsParams,
    signal?: AbortSignal
) => {
    return customInstance<AreaDesignationValueList>({
        url: `/publication-dso-value-lists/area-designation-groups`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationValueListsGetAreaDesignationGroupsQueryKey = (
    params: PublicationValueListsGetAreaDesignationGroupsParams
) => {
    return [
        `/publication-dso-value-lists/area-designation-groups`,
        ...(params ? [params] : []),
    ] as const
}

export const getPublicationValueListsGetAreaDesignationGroupsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof publicationValueListsGetAreaDesignationGroups>
    >,
    TError = HTTPValidationError,
>(
    params: PublicationValueListsGetAreaDesignationGroupsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationValueListsGetAreaDesignationGroups
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationValueListsGetAreaDesignationGroupsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof publicationValueListsGetAreaDesignationGroups>
        >
    > = ({ signal }) =>
        publicationValueListsGetAreaDesignationGroups(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<
            ReturnType<typeof publicationValueListsGetAreaDesignationGroups>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationValueListsGetAreaDesignationGroupsQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof publicationValueListsGetAreaDesignationGroups>
        >
    >
export type PublicationValueListsGetAreaDesignationGroupsQueryError =
    HTTPValidationError

/**
 * @summary List the allowed groups to use for this publication document_type
 */
export const usePublicationValueListsGetAreaDesignationGroups = <
    TData = Awaited<
        ReturnType<typeof publicationValueListsGetAreaDesignationGroups>
    >,
    TError = HTTPValidationError,
>(
    params: PublicationValueListsGetAreaDesignationGroupsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof publicationValueListsGetAreaDesignationGroups
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getPublicationValueListsGetAreaDesignationGroupsQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new publication version
 */
export const publicationVersionsPostCreateVersion = (
    publicationUuid: string,
    publicationVersionCreate: PublicationVersionCreate
) => {
    return customInstance<PublicationVersionCreatedResponse>({
        url: `/publications/${publicationUuid}/version`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationVersionCreate,
    })
}

export const getPublicationVersionsPostCreateVersionMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>,
        TError,
        { publicationUuid: string; data: PublicationVersionCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>,
    TError,
    { publicationUuid: string; data: PublicationVersionCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>,
        { publicationUuid: string; data: PublicationVersionCreate }
    > = props => {
        const { publicationUuid, data } = props ?? {}

        return publicationVersionsPostCreateVersion(publicationUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostCreateVersionMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>
>
export type PublicationVersionsPostCreateVersionMutationBody =
    PublicationVersionCreate
export type PublicationVersionsPostCreateVersionMutationError =
    HTTPValidationError

/**
 * @summary Create new publication version
 */
export const usePublicationVersionsPostCreateVersion = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>,
        TError,
        { publicationUuid: string; data: PublicationVersionCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostCreateVersion>>,
    TError,
    { publicationUuid: string; data: PublicationVersionCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostCreateVersionMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing Publication versions
 */
export const publicationVersionsGetListVersions = (
    publicationUuid: string | null,
    params?: PublicationVersionsGetListVersionsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublicationVersionShort>({
        url: `/publications/${publicationUuid}/versions`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationVersionsGetListVersionsQueryKey = (
    publicationUuid: string | null,
    params?: PublicationVersionsGetListVersionsParams
) => {
    return [
        `/publications/${publicationUuid}/versions`,
        ...(params ? [params] : []),
    ] as const
}

export const getPublicationVersionsGetListVersionsQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationVersionsGetListVersions>>,
    TError = HTTPValidationError,
>(
    publicationUuid: string | null,
    params?: PublicationVersionsGetListVersionsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationVersionsGetListVersions>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationVersionsGetListVersionsQueryKey(publicationUuid, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationVersionsGetListVersions>>
    > = ({ signal }) =>
        publicationVersionsGetListVersions(publicationUuid, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!publicationUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationVersionsGetListVersions>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationVersionsGetListVersionsQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsGetListVersions>>
>
export type PublicationVersionsGetListVersionsQueryError = HTTPValidationError

/**
 * @summary List the existing Publication versions
 */
export const usePublicationVersionsGetListVersions = <
    TData = Awaited<ReturnType<typeof publicationVersionsGetListVersions>>,
    TError = HTTPValidationError,
>(
    publicationUuid: string | null,
    params?: PublicationVersionsGetListVersionsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationVersionsGetListVersions>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationVersionsGetListVersionsQueryOptions(
        publicationUuid,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit an existing publication version
 */
export const publicationVersionsPostEditVersion = (
    versionUuid: string,
    publicationVersionEdit: PublicationVersionEdit
) => {
    return customInstance<PublicationVersionEditResponse>({
        url: `/publication-versions/${versionUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationVersionEdit,
    })
}

export const getPublicationVersionsPostEditVersionMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>,
        TError,
        { versionUuid: string; data: PublicationVersionEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>,
    TError,
    { versionUuid: string; data: PublicationVersionEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>,
        { versionUuid: string; data: PublicationVersionEdit }
    > = props => {
        const { versionUuid, data } = props ?? {}

        return publicationVersionsPostEditVersion(versionUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostEditVersionMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>
>
export type PublicationVersionsPostEditVersionMutationBody =
    PublicationVersionEdit
export type PublicationVersionsPostEditVersionMutationError =
    HTTPValidationError

/**
 * @summary Edit an existing publication version
 */
export const usePublicationVersionsPostEditVersion = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>,
        TError,
        { versionUuid: string; data: PublicationVersionEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostEditVersion>>,
    TError,
    { versionUuid: string; data: PublicationVersionEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostEditVersionMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication version
 */
export const publicationVersionsGetDetailVersion = (
    versionUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<PublicationVersion>({
        url: `/publication-versions/${versionUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationVersionsGetDetailVersionQueryKey = (
    versionUuid: string
) => {
    return [`/publication-versions/${versionUuid}`] as const
}

export const getPublicationVersionsGetDetailVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>,
    TError = HTTPValidationError,
>(
    versionUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationVersionsGetDetailVersionQueryKey(versionUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>
    > = ({ signal }) => publicationVersionsGetDetailVersion(versionUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!versionUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationVersionsGetDetailVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>
>
export type PublicationVersionsGetDetailVersionQueryError = HTTPValidationError

/**
 * @summary Get details of a publication version
 */
export const usePublicationVersionsGetDetailVersion = <
    TData = Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>,
    TError = HTTPValidationError,
>(
    versionUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationVersionsGetDetailVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationVersionsGetDetailVersionQueryOptions(
        versionUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * Marks a publication version as deleted.
 * @summary Mark a publication version as deleted
 */
export const publicationVersionsPostDeleteVersion = (versionUuid: string) => {
    return customInstance<ResponseOK>({
        url: `/publication-versions/${versionUuid}`,
        method: 'DELETE',
    })
}

export const getPublicationVersionsPostDeleteVersionMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>,
        TError,
        { versionUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>,
    TError,
    { versionUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>,
        { versionUuid: string }
    > = props => {
        const { versionUuid } = props ?? {}

        return publicationVersionsPostDeleteVersion(versionUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostDeleteVersionMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>
>

export type PublicationVersionsPostDeleteVersionMutationError =
    HTTPValidationError

/**
 * @summary Mark a publication version as deleted
 */
export const usePublicationVersionsPostDeleteVersion = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>,
        TError,
        { versionUuid: string },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteVersion>>,
    TError,
    { versionUuid: string },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostDeleteVersionMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Upload an attachment for a Publication Version
 */
export const publicationVersionsPostUploadAttachment = (
    versionUuid: string,
    bodyPublicationVersionsPostUploadAttachment: BodyPublicationVersionsPostUploadAttachment
) => {
    const formData = new FormData()
    formData.append('title', bodyPublicationVersionsPostUploadAttachment.title)
    formData.append(
        'uploaded_file',
        bodyPublicationVersionsPostUploadAttachment.uploaded_file
    )

    return customInstance<UploadAttachmentResponse>({
        url: `/publication-versions/${versionUuid}/attachments`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
    })
}

export const getPublicationVersionsPostUploadAttachmentMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>,
        TError,
        {
            versionUuid: string
            data: BodyPublicationVersionsPostUploadAttachment
        },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>,
    TError,
    { versionUuid: string; data: BodyPublicationVersionsPostUploadAttachment },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>,
        {
            versionUuid: string
            data: BodyPublicationVersionsPostUploadAttachment
        }
    > = props => {
        const { versionUuid, data } = props ?? {}

        return publicationVersionsPostUploadAttachment(versionUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostUploadAttachmentMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>
>
export type PublicationVersionsPostUploadAttachmentMutationBody =
    BodyPublicationVersionsPostUploadAttachment
export type PublicationVersionsPostUploadAttachmentMutationError =
    HTTPValidationError

/**
 * @summary Upload an attachment for a Publication Version
 */
export const usePublicationVersionsPostUploadAttachment = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>,
        TError,
        {
            versionUuid: string
            data: BodyPublicationVersionsPostUploadAttachment
        },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostUploadAttachment>>,
    TError,
    { versionUuid: string; data: BodyPublicationVersionsPostUploadAttachment },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostUploadAttachmentMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Delete a publication version attachment
 */
export const publicationVersionsPostDeleteAttachment = (
    versionUuid: string,
    attachmentId: number
) => {
    return customInstance<ResponseOK>({
        url: `/publication-versions/${versionUuid}/attachments/${attachmentId}`,
        method: 'DELETE',
    })
}

export const getPublicationVersionsPostDeleteAttachmentMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>,
        TError,
        { versionUuid: string; attachmentId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>,
    TError,
    { versionUuid: string; attachmentId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>,
        { versionUuid: string; attachmentId: number }
    > = props => {
        const { versionUuid, attachmentId } = props ?? {}

        return publicationVersionsPostDeleteAttachment(
            versionUuid,
            attachmentId
        )
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostDeleteAttachmentMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>
>

export type PublicationVersionsPostDeleteAttachmentMutationError =
    HTTPValidationError

/**
 * @summary Delete a publication version attachment
 */
export const usePublicationVersionsPostDeleteAttachment = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>,
        TError,
        { versionUuid: string; attachmentId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostDeleteAttachment>>,
    TError,
    { versionUuid: string; attachmentId: number },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostDeleteAttachmentMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Download Publication Version as Pdf
 */
export const publicationVersionsPostCreatePdf = (
    versionUuid: string,
    publicationPackagePdf: PublicationPackagePdf
) => {
    return customInstance<unknown>({
        url: `/publication-versions/${versionUuid}/pdf_export`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationPackagePdf,
    })
}

export const getPublicationVersionsPostCreatePdfMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>,
        TError,
        { versionUuid: string; data: PublicationPackagePdf },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>,
    TError,
    { versionUuid: string; data: PublicationPackagePdf },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>,
        { versionUuid: string; data: PublicationPackagePdf }
    > = props => {
        const { versionUuid, data } = props ?? {}

        return publicationVersionsPostCreatePdf(versionUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationVersionsPostCreatePdfMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>
>
export type PublicationVersionsPostCreatePdfMutationBody = PublicationPackagePdf
export type PublicationVersionsPostCreatePdfMutationError = HTTPValidationError

/**
 * @summary Download Publication Version as Pdf
 */
export const usePublicationVersionsPostCreatePdf = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>,
        TError,
        { versionUuid: string; data: PublicationPackagePdf },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationVersionsPostCreatePdf>>,
    TError,
    { versionUuid: string; data: PublicationPackagePdf },
    TContext
> => {
    const mutationOptions =
        getPublicationVersionsPostCreatePdfMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List the existing Publication
 */
export const publicationsGetListPublications = (
    params?: PublicationsGetListPublicationsParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponsePublication>({
        url: `/publications`,
        method: 'GET',
        params,
        signal,
    })
}

export const getPublicationsGetListPublicationsQueryKey = (
    params?: PublicationsGetListPublicationsParams
) => {
    return [`/publications`, ...(params ? [params] : [])] as const
}

export const getPublicationsGetListPublicationsQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationsGetListPublications>>,
    TError = HTTPValidationError,
>(
    params?: PublicationsGetListPublicationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationsGetListPublications>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationsGetListPublicationsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationsGetListPublications>>
    > = ({ signal }) => publicationsGetListPublications(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationsGetListPublications>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationsGetListPublicationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationsGetListPublications>>
>
export type PublicationsGetListPublicationsQueryError = HTTPValidationError

/**
 * @summary List the existing Publication
 */
export const usePublicationsGetListPublications = <
    TData = Awaited<ReturnType<typeof publicationsGetListPublications>>,
    TError = HTTPValidationError,
>(
    params?: PublicationsGetListPublicationsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationsGetListPublications>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationsGetListPublicationsQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create a new publication
 */
export const publicationsPostCreatePublication = (
    publicationCreate: PublicationCreate
) => {
    return customInstance<PublicationCreatedResponse>({
        url: `/publications`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationCreate,
    })
}

export const getPublicationsPostCreatePublicationMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationsPostCreatePublication>>,
        TError,
        { data: PublicationCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationsPostCreatePublication>>,
    TError,
    { data: PublicationCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationsPostCreatePublication>>,
        { data: PublicationCreate }
    > = props => {
        const { data } = props ?? {}

        return publicationsPostCreatePublication(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationsPostCreatePublicationMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationsPostCreatePublication>>
>
export type PublicationsPostCreatePublicationMutationBody = PublicationCreate
export type PublicationsPostCreatePublicationMutationError = HTTPValidationError

/**
 * @summary Create a new publication
 */
export const usePublicationsPostCreatePublication = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationsPostCreatePublication>>,
        TError,
        { data: PublicationCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationsPostCreatePublication>>,
    TError,
    { data: PublicationCreate },
    TContext
> => {
    const mutationOptions =
        getPublicationsPostCreatePublicationMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get details of a publication
 */
export const publicationsGetDetailPublication = (
    publicationUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<Publication>({
        url: `/publications/${publicationUuid}`,
        method: 'GET',
        signal,
    })
}

export const getPublicationsGetDetailPublicationQueryKey = (
    publicationUuid: string
) => {
    return [`/publications/${publicationUuid}`] as const
}

export const getPublicationsGetDetailPublicationQueryOptions = <
    TData = Awaited<ReturnType<typeof publicationsGetDetailPublication>>,
    TError = HTTPValidationError,
>(
    publicationUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationsGetDetailPublication>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getPublicationsGetDetailPublicationQueryKey(publicationUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof publicationsGetDetailPublication>>
    > = ({ signal }) =>
        publicationsGetDetailPublication(publicationUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!publicationUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof publicationsGetDetailPublication>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type PublicationsGetDetailPublicationQueryResult = NonNullable<
    Awaited<ReturnType<typeof publicationsGetDetailPublication>>
>
export type PublicationsGetDetailPublicationQueryError = HTTPValidationError

/**
 * @summary Get details of a publication
 */
export const usePublicationsGetDetailPublication = <
    TData = Awaited<ReturnType<typeof publicationsGetDetailPublication>>,
    TError = HTTPValidationError,
>(
    publicationUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof publicationsGetDetailPublication>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getPublicationsGetDetailPublicationQueryOptions(
        publicationUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit an existing publication
 */
export const publicationsPostEditPublication = (
    publicationUuid: string,
    publicationEdit: PublicationEdit
) => {
    return customInstance<ResponseOK>({
        url: `/publications/${publicationUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: publicationEdit,
    })
}

export const getPublicationsPostEditPublicationMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationsPostEditPublication>>,
        TError,
        { publicationUuid: string; data: PublicationEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof publicationsPostEditPublication>>,
    TError,
    { publicationUuid: string; data: PublicationEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof publicationsPostEditPublication>>,
        { publicationUuid: string; data: PublicationEdit }
    > = props => {
        const { publicationUuid, data } = props ?? {}

        return publicationsPostEditPublication(publicationUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PublicationsPostEditPublicationMutationResult = NonNullable<
    Awaited<ReturnType<typeof publicationsPostEditPublication>>
>
export type PublicationsPostEditPublicationMutationBody = PublicationEdit
export type PublicationsPostEditPublicationMutationError = HTTPValidationError

/**
 * @summary Edit an existing publication
 */
export const usePublicationsPostEditPublication = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof publicationsPostEditPublication>>,
        TError,
        { publicationUuid: string; data: PublicationEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof publicationsPostEditPublication>>,
    TError,
    { publicationUuid: string; data: PublicationEdit },
    TContext
> => {
    const mutationOptions =
        getPublicationsPostEditPublicationMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Search for objects
 */
export const searchGetMssqlSearch = (
    searchRequestData: SearchRequestData,
    params: SearchGetMssqlSearchParams
) => {
    return customInstance<PagedResponseSearchObject>({
        url: `/search`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: searchRequestData,
        params,
    })
}

export const getSearchGetMssqlSearchMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof searchGetMssqlSearch>>,
        TError,
        { data: SearchRequestData; params: SearchGetMssqlSearchParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof searchGetMssqlSearch>>,
    TError,
    { data: SearchRequestData; params: SearchGetMssqlSearchParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof searchGetMssqlSearch>>,
        { data: SearchRequestData; params: SearchGetMssqlSearchParams }
    > = props => {
        const { data, params } = props ?? {}

        return searchGetMssqlSearch(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type SearchGetMssqlSearchMutationResult = NonNullable<
    Awaited<ReturnType<typeof searchGetMssqlSearch>>
>
export type SearchGetMssqlSearchMutationBody = SearchRequestData
export type SearchGetMssqlSearchMutationError = HTTPValidationError

/**
 * @summary Search for objects
 */
export const useSearchGetMssqlSearch = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof searchGetMssqlSearch>>,
        TError,
        { data: SearchRequestData; params: SearchGetMssqlSearchParams },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof searchGetMssqlSearch>>,
    TError,
    { data: SearchRequestData; params: SearchGetMssqlSearchParams },
    TContext
> => {
    const mutationOptions = getSearchGetMssqlSearchMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Search for valid objects
 */
export const searchGetMssqlValidSearch = (
    searchRequestData: SearchRequestData,
    params: SearchGetMssqlValidSearchParams
) => {
    return customInstance<PagedResponseValidSearchObject>({
        url: `/search/valid`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: searchRequestData,
        params,
    })
}

export const getSearchGetMssqlValidSearchMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof searchGetMssqlValidSearch>>,
        TError,
        { data: SearchRequestData; params: SearchGetMssqlValidSearchParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof searchGetMssqlValidSearch>>,
    TError,
    { data: SearchRequestData; params: SearchGetMssqlValidSearchParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof searchGetMssqlValidSearch>>,
        { data: SearchRequestData; params: SearchGetMssqlValidSearchParams }
    > = props => {
        const { data, params } = props ?? {}

        return searchGetMssqlValidSearch(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type SearchGetMssqlValidSearchMutationResult = NonNullable<
    Awaited<ReturnType<typeof searchGetMssqlValidSearch>>
>
export type SearchGetMssqlValidSearchMutationBody = SearchRequestData
export type SearchGetMssqlValidSearchMutationError = HTTPValidationError

/**
 * @summary Search for valid objects
 */
export const useSearchGetMssqlValidSearch = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof searchGetMssqlValidSearch>>,
        TError,
        { data: SearchRequestData; params: SearchGetMssqlValidSearchParams },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof searchGetMssqlValidSearch>>,
    TError,
    { data: SearchRequestData; params: SearchGetMssqlValidSearchParams },
    TContext
> => {
    const mutationOptions = getSearchGetMssqlValidSearchMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary List all objects filterable in short format
 */
export const searchDoListAllLatest = (
    params?: SearchDoListAllLatestParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseGenericObjectShort>({
        url: `/objects/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getSearchDoListAllLatestQueryKey = (
    params?: SearchDoListAllLatestParams
) => {
    return [`/objects/valid`, ...(params ? [params] : [])] as const
}

export const getSearchDoListAllLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof searchDoListAllLatest>>,
    TError = HTTPValidationError,
>(
    params?: SearchDoListAllLatestParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchDoListAllLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getSearchDoListAllLatestQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof searchDoListAllLatest>>
    > = ({ signal }) => searchDoListAllLatest(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof searchDoListAllLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type SearchDoListAllLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchDoListAllLatest>>
>
export type SearchDoListAllLatestQueryError = HTTPValidationError

/**
 * @summary List all objects filterable in short format
 */
export const useSearchDoListAllLatest = <
    TData = Awaited<ReturnType<typeof searchDoListAllLatest>>,
    TError = HTTPValidationError,
>(
    params?: SearchDoListAllLatestParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchDoListAllLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getSearchDoListAllLatestQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the werkingsgebieden
 */
export const sourceWerkingsgebiedenGetListWerkingsgebieden = (
    params?: SourceWerkingsgebiedenGetListWerkingsgebiedenParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseWerkingsgebied>({
        url: `/source-werkingsgebieden`,
        method: 'GET',
        params,
        signal,
    })
}

export const getSourceWerkingsgebiedenGetListWerkingsgebiedenQueryKey = (
    params?: SourceWerkingsgebiedenGetListWerkingsgebiedenParams
) => {
    return [`/source-werkingsgebieden`, ...(params ? [params] : [])] as const
}

export const getSourceWerkingsgebiedenGetListWerkingsgebiedenQueryOptions = <
    TData = Awaited<
        ReturnType<typeof sourceWerkingsgebiedenGetListWerkingsgebieden>
    >,
    TError = HTTPValidationError,
>(
    params?: SourceWerkingsgebiedenGetListWerkingsgebiedenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof sourceWerkingsgebiedenGetListWerkingsgebieden
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getSourceWerkingsgebiedenGetListWerkingsgebiedenQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<typeof sourceWerkingsgebiedenGetListWerkingsgebieden>
        >
    > = ({ signal }) =>
        sourceWerkingsgebiedenGetListWerkingsgebieden(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<
            ReturnType<typeof sourceWerkingsgebiedenGetListWerkingsgebieden>
        >,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type SourceWerkingsgebiedenGetListWerkingsgebiedenQueryResult =
    NonNullable<
        Awaited<
            ReturnType<typeof sourceWerkingsgebiedenGetListWerkingsgebieden>
        >
    >
export type SourceWerkingsgebiedenGetListWerkingsgebiedenQueryError =
    HTTPValidationError

/**
 * @summary List the werkingsgebieden
 */
export const useSourceWerkingsgebiedenGetListWerkingsgebieden = <
    TData = Awaited<
        ReturnType<typeof sourceWerkingsgebiedenGetListWerkingsgebieden>
    >,
    TError = HTTPValidationError,
>(
    params?: SourceWerkingsgebiedenGetListWerkingsgebiedenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof sourceWerkingsgebiedenGetListWerkingsgebieden
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getSourceWerkingsgebiedenGetListWerkingsgebiedenQueryOptions(
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the storage files
 */
export const storageFileGetFilesList = (
    params?: StorageFileGetFilesListParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseStorageFileBasic>({
        url: `/storage-files`,
        method: 'GET',
        params,
        signal,
    })
}

export const getStorageFileGetFilesListQueryKey = (
    params?: StorageFileGetFilesListParams
) => {
    return [`/storage-files`, ...(params ? [params] : [])] as const
}

export const getStorageFileGetFilesListQueryOptions = <
    TData = Awaited<ReturnType<typeof storageFileGetFilesList>>,
    TError = HTTPValidationError,
>(
    params?: StorageFileGetFilesListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof storageFileGetFilesList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getStorageFileGetFilesListQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof storageFileGetFilesList>>
    > = ({ signal }) => storageFileGetFilesList(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof storageFileGetFilesList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type StorageFileGetFilesListQueryResult = NonNullable<
    Awaited<ReturnType<typeof storageFileGetFilesList>>
>
export type StorageFileGetFilesListQueryError = HTTPValidationError

/**
 * @summary List the storage files
 */
export const useStorageFileGetFilesList = <
    TData = Awaited<ReturnType<typeof storageFileGetFilesList>>,
    TError = HTTPValidationError,
>(
    params?: StorageFileGetFilesListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof storageFileGetFilesList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getStorageFileGetFilesListQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Upload an File
 */
export const storageFilePostFilesUpload = (
    bodyStorageFilePostFilesUpload: BodyStorageFilePostFilesUpload
) => {
    const formData = new FormData()
    formData.append('title', bodyStorageFilePostFilesUpload.title)
    formData.append(
        'uploaded_file',
        bodyStorageFilePostFilesUpload.uploaded_file
    )

    return customInstance<UploadFileResponse>({
        url: `/storage-files`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
    })
}

export const getStorageFilePostFilesUploadMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof storageFilePostFilesUpload>>,
        TError,
        { data: BodyStorageFilePostFilesUpload },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof storageFilePostFilesUpload>>,
    TError,
    { data: BodyStorageFilePostFilesUpload },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof storageFilePostFilesUpload>>,
        { data: BodyStorageFilePostFilesUpload }
    > = props => {
        const { data } = props ?? {}

        return storageFilePostFilesUpload(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorageFilePostFilesUploadMutationResult = NonNullable<
    Awaited<ReturnType<typeof storageFilePostFilesUpload>>
>
export type StorageFilePostFilesUploadMutationBody =
    BodyStorageFilePostFilesUpload
export type StorageFilePostFilesUploadMutationError = HTTPValidationError

/**
 * @summary Upload an File
 */
export const useStorageFilePostFilesUpload = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof storageFilePostFilesUpload>>,
        TError,
        { data: BodyStorageFilePostFilesUpload },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof storageFilePostFilesUpload>>,
    TError,
    { data: BodyStorageFilePostFilesUpload },
    TContext
> => {
    const mutationOptions =
        getStorageFilePostFilesUploadMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get storage file details
 */
export const storageFileGetFilesDetail = (
    fileUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<StorageFileBasic>({
        url: `/storage-files/${fileUuid}`,
        method: 'GET',
        signal,
    })
}

export const getStorageFileGetFilesDetailQueryKey = (fileUuid: string) => {
    return [`/storage-files/${fileUuid}`] as const
}

export const getStorageFileGetFilesDetailQueryOptions = <
    TData = Awaited<ReturnType<typeof storageFileGetFilesDetail>>,
    TError = HTTPValidationError,
>(
    fileUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof storageFileGetFilesDetail>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getStorageFileGetFilesDetailQueryKey(fileUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof storageFileGetFilesDetail>>
    > = ({ signal }) => storageFileGetFilesDetail(fileUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!fileUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof storageFileGetFilesDetail>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type StorageFileGetFilesDetailQueryResult = NonNullable<
    Awaited<ReturnType<typeof storageFileGetFilesDetail>>
>
export type StorageFileGetFilesDetailQueryError = HTTPValidationError

/**
 * @summary Get storage file details
 */
export const useStorageFileGetFilesDetail = <
    TData = Awaited<ReturnType<typeof storageFileGetFilesDetail>>,
    TError = HTTPValidationError,
>(
    fileUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof storageFileGetFilesDetail>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getStorageFileGetFilesDetailQueryOptions(
        fileUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the users
 */
export const userGetListUsers = (
    params?: UserGetListUsersParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseUser>({
        url: `/users`,
        method: 'GET',
        params,
        signal,
    })
}

export const getUserGetListUsersQueryKey = (
    params?: UserGetListUsersParams
) => {
    return [`/users`, ...(params ? [params] : [])] as const
}

export const getUserGetListUsersQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetListUsers>>,
    TError = HTTPValidationError,
>(
    params?: UserGetListUsersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userGetListUsers>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getUserGetListUsersQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof userGetListUsers>>
    > = ({ signal }) => userGetListUsers(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetListUsers>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type UserGetListUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof userGetListUsers>>
>
export type UserGetListUsersQueryError = HTTPValidationError

/**
 * @summary List the users
 */
export const useUserGetListUsers = <
    TData = Awaited<ReturnType<typeof userGetListUsers>>,
    TError = HTTPValidationError,
>(
    params?: UserGetListUsersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userGetListUsers>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getUserGetListUsersQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Create new user
 */
export const userPostCreateUser = (userCreate: UserCreate) => {
    return customInstance<UserCreateResponse>({
        url: `/users`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userCreate,
    })
}

export const getUserPostCreateUserMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostCreateUser>>,
        TError,
        { data: UserCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof userPostCreateUser>>,
    TError,
    { data: UserCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof userPostCreateUser>>,
        { data: UserCreate }
    > = props => {
        const { data } = props ?? {}

        return userPostCreateUser(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UserPostCreateUserMutationResult = NonNullable<
    Awaited<ReturnType<typeof userPostCreateUser>>
>
export type UserPostCreateUserMutationBody = UserCreate
export type UserPostCreateUserMutationError = HTTPValidationError

/**
 * @summary Create new user
 */
export const useUserPostCreateUser = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostCreateUser>>,
        TError,
        { data: UserCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof userPostCreateUser>>,
    TError,
    { data: UserCreate },
    TContext
> => {
    const mutationOptions = getUserPostCreateUserMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Search the users
 */
export const userGetSearchUsers = (
    params?: UserGetSearchUsersParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseUser>({
        url: `/users/search`,
        method: 'GET',
        params,
        signal,
    })
}

export const getUserGetSearchUsersQueryKey = (
    params?: UserGetSearchUsersParams
) => {
    return [`/users/search`, ...(params ? [params] : [])] as const
}

export const getUserGetSearchUsersQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetSearchUsers>>,
    TError = HTTPValidationError,
>(
    params?: UserGetSearchUsersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userGetSearchUsers>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getUserGetSearchUsersQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof userGetSearchUsers>>
    > = ({ signal }) => userGetSearchUsers(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetSearchUsers>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type UserGetSearchUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof userGetSearchUsers>>
>
export type UserGetSearchUsersQueryError = HTTPValidationError

/**
 * @summary Search the users
 */
export const useUserGetSearchUsers = <
    TData = Awaited<ReturnType<typeof userGetSearchUsers>>,
    TError = HTTPValidationError,
>(
    params?: UserGetSearchUsersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userGetSearchUsers>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getUserGetSearchUsersQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get a user
 */
export const userViewGetUser = (userUuid: string, signal?: AbortSignal) => {
    return customInstance<User>({
        url: `/users/${userUuid}`,
        method: 'GET',
        signal,
    })
}

export const getUserViewGetUserQueryKey = (userUuid: string) => {
    return [`/users/${userUuid}`] as const
}

export const getUserViewGetUserQueryOptions = <
    TData = Awaited<ReturnType<typeof userViewGetUser>>,
    TError = HTTPValidationError,
>(
    userUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userViewGetUser>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getUserViewGetUserQueryKey(userUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof userViewGetUser>>
    > = ({ signal }) => userViewGetUser(userUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!userUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof userViewGetUser>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type UserViewGetUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof userViewGetUser>>
>
export type UserViewGetUserQueryError = HTTPValidationError

/**
 * @summary Get a user
 */
export const useUserViewGetUser = <
    TData = Awaited<ReturnType<typeof userViewGetUser>>,
    TError = HTTPValidationError,
>(
    userUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof userViewGetUser>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getUserViewGetUserQueryOptions(userUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit user
 */
export const userPostEditUser = (userUuid: string, editUser: EditUser) => {
    return customInstance<ResponseOK>({
        url: `/users/${userUuid}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editUser,
    })
}

export const getUserPostEditUserMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostEditUser>>,
        TError,
        { userUuid: string; data: EditUser },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof userPostEditUser>>,
    TError,
    { userUuid: string; data: EditUser },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof userPostEditUser>>,
        { userUuid: string; data: EditUser }
    > = props => {
        const { userUuid, data } = props ?? {}

        return userPostEditUser(userUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UserPostEditUserMutationResult = NonNullable<
    Awaited<ReturnType<typeof userPostEditUser>>
>
export type UserPostEditUserMutationBody = EditUser
export type UserPostEditUserMutationError = HTTPValidationError

/**
 * @summary Edit user
 */
export const useUserPostEditUser = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostEditUser>>,
        TError,
        { userUuid: string; data: EditUser },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof userPostEditUser>>,
    TError,
    { userUuid: string; data: EditUser },
    TContext
> => {
    const mutationOptions = getUserPostEditUserMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Reset user password
 */
export const userPostResetUserPassword = (userUuid: string) => {
    return customInstance<ResetPasswordResponse>({
        url: `/users/${userUuid}/reset-password`,
        method: 'POST',
    })
}

export const getUserPostResetUserPasswordMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostResetUserPassword>>,
        TError,
        { userUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof userPostResetUserPassword>>,
    TError,
    { userUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof userPostResetUserPassword>>,
        { userUuid: string }
    > = props => {
        const { userUuid } = props ?? {}

        return userPostResetUserPassword(userUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type UserPostResetUserPasswordMutationResult = NonNullable<
    Awaited<ReturnType<typeof userPostResetUserPassword>>
>

export type UserPostResetUserPasswordMutationError = HTTPValidationError

/**
 * @summary Reset user password
 */
export const useUserPostResetUserPassword = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userPostResetUserPassword>>,
        TError,
        { userUuid: string },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof userPostResetUserPassword>>,
    TError,
    { userUuid: string },
    TContext
> => {
    const mutationOptions = getUserPostResetUserPasswordMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid ambitie lineages and shows the latest object of each
 */
export const ambitieListValidLineages = (
    params?: AmbitieListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseAmbitieBasic>({
        url: `/ambities/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getAmbitieListValidLineagesQueryKey = (
    params?: AmbitieListValidLineagesParams
) => {
    return [`/ambities/valid`, ...(params ? [params] : [])] as const
}

export const getAmbitieListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: AmbitieListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getAmbitieListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieListValidLineages>>
    > = ({ signal }) => ambitieListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieListValidLineages>>
>
export type AmbitieListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid ambitie lineages and shows the latest object of each
 */
export const useAmbitieListValidLineages = <
    TData = Awaited<ReturnType<typeof ambitieListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: AmbitieListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid ambitie of a single lineage
 */
export const ambitieListValidLineageTree = (
    lineageId: number,
    params?: AmbitieListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseAmbitieBasic>({
        url: `/ambities/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getAmbitieListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: AmbitieListValidLineageTreeParams
) => {
    return [
        `/ambities/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getAmbitieListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: AmbitieListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitieListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieListValidLineageTree>>
    > = ({ signal }) => ambitieListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieListValidLineageTree>>
>
export type AmbitieListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid ambitie of a single lineage
 */
export const useAmbitieListValidLineageTree = <
    TData = Awaited<ReturnType<typeof ambitieListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: AmbitieListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific ambitie by uuid
 */
export const ambitieViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieFull>({
        url: `/ambities/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getAmbitieViewObjectVersionQueryKey = (objectUuid: string) => {
    return [`/ambities/version/${objectUuid}`] as const
}

export const getAmbitieViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitieViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieViewObjectVersion>>
    > = ({ signal }) => ambitieViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieViewObjectVersion>>
>
export type AmbitieViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific ambitie by uuid
 */
export const useAmbitieViewObjectVersion = <
    TData = Awaited<ReturnType<typeof ambitieViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for ambitie by their lineage id
 */
export const ambitieViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieFull>({
        url: `/ambities/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getAmbitieViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/ambities/latest/${lineageId}`] as const
}

export const getAmbitieViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getAmbitieViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieViewObjectLatest>>
    > = ({ signal }) => ambitieViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieViewObjectLatest>>
>
export type AmbitieViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for ambitie by their lineage id
 */
export const useAmbitieViewObjectLatest = <
    TData = Awaited<ReturnType<typeof ambitieViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given ambitie lineage
 */
export const ambitieGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/ambities/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getAmbitieGetRelationsListQueryKey = (lineageId: number) => {
    return [`/ambities/relations/${lineageId}`] as const
}

export const getAmbitieGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getAmbitieGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieGetRelationsList>>
    > = ({ signal }) => ambitieGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieGetRelationsList>>
>
export type AmbitieGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given ambitie lineage
 */
export const useAmbitieGetRelationsList = <
    TData = Awaited<ReturnType<typeof ambitieGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given ambitie lineage
 */
export const ambitiePostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/ambities/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getAmbitiePostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return ambitiePostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AmbitiePostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>
>
export type AmbitiePostRelationsOverwriteMutationBody = WriteRelation[]
export type AmbitiePostRelationsOverwriteMutationError = HTTPValidationError

/**
 * @summary Overwrite all relations of the given ambitie lineage
 */
export const useAmbitiePostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof ambitiePostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getAmbitiePostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const ambitieEditObjectStatic = (
    lineageId: number,
    ambitieStaticPostStatics: AmbitieStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/ambitie/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: ambitieStaticPostStatics,
    })
}

export const getAmbitieEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitieEditObjectStatic>>,
        TError,
        { lineageId: number; data: AmbitieStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof ambitieEditObjectStatic>>,
    TError,
    { lineageId: number; data: AmbitieStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof ambitieEditObjectStatic>>,
        { lineageId: number; data: AmbitieStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return ambitieEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AmbitieEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof ambitieEditObjectStatic>>
>
export type AmbitieEditObjectStaticMutationBody = AmbitieStaticPostStatics
export type AmbitieEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useAmbitieEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitieEditObjectStatic>>,
        TError,
        { lineageId: number; data: AmbitieStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof ambitieEditObjectStatic>>,
    TError,
    { lineageId: number; data: AmbitieStaticPostStatics },
    TContext
> => {
    const mutationOptions = getAmbitieEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the ambitie lineage in a module
 */
export const ambitiePostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    ambitiePatch: AmbitiePatch
) => {
    return customInstance<AmbitieUUID>({
        url: `/modules/${moduleId}/object/ambitie/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: ambitiePatch,
    })
}

export const getAmbitiePostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitiePostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: AmbitiePatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof ambitiePostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: AmbitiePatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof ambitiePostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: AmbitiePatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return ambitiePostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AmbitiePostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof ambitiePostModulePatchObject>>
>
export type AmbitiePostModulePatchObjectMutationBody = AmbitiePatch
export type AmbitiePostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the ambitie lineage in a module
 */
export const useAmbitiePostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof ambitiePostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: AmbitiePatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof ambitiePostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: AmbitiePatch },
    TContext
> => {
    const mutationOptions =
        getAmbitiePostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the ambitie of a single lineage in a module
 */
export const ambitieGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: AmbitieGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseAmbitieExtended>({
        url: `/modules/${moduleId}/object/ambitie/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getAmbitieGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: AmbitieGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/ambitie/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getAmbitieGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: AmbitieGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitieGetModuleListLineageTreeQueryKey(moduleId, lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>
    > = ({ signal }) =>
        ambitieGetModuleListLineageTree(moduleId, lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>
>
export type AmbitieGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the ambitie of a single lineage in a module
 */
export const useAmbitieGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: AmbitieGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for ambitie by their lineage id in a module
 */
export const ambitieViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieFull>({
        url: `/modules/${moduleId}/object/ambitie/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getAmbitieViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [`/modules/${moduleId}/object/ambitie/latest/${lineageId}`] as const
}

export const getAmbitieViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitieViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>
    > = ({ signal }) =>
        ambitieViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>
>
export type AmbitieViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for ambitie by their lineage id in a module
 */
export const useAmbitieViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific ambitie by uuid in a module
 */
export const getModulesObjectAmbitieVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieFull>({
        url: `/modules/${moduleId}/object/ambitie/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectAmbitieVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/ambitie/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectAmbitieVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectAmbitieVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>
    > = ({ signal }) =>
        getModulesObjectAmbitieVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectAmbitieVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>
>
export type GetModulesObjectAmbitieVersionQueryError = HTTPValidationError

/**
 * @summary Get specific ambitie by uuid in a module
 */
export const useGetModulesObjectAmbitieVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectAmbitieVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectAmbitieVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const ambitieGetListActiveModuleObjects = (
    lineageId: number,
    params: AmbitieGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/ambitie/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getAmbitieGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: AmbitieGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/ambitie/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getAmbitieGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: AmbitieGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getAmbitieGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>
    > = ({ signal }) =>
        ambitieGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type AmbitieGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>
>
export type AmbitieGetListActiveModuleObjectsQueryError = HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useAmbitieGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: AmbitieGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof ambitieGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getAmbitieGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific ambitie by uuid in a module
 */
export const getRevisionsAmbitieVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<AmbitieFull>({
        url: `/revisions/${moduleId}/ambitie/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsAmbitieVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [`/revisions/${moduleId}/ambitie/version/${objectUuid}`] as const
}

export const getGetRevisionsAmbitieVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsAmbitieVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>
    > = ({ signal }) => getRevisionsAmbitieVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsAmbitieVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>
>
export type GetRevisionsAmbitieVersionQueryError = HTTPValidationError

/**
 * @summary Get specific ambitie by uuid in a module
 */
export const useGetRevisionsAmbitieVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsAmbitieVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsAmbitieVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidsdoel lineages and shows the latest object of each
 */
export const beleidsdoelListValidLineages = (
    params?: BeleidsdoelListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsdoelBasic>({
        url: `/beleidsdoelen/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsdoelListValidLineagesQueryKey = (
    params?: BeleidsdoelListValidLineagesParams
) => {
    return [`/beleidsdoelen/valid`, ...(params ? [params] : [])] as const
}

export const getBeleidsdoelListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidsdoelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelListValidLineages>>
    > = ({ signal }) => beleidsdoelListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelListValidLineages>>
>
export type BeleidsdoelListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidsdoel lineages and shows the latest object of each
 */
export const useBeleidsdoelListValidLineages = <
    TData = Awaited<ReturnType<typeof beleidsdoelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidsdoelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidsdoel of a single lineage
 */
export const beleidsdoelListValidLineageTree = (
    lineageId: number,
    params?: BeleidsdoelListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsdoelBasic>({
        url: `/beleidsdoelen/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsdoelListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: BeleidsdoelListValidLineageTreeParams
) => {
    return [
        `/beleidsdoelen/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsdoelListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidsdoelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>
    > = ({ signal }) =>
        beleidsdoelListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>
>
export type BeleidsdoelListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidsdoel of a single lineage
 */
export const useBeleidsdoelListValidLineageTree = <
    TData = Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidsdoelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsdoel by uuid
 */
export const beleidsdoelViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelFull>({
        url: `/beleidsdoelen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsdoelViewObjectVersionQueryKey = (objectUuid: string) => {
    return [`/beleidsdoelen/version/${objectUuid}`] as const
}

export const getBeleidsdoelViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>
    > = ({ signal }) => beleidsdoelViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>
>
export type BeleidsdoelViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsdoel by uuid
 */
export const useBeleidsdoelViewObjectVersion = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id
 */
export const beleidsdoelViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelFull>({
        url: `/beleidsdoelen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsdoelViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/beleidsdoelen/latest/${lineageId}`] as const
}

export const getBeleidsdoelViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>
    > = ({ signal }) => beleidsdoelViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>
>
export type BeleidsdoelViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id
 */
export const useBeleidsdoelViewObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given beleidsdoel lineage
 */
export const beleidsdoelGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/beleidsdoelen/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsdoelGetRelationsListQueryKey = (lineageId: number) => {
    return [`/beleidsdoelen/relations/${lineageId}`] as const
}

export const getBeleidsdoelGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>
    > = ({ signal }) => beleidsdoelGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>
>
export type BeleidsdoelGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given beleidsdoel lineage
 */
export const useBeleidsdoelGetRelationsList = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given beleidsdoel lineage
 */
export const beleidsdoelPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsdoelen/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getBeleidsdoelPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsdoelPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsdoelPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>
>
export type BeleidsdoelPostRelationsOverwriteMutationBody = WriteRelation[]
export type BeleidsdoelPostRelationsOverwriteMutationError = HTTPValidationError

/**
 * @summary Overwrite all relations of the given beleidsdoel lineage
 */
export const useBeleidsdoelPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsdoelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getBeleidsdoelPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const beleidsdoelEditObjectStatic = (
    lineageId: number,
    beleidsdoelStaticPostStatics: BeleidsdoelStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsdoel/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelStaticPostStatics,
    })
}

export const getBeleidsdoelEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidsdoelStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidsdoelStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>,
        { lineageId: number; data: BeleidsdoelStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsdoelEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsdoelEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>
>
export type BeleidsdoelEditObjectStaticMutationBody =
    BeleidsdoelStaticPostStatics
export type BeleidsdoelEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useBeleidsdoelEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidsdoelStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsdoelEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidsdoelStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getBeleidsdoelEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the beleidsdoel lineage in a module
 */
export const beleidsdoelPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    beleidsdoelPatch: BeleidsdoelPatch
) => {
    return customInstance<BeleidsdoelUUID>({
        url: `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsdoelPatch,
    })
}

export const getBeleidsdoelPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return beleidsdoelPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsdoelPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>
>
export type BeleidsdoelPostModulePatchObjectMutationBody = BeleidsdoelPatch
export type BeleidsdoelPostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the beleidsdoel lineage in a module
 */
export const useBeleidsdoelPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsdoelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidsdoelPatch },
    TContext
> => {
    const mutationOptions =
        getBeleidsdoelPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the beleidsdoel of a single lineage in a module
 */
export const beleidsdoelGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: BeleidsdoelGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsdoelExtended>({
        url: `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsdoelGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: BeleidsdoelGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/beleidsdoel/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsdoelGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidsdoelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>
    > = ({ signal }) =>
        beleidsdoelGetModuleListLineageTree(moduleId, lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>
>
export type BeleidsdoelGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the beleidsdoel of a single lineage in a module
 */
export const useBeleidsdoelGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidsdoelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id in a module
 */
export const beleidsdoelViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelFull>({
        url: `/modules/${moduleId}/object/beleidsdoel/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsdoelViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/beleidsdoel/latest/${lineageId}`,
    ] as const
}

export const getBeleidsdoelViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>
    > = ({ signal }) =>
        beleidsdoelViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>
>
export type BeleidsdoelViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidsdoel by their lineage id in a module
 */
export const useBeleidsdoelViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsdoelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsdoel by uuid in a module
 */
export const getModulesObjectBeleidsdoelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelFull>({
        url: `/modules/${moduleId}/object/beleidsdoel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectBeleidsdoelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/beleidsdoel/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectBeleidsdoelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectBeleidsdoelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>
    > = ({ signal }) =>
        getModulesObjectBeleidsdoelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectBeleidsdoelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>
>
export type GetModulesObjectBeleidsdoelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsdoel by uuid in a module
 */
export const useGetModulesObjectBeleidsdoelVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidsdoelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectBeleidsdoelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const beleidsdoelGetListActiveModuleObjects = (
    lineageId: number,
    params: BeleidsdoelGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/beleidsdoel/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsdoelGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: BeleidsdoelGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/beleidsdoel/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsdoelGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidsdoelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsdoelGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsdoelGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsdoelGetListActiveModuleObjects>>
    > = ({ signal }) =>
        beleidsdoelGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsdoelGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsdoelGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsdoelGetListActiveModuleObjects>>
>
export type BeleidsdoelGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useBeleidsdoelGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof beleidsdoelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidsdoelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsdoelGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsdoelGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsdoel by uuid in a module
 */
export const getRevisionsBeleidsdoelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsdoelFull>({
        url: `/revisions/${moduleId}/beleidsdoel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsBeleidsdoelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [`/revisions/${moduleId}/beleidsdoel/version/${objectUuid}`] as const
}

export const getGetRevisionsBeleidsdoelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsBeleidsdoelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>
    > = ({ signal }) =>
        getRevisionsBeleidsdoelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsBeleidsdoelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>
>
export type GetRevisionsBeleidsdoelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsdoel by uuid in a module
 */
export const useGetRevisionsBeleidsdoelVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidsdoelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsBeleidsdoelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidskeuze lineages and shows the latest object of each
 */
export const beleidskeuzeListValidLineages = (
    params?: BeleidskeuzeListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidskeuzeBasic>({
        url: `/beleidskeuzes/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidskeuzeListValidLineagesQueryKey = (
    params?: BeleidskeuzeListValidLineagesParams
) => {
    return [`/beleidskeuzes/valid`, ...(params ? [params] : [])] as const
}

export const getBeleidskeuzeListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidskeuzeListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>
    > = ({ signal }) => beleidskeuzeListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>
>
export type BeleidskeuzeListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidskeuze lineages and shows the latest object of each
 */
export const useBeleidskeuzeListValidLineages = <
    TData = Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidskeuzeListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidskeuze of a single lineage
 */
export const beleidskeuzeListValidLineageTree = (
    lineageId: number,
    params?: BeleidskeuzeListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidskeuzeBasic>({
        url: `/beleidskeuzes/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidskeuzeListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: BeleidskeuzeListValidLineageTreeParams
) => {
    return [
        `/beleidskeuzes/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidskeuzeListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidskeuzeListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>
    > = ({ signal }) =>
        beleidskeuzeListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>
>
export type BeleidskeuzeListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidskeuze of a single lineage
 */
export const useBeleidskeuzeListValidLineageTree = <
    TData = Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidskeuzeListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidskeuze by uuid
 */
export const beleidskeuzeViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeFull>({
        url: `/beleidskeuzes/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidskeuzeViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/beleidskeuzes/version/${objectUuid}`] as const
}

export const getBeleidskeuzeViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>
    > = ({ signal }) => beleidskeuzeViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>
>
export type BeleidskeuzeViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidskeuze by uuid
 */
export const useBeleidskeuzeViewObjectVersion = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id
 */
export const beleidskeuzeViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeFull>({
        url: `/beleidskeuzes/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidskeuzeViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/beleidskeuzes/latest/${lineageId}`] as const
}

export const getBeleidskeuzeViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>
    > = ({ signal }) => beleidskeuzeViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>
>
export type BeleidskeuzeViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id
 */
export const useBeleidskeuzeViewObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given beleidskeuze lineage
 */
export const beleidskeuzeGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/beleidskeuzes/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidskeuzeGetRelationsListQueryKey = (lineageId: number) => {
    return [`/beleidskeuzes/relations/${lineageId}`] as const
}

export const getBeleidskeuzeGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>
    > = ({ signal }) => beleidskeuzeGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>
>
export type BeleidskeuzeGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given beleidskeuze lineage
 */
export const useBeleidskeuzeGetRelationsList = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given beleidskeuze lineage
 */
export const beleidskeuzePostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuzes/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getBeleidskeuzePostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzePostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidskeuzePostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>
>
export type BeleidskeuzePostRelationsOverwriteMutationBody = WriteRelation[]
export type BeleidskeuzePostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given beleidskeuze lineage
 */
export const useBeleidskeuzePostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidskeuzePostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getBeleidskeuzePostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const beleidskeuzeEditObjectStatic = (
    lineageId: number,
    beleidskeuzeStaticPostStatics: BeleidskeuzeStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzeStaticPostStatics,
    })
}

export const getBeleidskeuzeEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidskeuzeStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidskeuzeStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>,
        { lineageId: number; data: BeleidskeuzeStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzeEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidskeuzeEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>
>
export type BeleidskeuzeEditObjectStaticMutationBody =
    BeleidskeuzeStaticPostStatics
export type BeleidskeuzeEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useBeleidskeuzeEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidskeuzeStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidskeuzeEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidskeuzeStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getBeleidskeuzeEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all acknowledged relations of the given beleidskeuze lineage
 */
export const beleidskeuzeGetAcknowledgedRelationList = (
    lineageId: number,
    params?: BeleidskeuzeGetAcknowledgedRelationListParams,
    signal?: AbortSignal
) => {
    return customInstance<AcknowledgedRelation[]>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidskeuzeGetAcknowledgedRelationListQueryKey = (
    lineageId: number,
    params?: BeleidskeuzeGetAcknowledgedRelationListParams
) => {
    return [
        `/beleidskeuze/acknowledged-relations/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidskeuzeGetAcknowledgedRelationListQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidskeuzeGetAcknowledgedRelationListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeGetAcknowledgedRelationListQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>>
    > = ({ signal }) =>
        beleidskeuzeGetAcknowledgedRelationList(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeGetAcknowledgedRelationListQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>>
>
export type BeleidskeuzeGetAcknowledgedRelationListQueryError =
    HTTPValidationError

/**
 * @summary Get all acknowledged relations of the given beleidskeuze lineage
 */
export const useBeleidskeuzeGetAcknowledgedRelationList = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidskeuzeGetAcknowledgedRelationListParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetAcknowledgedRelationList>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeGetAcknowledgedRelationListQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Request an acknowledged relation to another object
 */
export const beleidskeuzeGetAcknowledgedRelationRequest = (
    lineageId: number,
    requestAcknowledgedRelation: RequestAcknowledgedRelation
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: requestAcknowledgedRelation,
    })
}

export const getBeleidskeuzeGetAcknowledgedRelationRequestMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>,
        TError,
        { lineageId: number; data: RequestAcknowledgedRelation },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>,
    TError,
    { lineageId: number; data: RequestAcknowledgedRelation },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>,
        { lineageId: number; data: RequestAcknowledgedRelation }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzeGetAcknowledgedRelationRequest(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidskeuzeGetAcknowledgedRelationRequestMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>
    >
export type BeleidskeuzeGetAcknowledgedRelationRequestMutationBody =
    RequestAcknowledgedRelation
export type BeleidskeuzeGetAcknowledgedRelationRequestMutationError =
    HTTPValidationError

/**
 * @summary Request an acknowledged relation to another object
 */
export const useBeleidskeuzeGetAcknowledgedRelationRequest = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>,
        TError,
        { lineageId: number; data: RequestAcknowledgedRelation },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidskeuzeGetAcknowledgedRelationRequest>>,
    TError,
    { lineageId: number; data: RequestAcknowledgedRelation },
    TContext
> => {
    const mutationOptions =
        getBeleidskeuzeGetAcknowledgedRelationRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit an acknowledged relation
 */
export const beleidskeuzePostAcknowledgedRelationEdit = (
    lineageId: number,
    editAcknowledgedRelation: EditAcknowledgedRelation
) => {
    return customInstance<ResponseOK>({
        url: `/beleidskeuze/acknowledged-relations/${lineageId}/edit`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editAcknowledgedRelation,
    })
}

export const getBeleidskeuzePostAcknowledgedRelationEditMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>,
        TError,
        { lineageId: number; data: EditAcknowledgedRelation },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>,
    TError,
    { lineageId: number; data: EditAcknowledgedRelation },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>,
        { lineageId: number; data: EditAcknowledgedRelation }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidskeuzePostAcknowledgedRelationEdit(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidskeuzePostAcknowledgedRelationEditMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>
    >
export type BeleidskeuzePostAcknowledgedRelationEditMutationBody =
    EditAcknowledgedRelation
export type BeleidskeuzePostAcknowledgedRelationEditMutationError =
    HTTPValidationError

/**
 * @summary Edit an acknowledged relation
 */
export const useBeleidskeuzePostAcknowledgedRelationEdit = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>,
        TError,
        { lineageId: number; data: EditAcknowledgedRelation },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidskeuzePostAcknowledgedRelationEdit>>,
    TError,
    { lineageId: number; data: EditAcknowledgedRelation },
    TContext
> => {
    const mutationOptions =
        getBeleidskeuzePostAcknowledgedRelationEditMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the beleidskeuze lineage in a module
 */
export const beleidskeuzePostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    beleidskeuzePatch: BeleidskeuzePatch
) => {
    return customInstance<BeleidskeuzeUUID>({
        url: `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: beleidskeuzePatch,
    })
}

export const getBeleidskeuzePostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return beleidskeuzePostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidskeuzePostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>
>
export type BeleidskeuzePostModulePatchObjectMutationBody = BeleidskeuzePatch
export type BeleidskeuzePostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the beleidskeuze lineage in a module
 */
export const useBeleidskeuzePostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidskeuzePostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidskeuzePatch },
    TContext
> => {
    const mutationOptions =
        getBeleidskeuzePostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the beleidskeuze of a single lineage in a module
 */
export const beleidskeuzeGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: BeleidskeuzeGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidskeuzeExtended>({
        url: `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidskeuzeGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: BeleidskeuzeGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/beleidskeuze/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidskeuzeGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidskeuzeGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeGetModuleListLineageTree>>
    > = ({ signal }) =>
        beleidskeuzeGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeGetModuleListLineageTree>>
>
export type BeleidskeuzeGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the beleidskeuze of a single lineage in a module
 */
export const useBeleidskeuzeGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidskeuzeGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id in a module
 */
export const beleidskeuzeViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeFull>({
        url: `/modules/${moduleId}/object/beleidskeuze/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidskeuzeViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/beleidskeuze/latest/${lineageId}`,
    ] as const
}

export const getBeleidskeuzeViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>
    > = ({ signal }) =>
        beleidskeuzeViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>
>
export type BeleidskeuzeViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidskeuze by their lineage id in a module
 */
export const useBeleidskeuzeViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidskeuzeViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidskeuze by uuid in a module
 */
export const getModulesObjectBeleidskeuzeVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeFull>({
        url: `/modules/${moduleId}/object/beleidskeuze/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectBeleidskeuzeVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/beleidskeuze/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectBeleidskeuzeVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectBeleidskeuzeVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>
    > = ({ signal }) =>
        getModulesObjectBeleidskeuzeVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectBeleidskeuzeVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>
>
export type GetModulesObjectBeleidskeuzeVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidskeuze by uuid in a module
 */
export const useGetModulesObjectBeleidskeuzeVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidskeuzeVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectBeleidskeuzeVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const beleidskeuzeGetListActiveModuleObjects = (
    lineageId: number,
    params: BeleidskeuzeGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/objects/beleidskeuze/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidskeuzeGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: BeleidskeuzeGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/objects/beleidskeuze/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidskeuzeGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidskeuzeGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidskeuzeGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>>
    > = ({ signal }) =>
        beleidskeuzeGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidskeuzeGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>>
>
export type BeleidskeuzeGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useBeleidskeuzeGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidskeuzeGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidskeuzeGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidskeuzeGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidskeuze by uuid in a module
 */
export const getRevisionsBeleidskeuzeVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidskeuzeFull>({
        url: `/revisions/${moduleId}/beleidskeuze/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsBeleidskeuzeVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/beleidskeuze/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsBeleidskeuzeVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsBeleidskeuzeVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>
    > = ({ signal }) =>
        getRevisionsBeleidskeuzeVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsBeleidskeuzeVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>
>
export type GetRevisionsBeleidskeuzeVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidskeuze by uuid in a module
 */
export const useGetRevisionsBeleidskeuzeVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidskeuzeVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsBeleidskeuzeVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidsregel lineages and shows the latest object of each
 */
export const beleidsregelListValidLineages = (
    params?: BeleidsregelListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsregelBasic>({
        url: `/beleidsregels/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsregelListValidLineagesQueryKey = (
    params?: BeleidsregelListValidLineagesParams
) => {
    return [`/beleidsregels/valid`, ...(params ? [params] : [])] as const
}

export const getBeleidsregelListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidsregelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelListValidLineages>>
    > = ({ signal }) => beleidsregelListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelListValidLineages>>
>
export type BeleidsregelListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidsregel lineages and shows the latest object of each
 */
export const useBeleidsregelListValidLineages = <
    TData = Awaited<ReturnType<typeof beleidsregelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: BeleidsregelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid beleidsregel of a single lineage
 */
export const beleidsregelListValidLineageTree = (
    lineageId: number,
    params?: BeleidsregelListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsregelBasic>({
        url: `/beleidsregels/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsregelListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: BeleidsregelListValidLineageTreeParams
) => {
    return [
        `/beleidsregels/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsregelListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidsregelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>
    > = ({ signal }) =>
        beleidsregelListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>
>
export type BeleidsregelListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid beleidsregel of a single lineage
 */
export const useBeleidsregelListValidLineageTree = <
    TData = Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: BeleidsregelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsregel by uuid
 */
export const beleidsregelViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelFull>({
        url: `/beleidsregels/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsregelViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/beleidsregels/version/${objectUuid}`] as const
}

export const getBeleidsregelViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>
    > = ({ signal }) => beleidsregelViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>
>
export type BeleidsregelViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsregel by uuid
 */
export const useBeleidsregelViewObjectVersion = <
    TData = Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidsregel by their lineage id
 */
export const beleidsregelViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelFull>({
        url: `/beleidsregels/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsregelViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/beleidsregels/latest/${lineageId}`] as const
}

export const getBeleidsregelViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>
    > = ({ signal }) => beleidsregelViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>
>
export type BeleidsregelViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidsregel by their lineage id
 */
export const useBeleidsregelViewObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given beleidsregel lineage
 */
export const beleidsregelGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/beleidsregels/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsregelGetRelationsListQueryKey = (lineageId: number) => {
    return [`/beleidsregels/relations/${lineageId}`] as const
}

export const getBeleidsregelGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelGetRelationsList>>
    > = ({ signal }) => beleidsregelGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelGetRelationsList>>
>
export type BeleidsregelGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given beleidsregel lineage
 */
export const useBeleidsregelGetRelationsList = <
    TData = Awaited<ReturnType<typeof beleidsregelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given beleidsregel lineage
 */
export const beleidsregelPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsregels/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getBeleidsregelPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsregelPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsregelPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>
>
export type BeleidsregelPostRelationsOverwriteMutationBody = WriteRelation[]
export type BeleidsregelPostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given beleidsregel lineage
 */
export const useBeleidsregelPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsregelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getBeleidsregelPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const beleidsregelEditObjectStatic = (
    lineageId: number,
    beleidsregelStaticPostStatics: BeleidsregelStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/beleidsregel/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelStaticPostStatics,
    })
}

export const getBeleidsregelEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidsregelStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidsregelStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>,
        { lineageId: number; data: BeleidsregelStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return beleidsregelEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsregelEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>
>
export type BeleidsregelEditObjectStaticMutationBody =
    BeleidsregelStaticPostStatics
export type BeleidsregelEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useBeleidsregelEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>,
        TError,
        { lineageId: number; data: BeleidsregelStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsregelEditObjectStatic>>,
    TError,
    { lineageId: number; data: BeleidsregelStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getBeleidsregelEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the beleidsregel lineage in a module
 */
export const beleidsregelPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    beleidsregelPatch: BeleidsregelPatch
) => {
    return customInstance<BeleidsregelUUID>({
        url: `/modules/${moduleId}/object/beleidsregel/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: beleidsregelPatch,
    })
}

export const getBeleidsregelPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsregelPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidsregelPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: BeleidsregelPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return beleidsregelPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BeleidsregelPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>
>
export type BeleidsregelPostModulePatchObjectMutationBody = BeleidsregelPatch
export type BeleidsregelPostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the beleidsregel lineage in a module
 */
export const useBeleidsregelPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: BeleidsregelPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof beleidsregelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: BeleidsregelPatch },
    TContext
> => {
    const mutationOptions =
        getBeleidsregelPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the beleidsregel of a single lineage in a module
 */
export const beleidsregelGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: BeleidsregelGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseBeleidsregelExtended>({
        url: `/modules/${moduleId}/object/beleidsregel/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsregelGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: BeleidsregelGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/beleidsregel/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsregelGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidsregelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsregelGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelGetModuleListLineageTree>>
    > = ({ signal }) =>
        beleidsregelGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelGetModuleListLineageTree>>
>
export type BeleidsregelGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the beleidsregel of a single lineage in a module
 */
export const useBeleidsregelGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof beleidsregelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: BeleidsregelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsregelGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for beleidsregel by their lineage id in a module
 */
export const beleidsregelViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelFull>({
        url: `/modules/${moduleId}/object/beleidsregel/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getBeleidsregelViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/beleidsregel/latest/${lineageId}`,
    ] as const
}

export const getBeleidsregelViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>
    > = ({ signal }) =>
        beleidsregelViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>
>
export type BeleidsregelViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for beleidsregel by their lineage id in a module
 */
export const useBeleidsregelViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof beleidsregelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsregel by uuid in a module
 */
export const getModulesObjectBeleidsregelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelFull>({
        url: `/modules/${moduleId}/object/beleidsregel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectBeleidsregelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/beleidsregel/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectBeleidsregelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectBeleidsregelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>
    > = ({ signal }) =>
        getModulesObjectBeleidsregelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectBeleidsregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>
>
export type GetModulesObjectBeleidsregelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsregel by uuid in a module
 */
export const useGetModulesObjectBeleidsregelVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectBeleidsregelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectBeleidsregelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const beleidsregelGetListActiveModuleObjects = (
    lineageId: number,
    params: BeleidsregelGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/objects/beleidsregel/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getBeleidsregelGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: BeleidsregelGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/objects/beleidsregel/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getBeleidsregelGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof beleidsregelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidsregelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsregelGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getBeleidsregelGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof beleidsregelGetListActiveModuleObjects>>
    > = ({ signal }) =>
        beleidsregelGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof beleidsregelGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type BeleidsregelGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof beleidsregelGetListActiveModuleObjects>>
>
export type BeleidsregelGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useBeleidsregelGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof beleidsregelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: BeleidsregelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof beleidsregelGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getBeleidsregelGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific beleidsregel by uuid in a module
 */
export const getRevisionsBeleidsregelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<BeleidsregelFull>({
        url: `/revisions/${moduleId}/beleidsregel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsBeleidsregelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/beleidsregel/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsBeleidsregelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsBeleidsregelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>
    > = ({ signal }) =>
        getRevisionsBeleidsregelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsBeleidsregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>
>
export type GetRevisionsBeleidsregelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific beleidsregel by uuid in a module
 */
export const useGetRevisionsBeleidsregelVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsBeleidsregelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsBeleidsregelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid document lineages and shows the latest object of each
 */
export const documentListValidLineages = (
    params?: DocumentListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseDocumentBasic>({
        url: `/documenten/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getDocumentListValidLineagesQueryKey = (
    params?: DocumentListValidLineagesParams
) => {
    return [`/documenten/valid`, ...(params ? [params] : [])] as const
}

export const getDocumentListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof documentListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: DocumentListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getDocumentListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentListValidLineages>>
    > = ({ signal }) => documentListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof documentListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentListValidLineages>>
>
export type DocumentListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid document lineages and shows the latest object of each
 */
export const useDocumentListValidLineages = <
    TData = Awaited<ReturnType<typeof documentListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: DocumentListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid document of a single lineage
 */
export const documentListValidLineageTree = (
    lineageId: number,
    params?: DocumentListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseDocumentBasic>({
        url: `/documenten/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getDocumentListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: DocumentListValidLineageTreeParams
) => {
    return [
        `/documenten/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getDocumentListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof documentListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: DocumentListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getDocumentListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentListValidLineageTree>>
    > = ({ signal }) => documentListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentListValidLineageTree>>
>
export type DocumentListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid document of a single lineage
 */
export const useDocumentListValidLineageTree = <
    TData = Awaited<ReturnType<typeof documentListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: DocumentListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific document by uuid
 */
export const documentViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<DocumentFull>({
        url: `/documenten/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getDocumentViewObjectVersionQueryKey = (objectUuid: string) => {
    return [`/documenten/version/${objectUuid}`] as const
}

export const getDocumentViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof documentViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getDocumentViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentViewObjectVersion>>
    > = ({ signal }) => documentViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentViewObjectVersion>>
>
export type DocumentViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific document by uuid
 */
export const useDocumentViewObjectVersion = <
    TData = Awaited<ReturnType<typeof documentViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for document by their lineage id
 */
export const documentViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<DocumentFull>({
        url: `/documenten/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getDocumentViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/documenten/latest/${lineageId}`] as const
}

export const getDocumentViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof documentViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getDocumentViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentViewObjectLatest>>
    > = ({ signal }) => documentViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentViewObjectLatest>>
>
export type DocumentViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for document by their lineage id
 */
export const useDocumentViewObjectLatest = <
    TData = Awaited<ReturnType<typeof documentViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit static data of an object
 */
export const documentEditObjectStatic = (
    lineageId: number,
    documentStaticPostStatics: DocumentStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/document/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: documentStaticPostStatics,
    })
}

export const getDocumentEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof documentEditObjectStatic>>,
        TError,
        { lineageId: number; data: DocumentStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof documentEditObjectStatic>>,
    TError,
    { lineageId: number; data: DocumentStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof documentEditObjectStatic>>,
        { lineageId: number; data: DocumentStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return documentEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DocumentEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof documentEditObjectStatic>>
>
export type DocumentEditObjectStaticMutationBody = DocumentStaticPostStatics
export type DocumentEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useDocumentEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof documentEditObjectStatic>>,
        TError,
        { lineageId: number; data: DocumentStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof documentEditObjectStatic>>,
    TError,
    { lineageId: number; data: DocumentStaticPostStatics },
    TContext
> => {
    const mutationOptions = getDocumentEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the document lineage in a module
 */
export const documentPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    documentPatch: DocumentPatch
) => {
    return customInstance<DocumentUUID>({
        url: `/modules/${moduleId}/object/document/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: documentPatch,
    })
}

export const getDocumentPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof documentPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: DocumentPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof documentPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: DocumentPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof documentPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: DocumentPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return documentPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DocumentPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof documentPostModulePatchObject>>
>
export type DocumentPostModulePatchObjectMutationBody = DocumentPatch
export type DocumentPostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the document lineage in a module
 */
export const useDocumentPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof documentPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: DocumentPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof documentPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: DocumentPatch },
    TContext
> => {
    const mutationOptions =
        getDocumentPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the document of a single lineage in a module
 */
export const documentGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: DocumentGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseDocumentExtended>({
        url: `/modules/${moduleId}/object/document/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getDocumentGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: DocumentGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/document/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getDocumentGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof documentGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: DocumentGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getDocumentGetModuleListLineageTreeQueryKey(moduleId, lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentGetModuleListLineageTree>>
    > = ({ signal }) =>
        documentGetModuleListLineageTree(moduleId, lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentGetModuleListLineageTree>>
>
export type DocumentGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the document of a single lineage in a module
 */
export const useDocumentGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof documentGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: DocumentGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for document by their lineage id in a module
 */
export const documentViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<DocumentFull>({
        url: `/modules/${moduleId}/object/document/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getDocumentViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [`/modules/${moduleId}/object/document/latest/${lineageId}`] as const
}

export const getDocumentViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof documentViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getDocumentViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentViewModuleObjectLatest>>
    > = ({ signal }) =>
        documentViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentViewModuleObjectLatest>>
>
export type DocumentViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for document by their lineage id in a module
 */
export const useDocumentViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof documentViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific document by uuid in a module
 */
export const getModulesObjectDocumentVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<DocumentFull>({
        url: `/modules/${moduleId}/object/document/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectDocumentVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/document/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectDocumentVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectDocumentVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>
    > = ({ signal }) =>
        getModulesObjectDocumentVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectDocumentVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>
>
export type GetModulesObjectDocumentVersionQueryError = HTTPValidationError

/**
 * @summary Get specific document by uuid in a module
 */
export const useGetModulesObjectDocumentVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectDocumentVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectDocumentVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const documentGetListActiveModuleObjects = (
    lineageId: number,
    params: DocumentGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/document/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getDocumentGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: DocumentGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/document/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getDocumentGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: DocumentGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getDocumentGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>
    > = ({ signal }) =>
        documentGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type DocumentGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>
>
export type DocumentGetListActiveModuleObjectsQueryError = HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useDocumentGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: DocumentGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof documentGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getDocumentGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific document by uuid in a module
 */
export const getRevisionsDocumentVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<DocumentFull>({
        url: `/revisions/${moduleId}/document/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsDocumentVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [`/revisions/${moduleId}/document/version/${objectUuid}`] as const
}

export const getGetRevisionsDocumentVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsDocumentVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsDocumentVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsDocumentVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsDocumentVersion>>
    > = ({ signal }) =>
        getRevisionsDocumentVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsDocumentVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsDocumentVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsDocumentVersion>>
>
export type GetRevisionsDocumentVersionQueryError = HTTPValidationError

/**
 * @summary Get specific document by uuid in a module
 */
export const useGetRevisionsDocumentVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsDocumentVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsDocumentVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsDocumentVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid gebiedsprogramma lineages and shows the latest object of each
 */
export const gebiedsprogrammaListValidLineages = (
    params?: GebiedsprogrammaListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseGebiedsprogrammaBasic>({
        url: `/gebiedsprogrammas/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGebiedsprogrammaListValidLineagesQueryKey = (
    params?: GebiedsprogrammaListValidLineagesParams
) => {
    return [`/gebiedsprogrammas/valid`, ...(params ? [params] : [])] as const
}

export const getGebiedsprogrammaListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: GebiedsprogrammaListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>
    > = ({ signal }) => gebiedsprogrammaListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>
>
export type GebiedsprogrammaListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid gebiedsprogramma lineages and shows the latest object of each
 */
export const useGebiedsprogrammaListValidLineages = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: GebiedsprogrammaListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid gebiedsprogramma of a single lineage
 */
export const gebiedsprogrammaListValidLineageTree = (
    lineageId: number,
    params?: GebiedsprogrammaListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseGebiedsprogrammaBasic>({
        url: `/gebiedsprogrammas/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGebiedsprogrammaListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: GebiedsprogrammaListValidLineageTreeParams
) => {
    return [
        `/gebiedsprogrammas/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getGebiedsprogrammaListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: GebiedsprogrammaListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaListValidLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaListValidLineageTree>>
    > = ({ signal }) =>
        gebiedsprogrammaListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaListValidLineageTree>>
>
export type GebiedsprogrammaListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid gebiedsprogramma of a single lineage
 */
export const useGebiedsprogrammaListValidLineageTree = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: GebiedsprogrammaListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaListValidLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific gebiedsprogramma by uuid
 */
export const gebiedsprogrammaViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammaFull>({
        url: `/gebiedsprogrammas/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGebiedsprogrammaViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/gebiedsprogrammas/version/${objectUuid}`] as const
}

export const getGebiedsprogrammaViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>
    > = ({ signal }) => gebiedsprogrammaViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>
>
export type GebiedsprogrammaViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific gebiedsprogramma by uuid
 */
export const useGebiedsprogrammaViewObjectVersion = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for gebiedsprogramma by their lineage id
 */
export const gebiedsprogrammaViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammaFull>({
        url: `/gebiedsprogrammas/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getGebiedsprogrammaViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/gebiedsprogrammas/latest/${lineageId}`] as const
}

export const getGebiedsprogrammaViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>
    > = ({ signal }) => gebiedsprogrammaViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>
>
export type GebiedsprogrammaViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for gebiedsprogramma by their lineage id
 */
export const useGebiedsprogrammaViewObjectLatest = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given gebiedsprogramma lineage
 */
export const gebiedsprogrammaGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/gebiedsprogrammas/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getGebiedsprogrammaGetRelationsListQueryKey = (
    lineageId: number
) => {
    return [`/gebiedsprogrammas/relations/${lineageId}`] as const
}

export const getGebiedsprogrammaGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>
    > = ({ signal }) => gebiedsprogrammaGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>
>
export type GebiedsprogrammaGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given gebiedsprogramma lineage
 */
export const useGebiedsprogrammaGetRelationsList = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof gebiedsprogrammaGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given gebiedsprogramma lineage
 */
export const gebiedsprogrammaPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/gebiedsprogrammas/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getGebiedsprogrammaPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return gebiedsprogrammaPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GebiedsprogrammaPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>
>
export type GebiedsprogrammaPostRelationsOverwriteMutationBody = WriteRelation[]
export type GebiedsprogrammaPostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given gebiedsprogramma lineage
 */
export const useGebiedsprogrammaPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof gebiedsprogrammaPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getGebiedsprogrammaPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const gebiedsprogrammaEditObjectStatic = (
    lineageId: number,
    gebiedsprogrammaStaticPostStatics: GebiedsprogrammaStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/gebiedsprogrammas/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammaStaticPostStatics,
    })
}

export const getGebiedsprogrammaEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>,
        TError,
        { lineageId: number; data: GebiedsprogrammaStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>,
    TError,
    { lineageId: number; data: GebiedsprogrammaStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>,
        { lineageId: number; data: GebiedsprogrammaStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return gebiedsprogrammaEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GebiedsprogrammaEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>
>
export type GebiedsprogrammaEditObjectStaticMutationBody =
    GebiedsprogrammaStaticPostStatics
export type GebiedsprogrammaEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useGebiedsprogrammaEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>,
        TError,
        { lineageId: number; data: GebiedsprogrammaStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof gebiedsprogrammaEditObjectStatic>>,
    TError,
    { lineageId: number; data: GebiedsprogrammaStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getGebiedsprogrammaEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the gebiedsprogramma lineage in a module
 */
export const gebiedsprogrammaPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    gebiedsprogrammaPatch: GebiedsprogrammaPatch
) => {
    return customInstance<GebiedsprogrammaUUID>({
        url: `/modules/${moduleId}/object/gebiedsprogrammas/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: gebiedsprogrammaPatch,
    })
}

export const getGebiedsprogrammaPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: GebiedsprogrammaPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: GebiedsprogrammaPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: GebiedsprogrammaPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return gebiedsprogrammaPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GebiedsprogrammaPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>
>
export type GebiedsprogrammaPostModulePatchObjectMutationBody =
    GebiedsprogrammaPatch
export type GebiedsprogrammaPostModulePatchObjectMutationError =
    HTTPValidationError

/**
 * @summary Add a new version to the gebiedsprogramma lineage in a module
 */
export const useGebiedsprogrammaPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: GebiedsprogrammaPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof gebiedsprogrammaPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: GebiedsprogrammaPatch },
    TContext
> => {
    const mutationOptions =
        getGebiedsprogrammaPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the gebiedsprogramma of a single lineage in a module
 */
export const gebiedsprogrammaGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: GebiedsprogrammaGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseGebiedsprogrammaExtended>({
        url: `/modules/${moduleId}/object/gebiedsprogrammas/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGebiedsprogrammaGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: GebiedsprogrammaGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/gebiedsprogrammas/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getGebiedsprogrammaGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<
        ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: GebiedsprogrammaGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>>
    > = ({ signal }) =>
        gebiedsprogrammaGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>>
>
export type GebiedsprogrammaGetModuleListLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the gebiedsprogramma of a single lineage in a module
 */
export const useGebiedsprogrammaGetModuleListLineageTree = <
    TData = Awaited<
        ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: GebiedsprogrammaGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getGebiedsprogrammaGetModuleListLineageTreeQueryOptions(
            moduleId,
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for gebiedsprogramma by their lineage id in a module
 */
export const gebiedsprogrammaViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammaFull>({
        url: `/modules/${moduleId}/object/gebiedsprogrammas/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getGebiedsprogrammaViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/gebiedsprogrammas/latest/${lineageId}`,
    ] as const
}

export const getGebiedsprogrammaViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>>
    > = ({ signal }) =>
        gebiedsprogrammaViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>>
>
export type GebiedsprogrammaViewModuleObjectLatestQueryError =
    HTTPValidationError

/**
 * @summary Get latest lineage record for gebiedsprogramma by their lineage id in a module
 */
export const useGebiedsprogrammaViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof gebiedsprogrammaViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGebiedsprogrammaViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific gebiedsprogramma by uuid in a module
 */
export const getModulesObjectGebiedsprogrammasVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammaFull>({
        url: `/modules/${moduleId}/object/gebiedsprogrammas/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectGebiedsprogrammasVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/gebiedsprogrammas/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectGebiedsprogrammasVersionQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectGebiedsprogrammasVersionQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>>
    > = ({ signal }) =>
        getModulesObjectGebiedsprogrammasVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectGebiedsprogrammasVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>>
>
export type GetModulesObjectGebiedsprogrammasVersionQueryError =
    HTTPValidationError

/**
 * @summary Get specific gebiedsprogramma by uuid in a module
 */
export const useGetModulesObjectGebiedsprogrammasVersion = <
    TData = Awaited<
        ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectGebiedsprogrammasVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getGetModulesObjectGebiedsprogrammasVersionQueryOptions(
            moduleId,
            objectUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const gebiedsprogrammaGetListActiveModuleObjects = (
    lineageId: number,
    params: GebiedsprogrammaGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/objects/gebiedsprogramma/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getGebiedsprogrammaGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: GebiedsprogrammaGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/objects/gebiedsprogramma/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getGebiedsprogrammaGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof gebiedsprogrammaGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: GebiedsprogrammaGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof gebiedsprogrammaGetListActiveModuleObjects
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGebiedsprogrammaGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof gebiedsprogrammaGetListActiveModuleObjects>>
    > = ({ signal }) =>
        gebiedsprogrammaGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof gebiedsprogrammaGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GebiedsprogrammaGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof gebiedsprogrammaGetListActiveModuleObjects>>
>
export type GebiedsprogrammaGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useGebiedsprogrammaGetListActiveModuleObjects = <
    TData = Awaited<
        ReturnType<typeof gebiedsprogrammaGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: GebiedsprogrammaGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof gebiedsprogrammaGetListActiveModuleObjects
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getGebiedsprogrammaGetListActiveModuleObjectsQueryOptions(
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific gebiedsprogramma by uuid in a module
 */
export const getRevisionsGebiedsprogrammaVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<GebiedsprogrammaFull>({
        url: `/revisions/${moduleId}/gebiedsprogramma/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsGebiedsprogrammaVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/gebiedsprogramma/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsGebiedsprogrammaVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsGebiedsprogrammaVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>
    > = ({ signal }) =>
        getRevisionsGebiedsprogrammaVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsGebiedsprogrammaVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>
>
export type GetRevisionsGebiedsprogrammaVersionQueryError = HTTPValidationError

/**
 * @summary Get specific gebiedsprogramma by uuid in a module
 */
export const useGetRevisionsGebiedsprogrammaVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsGebiedsprogrammaVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsGebiedsprogrammaVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid maatregel lineages and shows the latest object of each
 */
export const maatregelListValidLineages = (
    params?: MaatregelListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseMaatregelBasic>({
        url: `/maatregelen/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getMaatregelListValidLineagesQueryKey = (
    params?: MaatregelListValidLineagesParams
) => {
    return [`/maatregelen/valid`, ...(params ? [params] : [])] as const
}

export const getMaatregelListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: MaatregelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getMaatregelListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelListValidLineages>>
    > = ({ signal }) => maatregelListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelListValidLineages>>
>
export type MaatregelListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid maatregel lineages and shows the latest object of each
 */
export const useMaatregelListValidLineages = <
    TData = Awaited<ReturnType<typeof maatregelListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: MaatregelListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid maatregel of a single lineage
 */
export const maatregelListValidLineageTree = (
    lineageId: number,
    params?: MaatregelListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseMaatregelBasic>({
        url: `/maatregelen/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getMaatregelListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: MaatregelListValidLineageTreeParams
) => {
    return [
        `/maatregelen/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getMaatregelListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: MaatregelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelListValidLineageTree>>
    > = ({ signal }) => maatregelListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelListValidLineageTree>>
>
export type MaatregelListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid maatregel of a single lineage
 */
export const useMaatregelListValidLineageTree = <
    TData = Awaited<ReturnType<typeof maatregelListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: MaatregelListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific maatregel by uuid
 */
export const maatregelViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelFull>({
        url: `/maatregelen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getMaatregelViewObjectVersionQueryKey = (objectUuid: string) => {
    return [`/maatregelen/version/${objectUuid}`] as const
}

export const getMaatregelViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelViewObjectVersion>>
    > = ({ signal }) => maatregelViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelViewObjectVersion>>
>
export type MaatregelViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific maatregel by uuid
 */
export const useMaatregelViewObjectVersion = <
    TData = Awaited<ReturnType<typeof maatregelViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for maatregel by their lineage id
 */
export const maatregelViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelFull>({
        url: `/maatregelen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getMaatregelViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/maatregelen/latest/${lineageId}`] as const
}

export const getMaatregelViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelViewObjectLatest>>
    > = ({ signal }) => maatregelViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelViewObjectLatest>>
>
export type MaatregelViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for maatregel by their lineage id
 */
export const useMaatregelViewObjectLatest = <
    TData = Awaited<ReturnType<typeof maatregelViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given maatregel lineage
 */
export const maatregelGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/maatregelen/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getMaatregelGetRelationsListQueryKey = (lineageId: number) => {
    return [`/maatregelen/relations/${lineageId}`] as const
}

export const getMaatregelGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelGetRelationsList>>
    > = ({ signal }) => maatregelGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelGetRelationsList>>
>
export type MaatregelGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given maatregel lineage
 */
export const useMaatregelGetRelationsList = <
    TData = Awaited<ReturnType<typeof maatregelGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given maatregel lineage
 */
export const maatregelPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/maatregelen/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getMaatregelPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return maatregelPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type MaatregelPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>
>
export type MaatregelPostRelationsOverwriteMutationBody = WriteRelation[]
export type MaatregelPostRelationsOverwriteMutationError = HTTPValidationError

/**
 * @summary Overwrite all relations of the given maatregel lineage
 */
export const useMaatregelPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof maatregelPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getMaatregelPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const maatregelEditObjectStatic = (
    lineageId: number,
    maatregelStaticPostStatics: MaatregelStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/maatregel/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelStaticPostStatics,
    })
}

export const getMaatregelEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelEditObjectStatic>>,
        TError,
        { lineageId: number; data: MaatregelStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof maatregelEditObjectStatic>>,
    TError,
    { lineageId: number; data: MaatregelStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof maatregelEditObjectStatic>>,
        { lineageId: number; data: MaatregelStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return maatregelEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type MaatregelEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof maatregelEditObjectStatic>>
>
export type MaatregelEditObjectStaticMutationBody = MaatregelStaticPostStatics
export type MaatregelEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useMaatregelEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelEditObjectStatic>>,
        TError,
        { lineageId: number; data: MaatregelStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof maatregelEditObjectStatic>>,
    TError,
    { lineageId: number; data: MaatregelStaticPostStatics },
    TContext
> => {
    const mutationOptions = getMaatregelEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the maatregel lineage in a module
 */
export const maatregelPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    maatregelPatch: MaatregelPatch
) => {
    return customInstance<MaatregelUUID>({
        url: `/modules/${moduleId}/object/maatregel/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: maatregelPatch,
    })
}

export const getMaatregelPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: MaatregelPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof maatregelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: MaatregelPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof maatregelPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: MaatregelPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return maatregelPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type MaatregelPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof maatregelPostModulePatchObject>>
>
export type MaatregelPostModulePatchObjectMutationBody = MaatregelPatch
export type MaatregelPostModulePatchObjectMutationError = HTTPValidationError

/**
 * @summary Add a new version to the maatregel lineage in a module
 */
export const useMaatregelPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof maatregelPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: MaatregelPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof maatregelPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: MaatregelPatch },
    TContext
> => {
    const mutationOptions =
        getMaatregelPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the maatregel of a single lineage in a module
 */
export const maatregelGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: MaatregelGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseMaatregelExtended>({
        url: `/modules/${moduleId}/object/maatregel/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getMaatregelGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: MaatregelGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/maatregel/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getMaatregelGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: MaatregelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>
    > = ({ signal }) =>
        maatregelGetModuleListLineageTree(moduleId, lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>
>
export type MaatregelGetModuleListLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the maatregel of a single lineage in a module
 */
export const useMaatregelGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: MaatregelGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetModuleListLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for maatregel by their lineage id in a module
 */
export const maatregelViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelFull>({
        url: `/modules/${moduleId}/object/maatregel/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getMaatregelViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/maatregel/latest/${lineageId}`,
    ] as const
}

export const getMaatregelViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>
    > = ({ signal }) =>
        maatregelViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>
>
export type MaatregelViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for maatregel by their lineage id in a module
 */
export const useMaatregelViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific maatregel by uuid in a module
 */
export const getModulesObjectMaatregelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelFull>({
        url: `/modules/${moduleId}/object/maatregel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectMaatregelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/maatregel/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectMaatregelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectMaatregelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>
    > = ({ signal }) =>
        getModulesObjectMaatregelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectMaatregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>
>
export type GetModulesObjectMaatregelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific maatregel by uuid in a module
 */
export const useGetModulesObjectMaatregelVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getModulesObjectMaatregelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectMaatregelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const maatregelGetListActiveModuleObjects = (
    lineageId: number,
    params: MaatregelGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/objects/maatregel/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getMaatregelGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: MaatregelGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/objects/maatregel/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getMaatregelGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: MaatregelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getMaatregelGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>
    > = ({ signal }) =>
        maatregelGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type MaatregelGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>
>
export type MaatregelGetListActiveModuleObjectsQueryError = HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useMaatregelGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: MaatregelGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof maatregelGetListActiveModuleObjects>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getMaatregelGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific maatregel by uuid in a module
 */
export const getRevisionsMaatregelVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<MaatregelFull>({
        url: `/revisions/${moduleId}/maatregel/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsMaatregelVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [`/revisions/${moduleId}/maatregel/version/${objectUuid}`] as const
}

export const getGetRevisionsMaatregelVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsMaatregelVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>
    > = ({ signal }) =>
        getRevisionsMaatregelVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsMaatregelVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>
>
export type GetRevisionsMaatregelVersionQueryError = HTTPValidationError

/**
 * @summary Get specific maatregel by uuid in a module
 */
export const useGetRevisionsMaatregelVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsMaatregelVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsMaatregelVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Add new object
 */
export const nationaalBelangAtemporalCreateObject = (
    nationaalBelangCreate: NationaalBelangCreate
) => {
    return customInstance<NationaalBelangUUID>({
        url: `/nationaal-belang`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: nationaalBelangCreate,
    })
}

export const getNationaalBelangAtemporalCreateObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>,
        TError,
        { data: NationaalBelangCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>,
    TError,
    { data: NationaalBelangCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>,
        { data: NationaalBelangCreate }
    > = props => {
        const { data } = props ?? {}

        return nationaalBelangAtemporalCreateObject(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type NationaalBelangAtemporalCreateObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>
>
export type NationaalBelangAtemporalCreateObjectMutationBody =
    NationaalBelangCreate
export type NationaalBelangAtemporalCreateObjectMutationError =
    HTTPValidationError

/**
 * @summary Add new object
 */
export const useNationaalBelangAtemporalCreateObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>,
        TError,
        { data: NationaalBelangCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof nationaalBelangAtemporalCreateObject>>,
    TError,
    { data: NationaalBelangCreate },
    TContext
> => {
    const mutationOptions =
        getNationaalBelangAtemporalCreateObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit atemporal object
 */
export const nationaalBelangAtemporalEditObject = (
    lineageId: number,
    nationaalBelangEdit: NationaalBelangEdit
) => {
    return customInstance<ResponseOK>({
        url: `/nationaal-belang/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: nationaalBelangEdit,
    })
}

export const getNationaalBelangAtemporalEditObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>,
        TError,
        { lineageId: number; data: NationaalBelangEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>,
    TError,
    { lineageId: number; data: NationaalBelangEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>,
        { lineageId: number; data: NationaalBelangEdit }
    > = props => {
        const { lineageId, data } = props ?? {}

        return nationaalBelangAtemporalEditObject(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type NationaalBelangAtemporalEditObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>
>
export type NationaalBelangAtemporalEditObjectMutationBody = NationaalBelangEdit
export type NationaalBelangAtemporalEditObjectMutationError =
    HTTPValidationError

/**
 * @summary Edit atemporal object
 */
export const useNationaalBelangAtemporalEditObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>,
        TError,
        { lineageId: number; data: NationaalBelangEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof nationaalBelangAtemporalEditObject>>,
    TError,
    { lineageId: number; data: NationaalBelangEdit },
    TContext
> => {
    const mutationOptions =
        getNationaalBelangAtemporalEditObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Delete atemporal object
 */
export const nationaalBelangAtemporalDeleteObject = (lineageId: number) => {
    return customInstance<ResponseOK>({
        url: `/nationaal-belang/${lineageId}`,
        method: 'DELETE',
    })
}

export const getNationaalBelangAtemporalDeleteObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>,
        { lineageId: number }
    > = props => {
        const { lineageId } = props ?? {}

        return nationaalBelangAtemporalDeleteObject(lineageId)
    }

    return { mutationFn, ...mutationOptions }
}

export type NationaalBelangAtemporalDeleteObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>
>

export type NationaalBelangAtemporalDeleteObjectMutationError =
    HTTPValidationError

/**
 * @summary Delete atemporal object
 */
export const useNationaalBelangAtemporalDeleteObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof nationaalBelangAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const mutationOptions =
        getNationaalBelangAtemporalDeleteObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid nationaal_belang lineages and shows the latest object of each
 */
export const nationaalBelangListValidLineages = (
    params?: NationaalBelangListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseNationaalBelangBasic>({
        url: `/nationaal-belang/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getNationaalBelangListValidLineagesQueryKey = (
    params?: NationaalBelangListValidLineagesParams
) => {
    return [`/nationaal-belang/valid`, ...(params ? [params] : [])] as const
}

export const getNationaalBelangListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof nationaalBelangListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: NationaalBelangListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getNationaalBelangListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof nationaalBelangListValidLineages>>
    > = ({ signal }) => nationaalBelangListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof nationaalBelangListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type NationaalBelangListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangListValidLineages>>
>
export type NationaalBelangListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid nationaal_belang lineages and shows the latest object of each
 */
export const useNationaalBelangListValidLineages = <
    TData = Awaited<ReturnType<typeof nationaalBelangListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: NationaalBelangListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getNationaalBelangListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for nationaal_belang by their lineage id
 */
export const nationaalBelangViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<NationaalBelangFull>({
        url: `/nationaal-belang/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getNationaalBelangViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/nationaal-belang/latest/${lineageId}`] as const
}

export const getNationaalBelangViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getNationaalBelangViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>
    > = ({ signal }) => nationaalBelangViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type NationaalBelangViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>
>
export type NationaalBelangViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for nationaal_belang by their lineage id
 */
export const useNationaalBelangViewObjectLatest = <
    TData = Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getNationaalBelangViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given nationaal_belang lineage
 */
export const nationaalBelangGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/nationaal-belang/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getNationaalBelangGetRelationsListQueryKey = (
    lineageId: number
) => {
    return [`/nationaal-belang/relations/${lineageId}`] as const
}

export const getNationaalBelangGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getNationaalBelangGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>
    > = ({ signal }) => nationaalBelangGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type NationaalBelangGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>
>
export type NationaalBelangGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given nationaal_belang lineage
 */
export const useNationaalBelangGetRelationsList = <
    TData = Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof nationaalBelangGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getNationaalBelangGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given nationaal_belang lineage
 */
export const nationaalBelangPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/nationaal-belang/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getNationaalBelangPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return nationaalBelangPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type NationaalBelangPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>
>
export type NationaalBelangPostRelationsOverwriteMutationBody = WriteRelation[]
export type NationaalBelangPostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given nationaal_belang lineage
 */
export const useNationaalBelangPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof nationaalBelangPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getNationaalBelangPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const nationaalBelangEditObjectStatic = (
    lineageId: number,
    nationaalBelangStaticPostStatics: NationaalBelangStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/nationaal-belang/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: nationaalBelangStaticPostStatics,
    })
}

export const getNationaalBelangEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>,
        TError,
        { lineageId: number; data: NationaalBelangStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>,
    TError,
    { lineageId: number; data: NationaalBelangStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>,
        { lineageId: number; data: NationaalBelangStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return nationaalBelangEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type NationaalBelangEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>
>
export type NationaalBelangEditObjectStaticMutationBody =
    NationaalBelangStaticPostStatics
export type NationaalBelangEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useNationaalBelangEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>,
        TError,
        { lineageId: number; data: NationaalBelangStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof nationaalBelangEditObjectStatic>>,
    TError,
    { lineageId: number; data: NationaalBelangStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getNationaalBelangEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid onderverdeling lineages and shows the latest object of each
 */
export const onderverdelingListValidLineages = (
    params?: OnderverdelingListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseOnderverdelingBasic>({
        url: `/onderverdelingen/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getOnderverdelingListValidLineagesQueryKey = (
    params?: OnderverdelingListValidLineagesParams
) => {
    return [`/onderverdelingen/valid`, ...(params ? [params] : [])] as const
}

export const getOnderverdelingListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: OnderverdelingListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingListValidLineages>>
    > = ({ signal }) => onderverdelingListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingListValidLineages>>
>
export type OnderverdelingListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid onderverdeling lineages and shows the latest object of each
 */
export const useOnderverdelingListValidLineages = <
    TData = Awaited<ReturnType<typeof onderverdelingListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: OnderverdelingListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid onderverdeling of a single lineage
 */
export const onderverdelingListValidLineageTree = (
    lineageId: number,
    params?: OnderverdelingListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseOnderverdelingBasic>({
        url: `/onderverdelingen/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getOnderverdelingListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: OnderverdelingListValidLineageTreeParams
) => {
    return [
        `/onderverdelingen/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getOnderverdelingListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: OnderverdelingListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>
    > = ({ signal }) =>
        onderverdelingListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>
>
export type OnderverdelingListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid onderverdeling of a single lineage
 */
export const useOnderverdelingListValidLineageTree = <
    TData = Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: OnderverdelingListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific onderverdeling by uuid
 */
export const onderverdelingViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<OnderverdelingFull>({
        url: `/onderverdelingen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getOnderverdelingViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/onderverdelingen/version/${objectUuid}`] as const
}

export const getOnderverdelingViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>
    > = ({ signal }) => onderverdelingViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>
>
export type OnderverdelingViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific onderverdeling by uuid
 */
export const useOnderverdelingViewObjectVersion = <
    TData = Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for onderverdeling by their lineage id
 */
export const onderverdelingViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<OnderverdelingFull>({
        url: `/onderverdelingen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getOnderverdelingViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/onderverdelingen/latest/${lineageId}`] as const
}

export const getOnderverdelingViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>
    > = ({ signal }) => onderverdelingViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>
>
export type OnderverdelingViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for onderverdeling by their lineage id
 */
export const useOnderverdelingViewObjectLatest = <
    TData = Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof onderverdelingViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit static data of an object
 */
export const onderverdelingEditObjectStatic = (
    lineageId: number,
    onderverdelingStaticPostStatics: OnderverdelingStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/onderverdeling/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: onderverdelingStaticPostStatics,
    })
}

export const getOnderverdelingEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>,
        TError,
        { lineageId: number; data: OnderverdelingStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>,
    TError,
    { lineageId: number; data: OnderverdelingStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>,
        { lineageId: number; data: OnderverdelingStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return onderverdelingEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type OnderverdelingEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>
>
export type OnderverdelingEditObjectStaticMutationBody =
    OnderverdelingStaticPostStatics
export type OnderverdelingEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useOnderverdelingEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>,
        TError,
        { lineageId: number; data: OnderverdelingStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof onderverdelingEditObjectStatic>>,
    TError,
    { lineageId: number; data: OnderverdelingStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getOnderverdelingEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the onderverdeling of a single lineage in a module
 */
export const onderverdelingGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: OnderverdelingGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseOnderverdelingExtended>({
        url: `/modules/${moduleId}/object/onderverdeling/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getOnderverdelingGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: OnderverdelingGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/onderverdeling/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getOnderverdelingGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: OnderverdelingGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingGetModuleListLineageTree>>
    > = ({ signal }) =>
        onderverdelingGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingGetModuleListLineageTree>>
>
export type OnderverdelingGetModuleListLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the onderverdeling of a single lineage in a module
 */
export const useOnderverdelingGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof onderverdelingGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: OnderverdelingGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for onderverdeling by their lineage id in a module
 */
export const onderverdelingViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<OnderverdelingFull>({
        url: `/modules/${moduleId}/object/onderverdeling/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getOnderverdelingViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/onderverdeling/latest/${lineageId}`,
    ] as const
}

export const getOnderverdelingViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof onderverdelingViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingViewModuleObjectLatest>>
    > = ({ signal }) =>
        onderverdelingViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingViewModuleObjectLatest>>
>
export type OnderverdelingViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for onderverdeling by their lineage id in a module
 */
export const useOnderverdelingViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof onderverdelingViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getOnderverdelingViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific onderverdeling by uuid in a module
 */
export const getModulesObjectOnderverdelingVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<OnderverdelingFull>({
        url: `/modules/${moduleId}/object/onderverdeling/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectOnderverdelingVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/onderverdeling/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectOnderverdelingVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectOnderverdelingVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectOnderverdelingVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectOnderverdelingVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectOnderverdelingVersion>>
    > = ({ signal }) =>
        getModulesObjectOnderverdelingVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectOnderverdelingVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectOnderverdelingVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectOnderverdelingVersion>>
>
export type GetModulesObjectOnderverdelingVersionQueryError =
    HTTPValidationError

/**
 * @summary Get specific onderverdeling by uuid in a module
 */
export const useGetModulesObjectOnderverdelingVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectOnderverdelingVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectOnderverdelingVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectOnderverdelingVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const onderverdelingGetListActiveModuleObjects = (
    lineageId: number,
    params: OnderverdelingGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/onderverdeling/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getOnderverdelingGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: OnderverdelingGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/onderverdeling/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getOnderverdelingGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof onderverdelingGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: OnderverdelingGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getOnderverdelingGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof onderverdelingGetListActiveModuleObjects>>
    > = ({ signal }) =>
        onderverdelingGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof onderverdelingGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type OnderverdelingGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof onderverdelingGetListActiveModuleObjects>>
>
export type OnderverdelingGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useOnderverdelingGetListActiveModuleObjects = <
    TData = Awaited<
        ReturnType<typeof onderverdelingGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: OnderverdelingGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof onderverdelingGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getOnderverdelingGetListActiveModuleObjectsQueryOptions(
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific onderverdeling by uuid in a module
 */
export const getRevisionsOnderverdelingVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<OnderverdelingFull>({
        url: `/revisions/${moduleId}/onderverdeling/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsOnderverdelingVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/onderverdeling/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsOnderverdelingVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsOnderverdelingVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>
    > = ({ signal }) =>
        getRevisionsOnderverdelingVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsOnderverdelingVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>
>
export type GetRevisionsOnderverdelingVersionQueryError = HTTPValidationError

/**
 * @summary Get specific onderverdeling by uuid in a module
 */
export const useGetRevisionsOnderverdelingVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsOnderverdelingVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsOnderverdelingVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid programma_algemeen lineages and shows the latest object of each
 */
export const programmaAlgemeenListValidLineages = (
    params?: ProgrammaAlgemeenListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseProgrammaAlgemeenBasic>({
        url: `/programmas-algemeen/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getProgrammaAlgemeenListValidLineagesQueryKey = (
    params?: ProgrammaAlgemeenListValidLineagesParams
) => {
    return [`/programmas-algemeen/valid`, ...(params ? [params] : [])] as const
}

export const getProgrammaAlgemeenListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: ProgrammaAlgemeenListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>
    > = ({ signal }) => programmaAlgemeenListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>
>
export type ProgrammaAlgemeenListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid programma_algemeen lineages and shows the latest object of each
 */
export const useProgrammaAlgemeenListValidLineages = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: ProgrammaAlgemeenListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getProgrammaAlgemeenListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid programma_algemeen of a single lineage
 */
export const programmaAlgemeenListValidLineageTree = (
    lineageId: number,
    params?: ProgrammaAlgemeenListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseProgrammaAlgemeenBasic>({
        url: `/programmas-algemeen/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getProgrammaAlgemeenListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: ProgrammaAlgemeenListValidLineageTreeParams
) => {
    return [
        `/programmas-algemeen/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getProgrammaAlgemeenListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: ProgrammaAlgemeenListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenListValidLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenListValidLineageTree>>
    > = ({ signal }) =>
        programmaAlgemeenListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenListValidLineageTree>>
>
export type ProgrammaAlgemeenListValidLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the valid programma_algemeen of a single lineage
 */
export const useProgrammaAlgemeenListValidLineageTree = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: ProgrammaAlgemeenListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenListValidLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getProgrammaAlgemeenListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific programma_algemeen by uuid
 */
export const programmaAlgemeenViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<ProgrammaAlgemeenFull>({
        url: `/programmas-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getProgrammaAlgemeenViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/programmas-algemeen/version/${objectUuid}`] as const
}

export const getProgrammaAlgemeenViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>
    > = ({ signal }) => programmaAlgemeenViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>
>
export type ProgrammaAlgemeenViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific programma_algemeen by uuid
 */
export const useProgrammaAlgemeenViewObjectVersion = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getProgrammaAlgemeenViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for programma_algemeen by their lineage id
 */
export const programmaAlgemeenViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ProgrammaAlgemeenFull>({
        url: `/programmas-algemeen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getProgrammaAlgemeenViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/programmas-algemeen/latest/${lineageId}`] as const
}

export const getProgrammaAlgemeenViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>
    > = ({ signal }) => programmaAlgemeenViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>
>
export type ProgrammaAlgemeenViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for programma_algemeen by their lineage id
 */
export const useProgrammaAlgemeenViewObjectLatest = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof programmaAlgemeenViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getProgrammaAlgemeenViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit static data of an object
 */
export const programmaAlgemeenEditObjectStatic = (
    lineageId: number,
    programmaAlgemeenStaticPostStatics: ProgrammaAlgemeenStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/programma-algemeen/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: programmaAlgemeenStaticPostStatics,
    })
}

export const getProgrammaAlgemeenEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>,
        TError,
        { lineageId: number; data: ProgrammaAlgemeenStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>,
    TError,
    { lineageId: number; data: ProgrammaAlgemeenStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>,
        { lineageId: number; data: ProgrammaAlgemeenStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return programmaAlgemeenEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProgrammaAlgemeenEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>
>
export type ProgrammaAlgemeenEditObjectStaticMutationBody =
    ProgrammaAlgemeenStaticPostStatics
export type ProgrammaAlgemeenEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useProgrammaAlgemeenEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>,
        TError,
        { lineageId: number; data: ProgrammaAlgemeenStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof programmaAlgemeenEditObjectStatic>>,
    TError,
    { lineageId: number; data: ProgrammaAlgemeenStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getProgrammaAlgemeenEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the programma_algemeen lineage in a module
 */
export const programmaAlgemeenPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    programmaAlgemeenPatch: ProgrammaAlgemeenPatch
) => {
    return customInstance<ProgrammaAlgemeenUUID>({
        url: `/modules/${moduleId}/object/programma-algemeen/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: programmaAlgemeenPatch,
    })
}

export const getProgrammaAlgemeenPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: ProgrammaAlgemeenPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: ProgrammaAlgemeenPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: ProgrammaAlgemeenPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return programmaAlgemeenPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProgrammaAlgemeenPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>
>
export type ProgrammaAlgemeenPostModulePatchObjectMutationBody =
    ProgrammaAlgemeenPatch
export type ProgrammaAlgemeenPostModulePatchObjectMutationError =
    HTTPValidationError

/**
 * @summary Add a new version to the programma_algemeen lineage in a module
 */
export const useProgrammaAlgemeenPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: ProgrammaAlgemeenPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof programmaAlgemeenPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: ProgrammaAlgemeenPatch },
    TContext
> => {
    const mutationOptions =
        getProgrammaAlgemeenPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the programma_algemeen of a single lineage in a module
 */
export const programmaAlgemeenGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: ProgrammaAlgemeenGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseProgrammaAlgemeenExtended>({
        url: `/modules/${moduleId}/object/programma-algemeen/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getProgrammaAlgemeenGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: ProgrammaAlgemeenGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/programma-algemeen/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getProgrammaAlgemeenGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<
        ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: ProgrammaAlgemeenGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>>
    > = ({ signal }) =>
        programmaAlgemeenGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>>
>
export type ProgrammaAlgemeenGetModuleListLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the programma_algemeen of a single lineage in a module
 */
export const useProgrammaAlgemeenGetModuleListLineageTree = <
    TData = Awaited<
        ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: ProgrammaAlgemeenGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getProgrammaAlgemeenGetModuleListLineageTreeQueryOptions(
            moduleId,
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for programma_algemeen by their lineage id in a module
 */
export const programmaAlgemeenViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ProgrammaAlgemeenFull>({
        url: `/modules/${moduleId}/object/programma-algemeen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getProgrammaAlgemeenViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/programma-algemeen/latest/${lineageId}`,
    ] as const
}

export const getProgrammaAlgemeenViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>>
    > = ({ signal }) =>
        programmaAlgemeenViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>>
>
export type ProgrammaAlgemeenViewModuleObjectLatestQueryError =
    HTTPValidationError

/**
 * @summary Get latest lineage record for programma_algemeen by their lineage id in a module
 */
export const useProgrammaAlgemeenViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof programmaAlgemeenViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getProgrammaAlgemeenViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific programma_algemeen by uuid in a module
 */
export const getModulesObjectProgrammaAlgemeenVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<ProgrammaAlgemeenFull>({
        url: `/modules/${moduleId}/object/programma-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectProgrammaAlgemeenVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/programma-algemeen/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectProgrammaAlgemeenVersionQueryOptions = <
    TData = Awaited<
        ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectProgrammaAlgemeenVersionQueryKey(
            moduleId,
            objectUuid
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>>
    > = ({ signal }) =>
        getModulesObjectProgrammaAlgemeenVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectProgrammaAlgemeenVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>>
>
export type GetModulesObjectProgrammaAlgemeenVersionQueryError =
    HTTPValidationError

/**
 * @summary Get specific programma_algemeen by uuid in a module
 */
export const useGetModulesObjectProgrammaAlgemeenVersion = <
    TData = Awaited<
        ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>
    >,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectProgrammaAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getGetModulesObjectProgrammaAlgemeenVersionQueryOptions(
            moduleId,
            objectUuid,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const programmaAlgemeenGetListActiveModuleObjects = (
    lineageId: number,
    params: ProgrammaAlgemeenGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/programma-algemeen/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getProgrammaAlgemeenGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: ProgrammaAlgemeenGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/programma-algemeen/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getProgrammaAlgemeenGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof programmaAlgemeenGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: ProgrammaAlgemeenGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof programmaAlgemeenGetListActiveModuleObjects
                    >
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getProgrammaAlgemeenGetListActiveModuleObjectsQueryKey(
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof programmaAlgemeenGetListActiveModuleObjects>>
    > = ({ signal }) =>
        programmaAlgemeenGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof programmaAlgemeenGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type ProgrammaAlgemeenGetListActiveModuleObjectsQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof programmaAlgemeenGetListActiveModuleObjects>>
    >
export type ProgrammaAlgemeenGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useProgrammaAlgemeenGetListActiveModuleObjects = <
    TData = Awaited<
        ReturnType<typeof programmaAlgemeenGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: ProgrammaAlgemeenGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<
                        typeof programmaAlgemeenGetListActiveModuleObjects
                    >
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getProgrammaAlgemeenGetListActiveModuleObjectsQueryOptions(
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific programma_algemeen by uuid in a module
 */
export const getRevisionsProgrammaAlgemeenVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<ProgrammaAlgemeenFull>({
        url: `/revisions/${moduleId}/programma-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsProgrammaAlgemeenVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/programma-algemeen/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsProgrammaAlgemeenVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsProgrammaAlgemeenVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>>
    > = ({ signal }) =>
        getRevisionsProgrammaAlgemeenVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsProgrammaAlgemeenVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>>
>
export type GetRevisionsProgrammaAlgemeenVersionQueryError = HTTPValidationError

/**
 * @summary Get specific programma_algemeen by uuid in a module
 */
export const useGetRevisionsProgrammaAlgemeenVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getRevisionsProgrammaAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsProgrammaAlgemeenVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Add new object
 */
export const verplichtProgrammaAtemporalCreateObject = (
    verplichtProgrammaCreate: VerplichtProgrammaCreate
) => {
    return customInstance<VerplichtProgrammaUUID>({
        url: `/verplicht-programma`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verplichtProgrammaCreate,
    })
}

export const getVerplichtProgrammaAtemporalCreateObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>,
        TError,
        { data: VerplichtProgrammaCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>,
    TError,
    { data: VerplichtProgrammaCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>,
        { data: VerplichtProgrammaCreate }
    > = props => {
        const { data } = props ?? {}

        return verplichtProgrammaAtemporalCreateObject(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerplichtProgrammaAtemporalCreateObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>
>
export type VerplichtProgrammaAtemporalCreateObjectMutationBody =
    VerplichtProgrammaCreate
export type VerplichtProgrammaAtemporalCreateObjectMutationError =
    HTTPValidationError

/**
 * @summary Add new object
 */
export const useVerplichtProgrammaAtemporalCreateObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>,
        TError,
        { data: VerplichtProgrammaCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalCreateObject>>,
    TError,
    { data: VerplichtProgrammaCreate },
    TContext
> => {
    const mutationOptions =
        getVerplichtProgrammaAtemporalCreateObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit atemporal object
 */
export const verplichtProgrammaAtemporalEditObject = (
    lineageId: number,
    verplichtProgrammaEdit: VerplichtProgrammaEdit
) => {
    return customInstance<ResponseOK>({
        url: `/verplicht-programma/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verplichtProgrammaEdit,
    })
}

export const getVerplichtProgrammaAtemporalEditObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>,
        TError,
        { lineageId: number; data: VerplichtProgrammaEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>,
    TError,
    { lineageId: number; data: VerplichtProgrammaEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>,
        { lineageId: number; data: VerplichtProgrammaEdit }
    > = props => {
        const { lineageId, data } = props ?? {}

        return verplichtProgrammaAtemporalEditObject(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerplichtProgrammaAtemporalEditObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>
>
export type VerplichtProgrammaAtemporalEditObjectMutationBody =
    VerplichtProgrammaEdit
export type VerplichtProgrammaAtemporalEditObjectMutationError =
    HTTPValidationError

/**
 * @summary Edit atemporal object
 */
export const useVerplichtProgrammaAtemporalEditObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>,
        TError,
        { lineageId: number; data: VerplichtProgrammaEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalEditObject>>,
    TError,
    { lineageId: number; data: VerplichtProgrammaEdit },
    TContext
> => {
    const mutationOptions =
        getVerplichtProgrammaAtemporalEditObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Delete atemporal object
 */
export const verplichtProgrammaAtemporalDeleteObject = (lineageId: number) => {
    return customInstance<ResponseOK>({
        url: `/verplicht-programma/${lineageId}`,
        method: 'DELETE',
    })
}

export const getVerplichtProgrammaAtemporalDeleteObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>,
        { lineageId: number }
    > = props => {
        const { lineageId } = props ?? {}

        return verplichtProgrammaAtemporalDeleteObject(lineageId)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerplichtProgrammaAtemporalDeleteObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>
>

export type VerplichtProgrammaAtemporalDeleteObjectMutationError =
    HTTPValidationError

/**
 * @summary Delete atemporal object
 */
export const useVerplichtProgrammaAtemporalDeleteObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof verplichtProgrammaAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const mutationOptions =
        getVerplichtProgrammaAtemporalDeleteObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid verplicht_programma lineages and shows the latest object of each
 */
export const verplichtProgrammaListValidLineages = (
    params?: VerplichtProgrammaListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseVerplichtProgrammaBasic>({
        url: `/verplicht-programma/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getVerplichtProgrammaListValidLineagesQueryKey = (
    params?: VerplichtProgrammaListValidLineagesParams
) => {
    return [`/verplicht-programma/valid`, ...(params ? [params] : [])] as const
}

export const getVerplichtProgrammaListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: VerplichtProgrammaListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVerplichtProgrammaListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>
    > = ({ signal }) => verplichtProgrammaListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VerplichtProgrammaListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>
>
export type VerplichtProgrammaListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid verplicht_programma lineages and shows the latest object of each
 */
export const useVerplichtProgrammaListValidLineages = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: VerplichtProgrammaListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVerplichtProgrammaListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for verplicht_programma by their lineage id
 */
export const verplichtProgrammaViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<VerplichtProgrammaFull>({
        url: `/verplicht-programma/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getVerplichtProgrammaViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/verplicht-programma/latest/${lineageId}`] as const
}

export const getVerplichtProgrammaViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVerplichtProgrammaViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>
    > = ({ signal }) => verplichtProgrammaViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VerplichtProgrammaViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>
>
export type VerplichtProgrammaViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for verplicht_programma by their lineage id
 */
export const useVerplichtProgrammaViewObjectLatest = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVerplichtProgrammaViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given verplicht_programma lineage
 */
export const verplichtProgrammaGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/verplicht-programma/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getVerplichtProgrammaGetRelationsListQueryKey = (
    lineageId: number
) => {
    return [`/verplicht-programma/relations/${lineageId}`] as const
}

export const getVerplichtProgrammaGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVerplichtProgrammaGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>
    > = ({ signal }) => verplichtProgrammaGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VerplichtProgrammaGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>
>
export type VerplichtProgrammaGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given verplicht_programma lineage
 */
export const useVerplichtProgrammaGetRelationsList = <
    TData = Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof verplichtProgrammaGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVerplichtProgrammaGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given verplicht_programma lineage
 */
export const verplichtProgrammaPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/verplicht-programma/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getVerplichtProgrammaPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return verplichtProgrammaPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerplichtProgrammaPostRelationsOverwriteMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>
    >
export type VerplichtProgrammaPostRelationsOverwriteMutationBody =
    WriteRelation[]
export type VerplichtProgrammaPostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given verplicht_programma lineage
 */
export const useVerplichtProgrammaPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof verplichtProgrammaPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getVerplichtProgrammaPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const verplichtProgrammaEditObjectStatic = (
    lineageId: number,
    verplichtProgrammaStaticPostStatics: VerplichtProgrammaStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/verplicht-programma/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verplichtProgrammaStaticPostStatics,
    })
}

export const getVerplichtProgrammaEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>,
        TError,
        { lineageId: number; data: VerplichtProgrammaStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>,
    TError,
    { lineageId: number; data: VerplichtProgrammaStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>,
        { lineageId: number; data: VerplichtProgrammaStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return verplichtProgrammaEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerplichtProgrammaEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>
>
export type VerplichtProgrammaEditObjectStaticMutationBody =
    VerplichtProgrammaStaticPostStatics
export type VerplichtProgrammaEditObjectStaticMutationError =
    HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useVerplichtProgrammaEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>,
        TError,
        { lineageId: number; data: VerplichtProgrammaStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof verplichtProgrammaEditObjectStatic>>,
    TError,
    { lineageId: number; data: VerplichtProgrammaStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getVerplichtProgrammaEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid visie_algemeen lineages and shows the latest object of each
 */
export const visieAlgemeenListValidLineages = (
    params?: VisieAlgemeenListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseVisieAlgemeenBasic>({
        url: `/visies-algemeen/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getVisieAlgemeenListValidLineagesQueryKey = (
    params?: VisieAlgemeenListValidLineagesParams
) => {
    return [`/visies-algemeen/valid`, ...(params ? [params] : [])] as const
}

export const getVisieAlgemeenListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: VisieAlgemeenListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>
    > = ({ signal }) => visieAlgemeenListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>
>
export type VisieAlgemeenListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid visie_algemeen lineages and shows the latest object of each
 */
export const useVisieAlgemeenListValidLineages = <
    TData = Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: VisieAlgemeenListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid visie_algemeen of a single lineage
 */
export const visieAlgemeenListValidLineageTree = (
    lineageId: number,
    params?: VisieAlgemeenListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseVisieAlgemeenBasic>({
        url: `/visies-algemeen/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getVisieAlgemeenListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: VisieAlgemeenListValidLineageTreeParams
) => {
    return [
        `/visies-algemeen/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getVisieAlgemeenListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: VisieAlgemeenListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>
    > = ({ signal }) =>
        visieAlgemeenListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>
>
export type VisieAlgemeenListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid visie_algemeen of a single lineage
 */
export const useVisieAlgemeenListValidLineageTree = <
    TData = Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: VisieAlgemeenListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific visie_algemeen by uuid
 */
export const visieAlgemeenViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<VisieAlgemeenFull>({
        url: `/visies-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getVisieAlgemeenViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/visies-algemeen/version/${objectUuid}`] as const
}

export const getVisieAlgemeenViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>
    > = ({ signal }) => visieAlgemeenViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>
>
export type VisieAlgemeenViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific visie_algemeen by uuid
 */
export const useVisieAlgemeenViewObjectVersion = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for visie_algemeen by their lineage id
 */
export const visieAlgemeenViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<VisieAlgemeenFull>({
        url: `/visies-algemeen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getVisieAlgemeenViewObjectLatestQueryKey = (lineageId: number) => {
    return [`/visies-algemeen/latest/${lineageId}`] as const
}

export const getVisieAlgemeenViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>
    > = ({ signal }) => visieAlgemeenViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>
>
export type VisieAlgemeenViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for visie_algemeen by their lineage id
 */
export const useVisieAlgemeenViewObjectLatest = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit static data of an object
 */
export const visieAlgemeenEditObjectStatic = (
    lineageId: number,
    visieAlgemeenStaticPostStatics: VisieAlgemeenStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/visie-algemeen/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: visieAlgemeenStaticPostStatics,
    })
}

export const getVisieAlgemeenEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>,
        TError,
        { lineageId: number; data: VisieAlgemeenStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>,
    TError,
    { lineageId: number; data: VisieAlgemeenStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>,
        { lineageId: number; data: VisieAlgemeenStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return visieAlgemeenEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VisieAlgemeenEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>
>
export type VisieAlgemeenEditObjectStaticMutationBody =
    VisieAlgemeenStaticPostStatics
export type VisieAlgemeenEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useVisieAlgemeenEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>,
        TError,
        { lineageId: number; data: VisieAlgemeenStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof visieAlgemeenEditObjectStatic>>,
    TError,
    { lineageId: number; data: VisieAlgemeenStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getVisieAlgemeenEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the visie_algemeen lineage in a module
 */
export const visieAlgemeenPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    visieAlgemeenPatch: VisieAlgemeenPatch
) => {
    return customInstance<VisieAlgemeenUUID>({
        url: `/modules/${moduleId}/object/visie-algemeen/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: visieAlgemeenPatch,
    })
}

export const getVisieAlgemeenPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: VisieAlgemeenPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: VisieAlgemeenPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: VisieAlgemeenPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return visieAlgemeenPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VisieAlgemeenPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>
>
export type VisieAlgemeenPostModulePatchObjectMutationBody = VisieAlgemeenPatch
export type VisieAlgemeenPostModulePatchObjectMutationError =
    HTTPValidationError

/**
 * @summary Add a new version to the visie_algemeen lineage in a module
 */
export const useVisieAlgemeenPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: VisieAlgemeenPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof visieAlgemeenPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: VisieAlgemeenPatch },
    TContext
> => {
    const mutationOptions =
        getVisieAlgemeenPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the visie_algemeen of a single lineage in a module
 */
export const visieAlgemeenGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: VisieAlgemeenGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseVisieAlgemeenExtended>({
        url: `/modules/${moduleId}/object/visie-algemeen/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getVisieAlgemeenGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: VisieAlgemeenGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/visie-algemeen/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getVisieAlgemeenGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: VisieAlgemeenGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof visieAlgemeenGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenGetModuleListLineageTree>>
    > = ({ signal }) =>
        visieAlgemeenGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenGetModuleListLineageTree>>
>
export type VisieAlgemeenGetModuleListLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the visie_algemeen of a single lineage in a module
 */
export const useVisieAlgemeenGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof visieAlgemeenGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: VisieAlgemeenGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof visieAlgemeenGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for visie_algemeen by their lineage id in a module
 */
export const visieAlgemeenViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<VisieAlgemeenFull>({
        url: `/modules/${moduleId}/object/visie-algemeen/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getVisieAlgemeenViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/visie-algemeen/latest/${lineageId}`,
    ] as const
}

export const getVisieAlgemeenViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>
    > = ({ signal }) =>
        visieAlgemeenViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>
>
export type VisieAlgemeenViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for visie_algemeen by their lineage id in a module
 */
export const useVisieAlgemeenViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof visieAlgemeenViewModuleObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific visie_algemeen by uuid in a module
 */
export const getModulesObjectVisieAlgemeenVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<VisieAlgemeenFull>({
        url: `/modules/${moduleId}/object/visie-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectVisieAlgemeenVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/visie-algemeen/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectVisieAlgemeenVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectVisieAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectVisieAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectVisieAlgemeenVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectVisieAlgemeenVersion>>
    > = ({ signal }) =>
        getModulesObjectVisieAlgemeenVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectVisieAlgemeenVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectVisieAlgemeenVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectVisieAlgemeenVersion>>
>
export type GetModulesObjectVisieAlgemeenVersionQueryError = HTTPValidationError

/**
 * @summary Get specific visie_algemeen by uuid in a module
 */
export const useGetModulesObjectVisieAlgemeenVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectVisieAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectVisieAlgemeenVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectVisieAlgemeenVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const visieAlgemeenGetListActiveModuleObjects = (
    lineageId: number,
    params: VisieAlgemeenGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/visie-algemeen/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getVisieAlgemeenGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: VisieAlgemeenGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/visie-algemeen/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getVisieAlgemeenGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: VisieAlgemeenGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getVisieAlgemeenGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>>
    > = ({ signal }) =>
        visieAlgemeenGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type VisieAlgemeenGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>>
>
export type VisieAlgemeenGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useVisieAlgemeenGetListActiveModuleObjects = <
    TData = Awaited<ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: VisieAlgemeenGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof visieAlgemeenGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getVisieAlgemeenGetListActiveModuleObjectsQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific visie_algemeen by uuid in a module
 */
export const getRevisionsVisieAlgemeenVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<VisieAlgemeenFull>({
        url: `/revisions/${moduleId}/visie-algemeen/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsVisieAlgemeenVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/visie-algemeen/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsVisieAlgemeenVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsVisieAlgemeenVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>
    > = ({ signal }) =>
        getRevisionsVisieAlgemeenVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsVisieAlgemeenVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>
>
export type GetRevisionsVisieAlgemeenVersionQueryError = HTTPValidationError

/**
 * @summary Get specific visie_algemeen by uuid in a module
 */
export const useGetRevisionsVisieAlgemeenVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsVisieAlgemeenVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsVisieAlgemeenVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid werkingsgebied lineages and shows the latest object of each
 */
export const werkingsgebiedListValidLineages = (
    params?: WerkingsgebiedListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseWerkingsgebiedBasic>({
        url: `/werkingsgebieden/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getWerkingsgebiedListValidLineagesQueryKey = (
    params?: WerkingsgebiedListValidLineagesParams
) => {
    return [`/werkingsgebieden/valid`, ...(params ? [params] : [])] as const
}

export const getWerkingsgebiedListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: WerkingsgebiedListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>
    > = ({ signal }) => werkingsgebiedListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>
>
export type WerkingsgebiedListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid werkingsgebied lineages and shows the latest object of each
 */
export const useWerkingsgebiedListValidLineages = <
    TData = Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: WerkingsgebiedListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all the valid werkingsgebied of a single lineage
 */
export const werkingsgebiedListValidLineageTree = (
    lineageId: number,
    params?: WerkingsgebiedListValidLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseWerkingsgebiedBasic>({
        url: `/werkingsgebieden/valid/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getWerkingsgebiedListValidLineageTreeQueryKey = (
    lineageId: number,
    params?: WerkingsgebiedListValidLineageTreeParams
) => {
    return [
        `/werkingsgebieden/valid/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getWerkingsgebiedListValidLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: WerkingsgebiedListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedListValidLineageTreeQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>
    > = ({ signal }) =>
        werkingsgebiedListValidLineageTree(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedListValidLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>
>
export type WerkingsgebiedListValidLineageTreeQueryError = HTTPValidationError

/**
 * @summary Get all the valid werkingsgebied of a single lineage
 */
export const useWerkingsgebiedListValidLineageTree = <
    TData = Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params?: WerkingsgebiedListValidLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedListValidLineageTree>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedListValidLineageTreeQueryOptions(
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific werkingsgebied by uuid
 */
export const werkingsgebiedViewObjectVersion = (
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedFull>({
        url: `/werkingsgebieden/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getWerkingsgebiedViewObjectVersionQueryKey = (
    objectUuid: string
) => {
    return [`/werkingsgebieden/version/${objectUuid}`] as const
}

export const getWerkingsgebiedViewObjectVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedViewObjectVersionQueryKey(objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>
    > = ({ signal }) => werkingsgebiedViewObjectVersion(objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!objectUuid,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedViewObjectVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>
>
export type WerkingsgebiedViewObjectVersionQueryError = HTTPValidationError

/**
 * @summary Get specific werkingsgebied by uuid
 */
export const useWerkingsgebiedViewObjectVersion = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>,
    TError = HTTPValidationError,
>(
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedViewObjectVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedViewObjectVersionQueryOptions(
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for werkingsgebied by their lineage id
 */
export const werkingsgebiedViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedFull>({
        url: `/werkingsgebieden/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getWerkingsgebiedViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/werkingsgebieden/latest/${lineageId}`] as const
}

export const getWerkingsgebiedViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>
    > = ({ signal }) => werkingsgebiedViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>
>
export type WerkingsgebiedViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for werkingsgebied by their lineage id
 */
export const useWerkingsgebiedViewObjectLatest = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof werkingsgebiedViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Edit static data of an object
 */
export const werkingsgebiedEditObjectStatic = (
    lineageId: number,
    werkingsgebiedStaticPostStatics: WerkingsgebiedStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/werkingsgebied/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedStaticPostStatics,
    })
}

export const getWerkingsgebiedEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>,
        TError,
        { lineageId: number; data: WerkingsgebiedStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>,
    TError,
    { lineageId: number; data: WerkingsgebiedStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>,
        { lineageId: number; data: WerkingsgebiedStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return werkingsgebiedEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WerkingsgebiedEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>
>
export type WerkingsgebiedEditObjectStaticMutationBody =
    WerkingsgebiedStaticPostStatics
export type WerkingsgebiedEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useWerkingsgebiedEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>,
        TError,
        { lineageId: number; data: WerkingsgebiedStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof werkingsgebiedEditObjectStatic>>,
    TError,
    { lineageId: number; data: WerkingsgebiedStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getWerkingsgebiedEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Add a new version to the werkingsgebied lineage in a module
 */
export const werkingsgebiedPostModulePatchObject = (
    moduleId: number,
    lineageId: number,
    werkingsgebiedPatch: WerkingsgebiedPatch
) => {
    return customInstance<WerkingsgebiedUUID>({
        url: `/modules/${moduleId}/object/werkingsgebied/${lineageId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: werkingsgebiedPatch,
    })
}

export const getWerkingsgebiedPostModulePatchObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: WerkingsgebiedPatch },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: WerkingsgebiedPatch },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>,
        { moduleId: number; lineageId: number; data: WerkingsgebiedPatch }
    > = props => {
        const { moduleId, lineageId, data } = props ?? {}

        return werkingsgebiedPostModulePatchObject(moduleId, lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WerkingsgebiedPostModulePatchObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>
>
export type WerkingsgebiedPostModulePatchObjectMutationBody =
    WerkingsgebiedPatch
export type WerkingsgebiedPostModulePatchObjectMutationError =
    HTTPValidationError

/**
 * @summary Add a new version to the werkingsgebied lineage in a module
 */
export const useWerkingsgebiedPostModulePatchObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>,
        TError,
        { moduleId: number; lineageId: number; data: WerkingsgebiedPatch },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof werkingsgebiedPostModulePatchObject>>,
    TError,
    { moduleId: number; lineageId: number; data: WerkingsgebiedPatch },
    TContext
> => {
    const mutationOptions =
        getWerkingsgebiedPostModulePatchObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the werkingsgebied of a single lineage in a module
 */
export const werkingsgebiedGetModuleListLineageTree = (
    moduleId: number,
    lineageId: number,
    params?: WerkingsgebiedGetModuleListLineageTreeParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseWerkingsgebiedExtended>({
        url: `/modules/${moduleId}/object/werkingsgebied/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getWerkingsgebiedGetModuleListLineageTreeQueryKey = (
    moduleId: number,
    lineageId: number,
    params?: WerkingsgebiedGetModuleListLineageTreeParams
) => {
    return [
        `/modules/${moduleId}/object/werkingsgebied/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getWerkingsgebiedGetModuleListLineageTreeQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: WerkingsgebiedGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedGetModuleListLineageTreeQueryKey(
            moduleId,
            lineageId,
            params
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedGetModuleListLineageTree>>
    > = ({ signal }) =>
        werkingsgebiedGetModuleListLineageTree(
            moduleId,
            lineageId,
            params,
            signal
        )

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedGetModuleListLineageTree>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedGetModuleListLineageTreeQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedGetModuleListLineageTree>>
>
export type WerkingsgebiedGetModuleListLineageTreeQueryError =
    HTTPValidationError

/**
 * @summary Get all the werkingsgebied of a single lineage in a module
 */
export const useWerkingsgebiedGetModuleListLineageTree = <
    TData = Awaited<ReturnType<typeof werkingsgebiedGetModuleListLineageTree>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    params?: WerkingsgebiedGetModuleListLineageTreeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedGetModuleListLineageTree>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedGetModuleListLineageTreeQueryOptions(
        moduleId,
        lineageId,
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for werkingsgebied by their lineage id in a module
 */
export const werkingsgebiedViewModuleObjectLatest = (
    moduleId: number,
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedFull>({
        url: `/modules/${moduleId}/object/werkingsgebied/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getWerkingsgebiedViewModuleObjectLatestQueryKey = (
    moduleId: number,
    lineageId: number
) => {
    return [
        `/modules/${moduleId}/object/werkingsgebied/latest/${lineageId}`,
    ] as const
}

export const getWerkingsgebiedViewModuleObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedViewModuleObjectLatestQueryKey(moduleId, lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedViewModuleObjectLatest>>
    > = ({ signal }) =>
        werkingsgebiedViewModuleObjectLatest(moduleId, lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && lineageId),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedViewModuleObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedViewModuleObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedViewModuleObjectLatest>>
>
export type WerkingsgebiedViewModuleObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for werkingsgebied by their lineage id in a module
 */
export const useWerkingsgebiedViewModuleObjectLatest = <
    TData = Awaited<ReturnType<typeof werkingsgebiedViewModuleObjectLatest>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedViewModuleObjectLatest>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWerkingsgebiedViewModuleObjectLatestQueryOptions(
        moduleId,
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific werkingsgebied by uuid in a module
 */
export const getModulesObjectWerkingsgebiedVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedFull>({
        url: `/modules/${moduleId}/object/werkingsgebied/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetModulesObjectWerkingsgebiedVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/modules/${moduleId}/object/werkingsgebied/version/${objectUuid}`,
    ] as const
}

export const getGetModulesObjectWerkingsgebiedVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getModulesObjectWerkingsgebiedVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectWerkingsgebiedVersion>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetModulesObjectWerkingsgebiedVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getModulesObjectWerkingsgebiedVersion>>
    > = ({ signal }) =>
        getModulesObjectWerkingsgebiedVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getModulesObjectWerkingsgebiedVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetModulesObjectWerkingsgebiedVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getModulesObjectWerkingsgebiedVersion>>
>
export type GetModulesObjectWerkingsgebiedVersionQueryError =
    HTTPValidationError

/**
 * @summary Get specific werkingsgebied by uuid in a module
 */
export const useGetModulesObjectWerkingsgebiedVersion = <
    TData = Awaited<ReturnType<typeof getModulesObjectWerkingsgebiedVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof getModulesObjectWerkingsgebiedVersion>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetModulesObjectWerkingsgebiedVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary List the last modified module object grouped per module ID
 */
export const werkingsgebiedGetListActiveModuleObjects = (
    lineageId: number,
    params: WerkingsgebiedGetListActiveModuleObjectsParams,
    signal?: AbortSignal
) => {
    return customInstance<ActiveModuleObjectsResponse[]>({
        url: `/modules/object/werkingsgebied/active/${lineageId}`,
        method: 'GET',
        params,
        signal,
    })
}

export const getWerkingsgebiedGetListActiveModuleObjectsQueryKey = (
    lineageId: number,
    params: WerkingsgebiedGetListActiveModuleObjectsParams
) => {
    return [
        `/modules/object/werkingsgebied/active/${lineageId}`,
        ...(params ? [params] : []),
    ] as const
}

export const getWerkingsgebiedGetListActiveModuleObjectsQueryOptions = <
    TData = Awaited<
        ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: WerkingsgebiedGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWerkingsgebiedGetListActiveModuleObjectsQueryKey(lineageId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>>
    > = ({ signal }) =>
        werkingsgebiedGetListActiveModuleObjects(lineageId, params, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WerkingsgebiedGetListActiveModuleObjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>>
>
export type WerkingsgebiedGetListActiveModuleObjectsQueryError =
    HTTPValidationError

/**
 * @summary List the last modified module object grouped per module ID
 */
export const useWerkingsgebiedGetListActiveModuleObjects = <
    TData = Awaited<
        ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>
    >,
    TError = HTTPValidationError,
>(
    lineageId: number,
    params: WerkingsgebiedGetListActiveModuleObjectsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<
                    ReturnType<typeof werkingsgebiedGetListActiveModuleObjects>
                >,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
        getWerkingsgebiedGetListActiveModuleObjectsQueryOptions(
            lineageId,
            params,
            options
        )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get specific werkingsgebied by uuid in a module
 */
export const getRevisionsWerkingsgebiedVersion = (
    moduleId: number,
    objectUuid: string,
    signal?: AbortSignal
) => {
    return customInstance<WerkingsgebiedFull>({
        url: `/revisions/${moduleId}/werkingsgebied/version/${objectUuid}`,
        method: 'GET',
        signal,
    })
}

export const getGetRevisionsWerkingsgebiedVersionQueryKey = (
    moduleId: number,
    objectUuid: string
) => {
    return [
        `/revisions/${moduleId}/werkingsgebied/version/${objectUuid}`,
    ] as const
}

export const getGetRevisionsWerkingsgebiedVersionQueryOptions = <
    TData = Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetRevisionsWerkingsgebiedVersionQueryKey(moduleId, objectUuid)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>
    > = ({ signal }) =>
        getRevisionsWerkingsgebiedVersion(moduleId, objectUuid, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!(moduleId && objectUuid),
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type GetRevisionsWerkingsgebiedVersionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>
>
export type GetRevisionsWerkingsgebiedVersionQueryError = HTTPValidationError

/**
 * @summary Get specific werkingsgebied by uuid in a module
 */
export const useGetRevisionsWerkingsgebiedVersion = <
    TData = Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>,
    TError = HTTPValidationError,
>(
    moduleId: number,
    objectUuid: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getRevisionsWerkingsgebiedVersion>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetRevisionsWerkingsgebiedVersionQueryOptions(
        moduleId,
        objectUuid,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Add new object
 */
export const wettelijkeTaakAtemporalCreateObject = (
    wettelijkeTaakCreate: WettelijkeTaakCreate
) => {
    return customInstance<WettelijkeTaakUUID>({
        url: `/wettelijke-taak`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: wettelijkeTaakCreate,
    })
}

export const getWettelijkeTaakAtemporalCreateObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>,
        TError,
        { data: WettelijkeTaakCreate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>,
    TError,
    { data: WettelijkeTaakCreate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>,
        { data: WettelijkeTaakCreate }
    > = props => {
        const { data } = props ?? {}

        return wettelijkeTaakAtemporalCreateObject(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WettelijkeTaakAtemporalCreateObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>
>
export type WettelijkeTaakAtemporalCreateObjectMutationBody =
    WettelijkeTaakCreate
export type WettelijkeTaakAtemporalCreateObjectMutationError =
    HTTPValidationError

/**
 * @summary Add new object
 */
export const useWettelijkeTaakAtemporalCreateObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>,
        TError,
        { data: WettelijkeTaakCreate },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalCreateObject>>,
    TError,
    { data: WettelijkeTaakCreate },
    TContext
> => {
    const mutationOptions =
        getWettelijkeTaakAtemporalCreateObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit atemporal object
 */
export const wettelijkeTaakAtemporalEditObject = (
    lineageId: number,
    wettelijkeTaakEdit: WettelijkeTaakEdit
) => {
    return customInstance<ResponseOK>({
        url: `/wettelijke-taak/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: wettelijkeTaakEdit,
    })
}

export const getWettelijkeTaakAtemporalEditObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>,
        TError,
        { lineageId: number; data: WettelijkeTaakEdit },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>,
    TError,
    { lineageId: number; data: WettelijkeTaakEdit },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>,
        { lineageId: number; data: WettelijkeTaakEdit }
    > = props => {
        const { lineageId, data } = props ?? {}

        return wettelijkeTaakAtemporalEditObject(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WettelijkeTaakAtemporalEditObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>
>
export type WettelijkeTaakAtemporalEditObjectMutationBody = WettelijkeTaakEdit
export type WettelijkeTaakAtemporalEditObjectMutationError = HTTPValidationError

/**
 * @summary Edit atemporal object
 */
export const useWettelijkeTaakAtemporalEditObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>,
        TError,
        { lineageId: number; data: WettelijkeTaakEdit },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalEditObject>>,
    TError,
    { lineageId: number; data: WettelijkeTaakEdit },
    TContext
> => {
    const mutationOptions =
        getWettelijkeTaakAtemporalEditObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Delete atemporal object
 */
export const wettelijkeTaakAtemporalDeleteObject = (lineageId: number) => {
    return customInstance<ResponseOK>({
        url: `/wettelijke-taak/${lineageId}`,
        method: 'DELETE',
    })
}

export const getWettelijkeTaakAtemporalDeleteObjectMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>,
        { lineageId: number }
    > = props => {
        const { lineageId } = props ?? {}

        return wettelijkeTaakAtemporalDeleteObject(lineageId)
    }

    return { mutationFn, ...mutationOptions }
}

export type WettelijkeTaakAtemporalDeleteObjectMutationResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>
>

export type WettelijkeTaakAtemporalDeleteObjectMutationError =
    HTTPValidationError

/**
 * @summary Delete atemporal object
 */
export const useWettelijkeTaakAtemporalDeleteObject = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>,
        TError,
        { lineageId: number },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof wettelijkeTaakAtemporalDeleteObject>>,
    TError,
    { lineageId: number },
    TContext
> => {
    const mutationOptions =
        getWettelijkeTaakAtemporalDeleteObjectMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Get all the valid wettelijke_taak lineages and shows the latest object of each
 */
export const wettelijkeTaakListValidLineages = (
    params?: WettelijkeTaakListValidLineagesParams,
    signal?: AbortSignal
) => {
    return customInstance<PagedResponseWettelijkeTaakBasic>({
        url: `/wettelijke-taak/valid`,
        method: 'GET',
        params,
        signal,
    })
}

export const getWettelijkeTaakListValidLineagesQueryKey = (
    params?: WettelijkeTaakListValidLineagesParams
) => {
    return [`/wettelijke-taak/valid`, ...(params ? [params] : [])] as const
}

export const getWettelijkeTaakListValidLineagesQueryOptions = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: WettelijkeTaakListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWettelijkeTaakListValidLineagesQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>
    > = ({ signal }) => wettelijkeTaakListValidLineages(params, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WettelijkeTaakListValidLineagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>
>
export type WettelijkeTaakListValidLineagesQueryError = HTTPValidationError

/**
 * @summary Get all the valid wettelijke_taak lineages and shows the latest object of each
 */
export const useWettelijkeTaakListValidLineages = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>,
    TError = HTTPValidationError,
>(
    params?: WettelijkeTaakListValidLineagesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakListValidLineages>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWettelijkeTaakListValidLineagesQueryOptions(
        params,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get latest lineage record for wettelijke_taak by their lineage id
 */
export const wettelijkeTaakViewObjectLatest = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<WettelijkeTaakFull>({
        url: `/wettelijke-taak/latest/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getWettelijkeTaakViewObjectLatestQueryKey = (
    lineageId: number
) => {
    return [`/wettelijke-taak/latest/${lineageId}`] as const
}

export const getWettelijkeTaakViewObjectLatestQueryOptions = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWettelijkeTaakViewObjectLatestQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>
    > = ({ signal }) => wettelijkeTaakViewObjectLatest(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WettelijkeTaakViewObjectLatestQueryResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>
>
export type WettelijkeTaakViewObjectLatestQueryError = HTTPValidationError

/**
 * @summary Get latest lineage record for wettelijke_taak by their lineage id
 */
export const useWettelijkeTaakViewObjectLatest = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakViewObjectLatest>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWettelijkeTaakViewObjectLatestQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Get all relation codes of the given wettelijke_taak lineage
 */
export const wettelijkeTaakGetRelationsList = (
    lineageId: number,
    signal?: AbortSignal
) => {
    return customInstance<ReadRelation[]>({
        url: `/wettelijke-taak/relations/${lineageId}`,
        method: 'GET',
        signal,
    })
}

export const getWettelijkeTaakGetRelationsListQueryKey = (
    lineageId: number
) => {
    return [`/wettelijke-taak/relations/${lineageId}`] as const
}

export const getWettelijkeTaakGetRelationsListQueryOptions = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>,
                TError,
                TData
            >
        >
    }
) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getWettelijkeTaakGetRelationsListQueryKey(lineageId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>
    > = ({ signal }) => wettelijkeTaakGetRelationsList(lineageId, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!lineageId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type WettelijkeTaakGetRelationsListQueryResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>
>
export type WettelijkeTaakGetRelationsListQueryError = HTTPValidationError

/**
 * @summary Get all relation codes of the given wettelijke_taak lineage
 */
export const useWettelijkeTaakGetRelationsList = <
    TData = Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>,
    TError = HTTPValidationError,
>(
    lineageId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof wettelijkeTaakGetRelationsList>>,
                TError,
                TData
            >
        >
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getWettelijkeTaakGetRelationsListQueryOptions(
        lineageId,
        options
    )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary Overwrite all relations of the given wettelijke_taak lineage
 */
export const wettelijkeTaakPostRelationsOverwrite = (
    lineageId: number,
    writeRelation: WriteRelation[]
) => {
    return customInstance<ResponseOK>({
        url: `/wettelijke-taak/relations/${lineageId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: writeRelation,
    })
}

export const getWettelijkeTaakPostRelationsOverwriteMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>,
        { lineageId: number; data: WriteRelation[] }
    > = props => {
        const { lineageId, data } = props ?? {}

        return wettelijkeTaakPostRelationsOverwrite(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WettelijkeTaakPostRelationsOverwriteMutationResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>
>
export type WettelijkeTaakPostRelationsOverwriteMutationBody = WriteRelation[]
export type WettelijkeTaakPostRelationsOverwriteMutationError =
    HTTPValidationError

/**
 * @summary Overwrite all relations of the given wettelijke_taak lineage
 */
export const useWettelijkeTaakPostRelationsOverwrite = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>,
        TError,
        { lineageId: number; data: WriteRelation[] },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof wettelijkeTaakPostRelationsOverwrite>>,
    TError,
    { lineageId: number; data: WriteRelation[] },
    TContext
> => {
    const mutationOptions =
        getWettelijkeTaakPostRelationsOverwriteMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Edit static data of an object
 */
export const wettelijkeTaakEditObjectStatic = (
    lineageId: number,
    wettelijkeTaakStaticPostStatics: WettelijkeTaakStaticPostStatics
) => {
    return customInstance<ResponseOK>({
        url: `/wettelijke-taak/static/${lineageId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: wettelijkeTaakStaticPostStatics,
    })
}

export const getWettelijkeTaakEditObjectStaticMutationOptions = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>,
        TError,
        { lineageId: number; data: WettelijkeTaakStaticPostStatics },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>,
    TError,
    { lineageId: number; data: WettelijkeTaakStaticPostStatics },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>,
        { lineageId: number; data: WettelijkeTaakStaticPostStatics }
    > = props => {
        const { lineageId, data } = props ?? {}

        return wettelijkeTaakEditObjectStatic(lineageId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type WettelijkeTaakEditObjectStaticMutationResult = NonNullable<
    Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>
>
export type WettelijkeTaakEditObjectStaticMutationBody =
    WettelijkeTaakStaticPostStatics
export type WettelijkeTaakEditObjectStaticMutationError = HTTPValidationError

/**
 * @summary Edit static data of an object
 */
export const useWettelijkeTaakEditObjectStatic = <
    TError = HTTPValidationError,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>,
        TError,
        { lineageId: number; data: WettelijkeTaakStaticPostStatics },
        TContext
    >
}): UseMutationResult<
    Awaited<ReturnType<typeof wettelijkeTaakEditObjectStatic>>,
    TError,
    { lineageId: number; data: WettelijkeTaakStaticPostStatics },
    TContext
> => {
    const mutationOptions =
        getWettelijkeTaakEditObjectStaticMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary Health Check
 */
export const healthCheck = (signal?: AbortSignal) => {
    return customInstance<unknown>({ url: `/health`, method: 'GET', signal })
}

export const getHealthCheckQueryKey = () => {
    return [`/health`] as const
}

export const getHealthCheckQueryOptions = <
    TData = Awaited<ReturnType<typeof healthCheck>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >
}) => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey()

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
        signal,
    }) => healthCheck(signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof healthCheck>>,
        TError,
        TData
    > & { queryKey: QueryKey }
}

export type HealthCheckQueryResult = NonNullable<
    Awaited<ReturnType<typeof healthCheck>>
>
export type HealthCheckQueryError = unknown

/**
 * @summary Health Check
 */
export const useHealthCheck = <
    TData = Awaited<ReturnType<typeof healthCheck>>,
    TError = unknown,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getHealthCheckQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
}
